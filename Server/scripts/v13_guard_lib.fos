// Name: v13_guard_lib
// Author: Sufir
// Edited by:

// Uses
#include "_macros.fos"
#include "utils_for_array.fos"

// Defines

// Проверка, на попытку установки взрывчатки или мины.
bool IsMined( Critter& sapper, Item& item, Critter& miner, int minerMinSkill, uint16[] BadPid )
{

    if( !valid( miner ) )
        return false;
    if( !valid( sapper ) )
        return false;
    // Проверяем - видим ли мы минёра.
    if( !miner.IsSeenBy( sapper ) )
        return false;
    // Заминировать нас не так-то просто, нужно быть действительно мастером и удачливым ловкачем. Ну и конечно рандом.
    if( ( miner.StatBase[ ST_AGILITY ] + miner.StatBase[ ST_LUCK ] + Random( 1, 10 ) ) / 3 < 7 || miner.Skill[ SK_TRAPS ] < minerMinSkill )
    {
        for( uint i = 0; i < BadPid.length(); i++ )
        {
            if( item.GetProtoId() == BadPid[ i ] )
            {
                return true;
            }
        }
    }
    return false;

}


// Проверка, на попытку установки взрывчатки или мины.
/*bool IsMined( Critter& sapper, Item& item, Critter& miner, int minerMinSkill, uint16[] BadPid )
   {
        //uint[] BadPids = BadPid;
        return IsMined( sapper, item, miner, minerMinSkill, BadPid );
        //return false;
   }*/


// Проверяем игрока на наличие оружия в руках. Можно указать допустимое оружие, например заточку.
bool SearchWeapon( Item@ item, uint[] @ itemsAllowed  )
{

    if( valid( item ) )
    {
        if( ( item.GetType() == ITEM_TYPE_WEAPON ) && ( itemsAllowed.length() > 0 ) )        // если у игрока в руке оружие
        {
            for( uint i = 0; i < itemsAllowed.length(); i++ )
            {
                if( item.GetProtoId() == itemsAllowed[ i ] )
                {
                    return false;
                }
            }
            return true;
        }
        else if( ( item.GetType() == ITEM_TYPE_WEAPON ) && ( itemsAllowed.length() <= 0 ) )
        {
            return true;
        }
        return false;
    }
    return false;

}


// Проверяем игрока на наличие оружия в руках.
bool SearchWeapon( Item@ item  )
{

    uint[] itemsAllowed;
    return SearchWeapon( item, itemsAllowed );

}


// Проверяем игрока на наличие в инвентаре запретных предметов
bool EquipmentInspection( Critter& player, uint[]& itemsForbidden )
{

    if( player.IsNotValid )
        return false;
    if( !player.IsPlayer() )
        return false;

    Item@[] items;
    player.GetItems( -1, items );
    return SearchedForbidden( items, itemsForbidden );

}


// Проверяем игрока на наличие в инвентаре запретных предметов
bool EquipmentInspection( Critter& player, uint16[]& itemsForbidden )
{

    return EquipmentInspection( player, itemsForbidden );

}


// Ищем Id запретных предметов в масииве.
bool SearchedForbidden( Item@[] items, uint[] @ itemsForbidden )
{

    // Перебираем проверяемый массив предметов и сравниваем их ID с ID запрещённых предметов.
    for( uint it = 0; it < items.length(); it++ )
    {
        for( uint itf = 0; itf < itemsForbidden.length(); itf++ )
        {
            if( !items[ it ].IsNotValid )
            {
                if( items[ it ].GetProtoId() == itemsForbidden[ itf ] )
                    return true;
            }
        }
    }
    return false;

}
