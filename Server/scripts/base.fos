#include "_macros.fos"
#include "entire.fos"
#include "pids_groups.fos"

#define SIERRA_BASE          ( 0 )
#define MARIPOSA_BASE        ( 1 )
#define CATHEDRAL_BASE       ( 2 )
#define MAX_BASES            ( 3 )

#define ORG_ENCLAVE          ( 1 )
#define ORG_BOS              ( 2 )

#define BASE_REFRESH_TIME    ( REAL_MINUTE( Random( 25, 35 ) ) ) // 25-35 real minutes
#define CAR_WAIT_TIME        ( 60 * 60 )                         // 1 game hour

#define ENTIRE_SUPPLY_CAR    ( 50 )

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";

const       uint16[] CarMaps = { MAP_sad_enter, MAP_mariposa_enter, MAP_cath_enter };
const       uint[] TerminalMaps = { MAP_sad_level4, MAP_mariposa_level4, MAP_cath_level3 };
const       uint[] GvarRule = { GVAR_base_sierra_rule, GVAR_base_mariposa_rule, GVAR_base_cathedral_rule };
const       uint[] GvarOrg = { GVAR_base_sierra_org, GVAR_base_mariposa_org, GVAR_base_cathedral_org };
const       uint[] GvarTimeEvent = { GVAR_base_sierra_time_event_id, GVAR_base_mariposa_time_event_id, GVAR_base_cathedral_time_event_id };
const int[] ScoreCur = { SCORE_SIERRA_CUR, SCORE_MARIPOSA_CUR, SCORE_CATHEDRAL_CUR };
const int[] ScoreBest = { SCORE_SIERRA_BEST, SCORE_MARIPOSA_BEST, SCORE_CATHEDRAL_BEST };
const int[] ScoreOrg = { SCORE_SIERRA_ORG, SCORE_MARIPOSA_ORG, SCORE_CATHEDRAL_ORG };


uint e_BaseRefresh( uint[] @ values )
{
    RefreshBase( values[ 0 ] );
    return 0;
}

void RefreshBase( int base )
{
    if( base >= MAX_BASES )
        return;

    GameVar@ varTE = GetGlobalVar( GvarTimeEvent[ base ] );
    varTE = 0;

    GameVar@ varRule = GetGlobalVar( GvarRule[ base ] );
    if( varRule == 0 )
        return;

    GameVar@ varOrg = GetGlobalVar( GvarOrg[ base ] );
    if( varOrg == 0 )
        return;

    Map@ map = GetMapByPid( CarMaps[ base ], 0 );
    if( not valid( map ) )
        return;

    CreateSupplyCar( map, base, varRule.GetValue(), varOrg.GetValue() );

    Critter@ player = GetCritter( varRule.GetValue() );
    if( valid( player ) && player.IsPlayer() )
        player.AddScore( ScoreBest[ base ], 1 );

    GameVar@ varEnclaveScore = GetGlobalVar( GVAR_base_enclave_score );
    GameVar@ varBosScore = GetGlobalVar( GVAR_base_bos_score );
    if( varOrg == ORG_ENCLAVE )
        varEnclaveScore += 1;
    else if( varOrg == ORG_BOS )
        varBosScore += 1;
    if( varEnclaveScore > varBosScore )
        SetBestScore( SCORE_BASE_BEST_ORG, null, "Enclave" );
    else if( varEnclaveScore < varBosScore )
        SetBestScore( SCORE_BASE_BEST_ORG, null, "Br. of Steel" );
    else
        SetBestScore( SCORE_BASE_BEST_ORG, null, "<draw>" );
}

void CreateSupplyCar( Map@ map, int base, uint playerId, int org )
{
    Entire[] entires;
    ParseEntires( map, entires, ENTIRE_SUPPLY_CAR );

    uint16 carPid = ( org == ORG_BOS ? PID_HUMMER : PID_SCOUT );

    uint16 hx, hy;
    for( int i = 0, j = entires.length(); i <= j; i++ )
    {
        if( i == j )
            return;

        Entire@ ent = entires[ i ];
        if( map.CheckPlaceForItem( ent.HexX, ent.HexY, carPid ) )
        {
            hx = ent.HexX;
            hy = ent.HexY;
            break;
        }
    }

    Item@ car = map.AddItem( hx, hy, carPid, 1 );
    if( not valid( car ) )
        return;
    car.LockerId = 1;
    car.Charge = Random( 0, car.Proto.Car_TankVolume );
    car.Deterioration = Random( 0, car.Proto.Car_MaxDeterioration );

    Item@ bag = car.GetChild( 0 );
    if( valid( bag ) )
    {
        bag.LockerId = ( org == ORG_ENCLAVE ? _CritFingersDoorId( playerId ) : _CritEyesDoorId( playerId ) );
        bag.LockerComplexity = Random( 100, 200 );

        if( org == ORG_ENCLAVE )
        {
            if( Random( 1, 200 ) == 1 )
                bag.AddItem( PID_ADVANCED_POWER_ARMOR, 1, 0 );
            if( Random( 1, 250 ) == 1 )
                bag.AddItem( PID_ADVANCED_POWER_ARMOR_MK2, 1, 0 );
        }
        else
        {
            if( Random( 1, 60 ) == 1 )
                bag.AddItem( PID_POWERED_ARMOR, 1, 0 );
            if( Random( 1, 80 ) == 1 )
                bag.AddItem( PID_HARDENED_POWER_ARMOR, 1, 0 );
        }

        bag.AddItem( PID_BOTTLE_CAPS, Random( 100, 1000 ), 0 );
        FillBag( bag, Pids_Ammo, 40, 80, 80 );
        FillBag( bag, Pids_AmmoOther, 1, 5, 40 );

        FillBag( bag, Pids_WeaponPistols, 1, 2, 40 );
        FillBag( bag, Pids_WeaponRifles, 1, 1, 10 );
        FillBag( bag, Pids_WeaponShotguns, 1, 1, 20 );
        FillBag( bag, Pids_WeaponPistolMachineGun, 1, 1, 20 );
        FillBag( bag, Pids_WeaponBigGuns, 1, 1, 10 );
        FillBag( bag, Pids_WeaponLaser, 1, 1, 5 );
        FillBag( bag, Pids_WeaponPlasma, 1, 1, 5 );
        FillBag( bag, Pids_WeaponPulse, 1, 1, 5 );
        FillBag( bag, Pids_WeaponGrenade, 2, 5, 80 );
        FillBag( bag, Pids_WeaponThrowingOther, 10, 30, 100 );
        FillBag( bag, Pids_WeaponCutting, 1, 2, 80 );
        FillBag( bag, Pids_WeaponShock, 1, 2, 80 );
        FillBag( bag, Pids_WeaponElectric, 1, 2, 80 );
        FillBag( bag, Pids_WeaponUnarmed, 1, 2, 80 );

        FillBag( bag, Pids_ArmorLight, 1, 2, 40 );
        FillBag( bag, Pids_ArmorMedium, 1, 1, 20 );

        FillBag( bag, Pids_DrugsPreparations, 1, 5, 60 );
        FillBag( bag, Pids_DrugsAlcohol, 1, 3, 50 );
        FillBag( bag, Pids_Drugs, 1, 3, 60 );
        FillBag( bag, Pids_DrugsOther, 1, 2, 50 );

        FillBag( bag, Pids_MiscExplosions, 1, 1, 50 );

        FillBag( bag, Pids_MiscPartsBasic, 1, 5, 70 );
        FillBag( bag, Pids_MiscPartsSelfSpecial, 1, 1, 20 );
        FillBag( bag, Pids_MiscPartsSpecial, 1, 1, 10 );
        FillBag( bag, Pids_MiscPartsBody, 1, 1, 5 );

        FillBag( bag, Pids_MiscToolsTech, 1, 1, 30 );
        FillBag( bag, Pids_MiscToolsMediacal, 1, 1, 80 );
        FillBag( bag, Pids_MiscToolsOther, 1, 1, 80 );
        FillBag( bag, Pids_MiscToolsSpecial, 1, 1, 50 );
        FillBag( bag, Pids_MiscOther, 1, 1, 70 );

        // Activate militia on Cathedral
        if( base == CATHEDRAL_BASE )
        {
            Critter@[] npcs, players;
            if( map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players ) > 0 && map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_NPC, npcs ) > 0 )
            {
                for( uint i = 0, ii = npcs.length(); i < ii; i++ )
                {
                    Critter@ npc = npcs[ i ];
                    for( uint j = 0, jj = players.length(); j < jj; j++ )
                        AddAttackPlane( npc, 0, players[ j ] );
                }
            }
        }
    }

    CreateTimeEvent( __FullSecond + CAR_WAIT_TIME, "e_DeleteCar", car.Id, true );
}

void FillBag( Item@ bag, uint16[]& pids, uint min, uint max, int chance )
{
    if( chance >= Random( 1, 100 ) )
        bag.AddItem( pids[ Random( 0, pids.length() - 1 ) ], Random( min, max ), 0 );
}

uint e_DeleteCar( uint[] @ values )
{
    Item@ car = GetItem( values[ 0 ] );
    if( valid( car ) )
        DeleteItem( car );
    return 0;
}

bool s_Terminal( Critter& player, Scenery& terminal, int skill, Item@ item )
{
    if( player.IsPlayer() && skill == -1 && not valid( item ) )
        RunDialog( player, DIALOG_base_terminal, terminal.HexX, terminal.HexY, false );
    return true;
}

void r_BaseToEnclave( Critter& player, Critter@ terminal, int val )
{
    BaseTo( player, ORG_ENCLAVE );
}

void r_BaseToBos( Critter& player, Critter@ terminal, int val )
{
    BaseTo( player, ORG_BOS );
}

void BaseTo( Critter@ player, int org )
{
    int base = GetBaseByMap( player.GetMap() );
    if( base == -1 )
        return;

    GameVar@ varRule = GetGlobalVar( GvarRule[ base ] );
    varRule = player.Id;

    GameVar@ varOrg = GetGlobalVar( GvarOrg[ base ] );
    varOrg = org;

    SetBestScore( ScoreCur[ base ], player, "" );
    SetBestScore( ScoreOrg[ base ], null, org == ORG_ENCLAVE ? "Enclave" : "Br. of Steel" );

    // Delete old
    GameVar@ varTE = GetGlobalVar( GvarTimeEvent[ base ] );
    if( varTE != 0 )
    {
        EraseTimeEvent( varTE.GetValue() );
        varTE = 0;
    }

    // Create new
    varTE = CreateTimeEvent( __FullSecond + BASE_REFRESH_TIME, "e_BaseRefresh", base, true );
}

int GetBaseByMap( Map@ map )
{
    if( not valid( map ) )
        return -1;
    uint16 mapPid = map.GetProtoId();
    for( int i = 0, j = TerminalMaps.length(); i < j; i++ )
        if( TerminalMaps[ i ] == mapPid )
            return i;
    return -1;
}

bool d_CheckTerminalLock( Critter& player, Critter@ terminal, int val )
{
    return true;
}
