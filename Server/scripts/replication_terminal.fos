// Author: cvet
#include "_macros.fos"
#include "_dialogs.fos"

// terminal == null

#define FORCE_DIALOG_PAY_SELF          ( 3 )
#define FORCE_DIALOG_PAY_OTHER_NEXT    ( 8 )

#define STR_GENERIC_ERROR              ( DLGSTR( DIALOG_repl_terminal, 0 ) ) // Критическая ошибка. Пожалуйста обратитесь в службу поддержки.
#define STR_PLAYER_NOT_FOUND           ( DLGSTR( DIALOG_repl_terminal, 1 ) ) // Данный клиент не найден. Возможно вы ошиблись в имени, либо клиент не в зоне доступа.
#define STR_INVALID_MONEY_COUNT        ( DLGSTR( DIALOG_repl_terminal, 2 ) )
#define STR_ZERO_MONEY_COUNT           ( DLGSTR( DIALOG_repl_terminal, 3 ) )
#define STR_NEGATIVE_MONEY_COUNT       ( DLGSTR( DIALOG_repl_terminal, 4 ) )
#define STR_NOT_ENAUGTH_MONEY          ( DLGSTR( DIALOG_repl_terminal, 5 ) )
#define STR_ZERO_BALANCE               ( DLGSTR( DIALOG_repl_terminal, 6 ) )
#define STR_NEGATIVE_BALANCE           ( DLGSTR( DIALOG_repl_terminal, 7 ) )
#define STR_OPERATION_SUCCESS          ( DLGSTR( DIALOG_repl_terminal, 10 ) )

#define SEND_ERROR_RETURN              # ( cr, error )     { cr.SayMsg( SAY_DIALOG, TEXTMSG_DLG, error ); return; }
#define SEND_ERROR_RETURN0             # ( cr, error )     { cr.SayMsg( SAY_DIALOG, TEXTMSG_DLG, error ); return 0; }

bool s_Terminal( Critter& player, Scenery& terminal, int skill, Item@ item )
{
    if( player.IsPlayer() && skill == -1 && not valid( item ) )
        RunDialog( player, DIALOG_repl_terminal, terminal.HexX, terminal.HexY, false );
    return true;
}

void r_PaySelf( Critter& player, Critter@ terminal )
{
    GameVar@ var = GetLocalVar( LVAR_terminal_player_id, player.Id );
    if( not valid( var ) )
        SEND_ERROR_RETURN( player, STR_GENERIC_ERROR );
    var = player.Id;
}

uint dlg_ChoosePlayer( Critter& player, Critter@ terminal, string@ playerName )
{
    if( not IS_DIALOG_SAY_MODE( playerName ) )
        return 0;

    GameVar@ var = GetLocalVar( LVAR_terminal_player_id, player.Id );
    if( not valid( var ) )
        SEND_ERROR_RETURN0( player, STR_GENERIC_ERROR );
    var = 0;

    Critter@ cr = GetPlayer( playerName );
    if( not valid( cr ) )
        SEND_ERROR_RETURN0( player, STR_PLAYER_NOT_FOUND );

    var = cr.Id;
    if( cr.Id == player.Id )
        return FORCE_DIALOG_PAY_SELF;
    return FORCE_DIALOG_PAY_OTHER_NEXT;
}

void dlg_TransferReal( Critter& player, Critter@ terminal, string@ moneyCount )
{
    if( not IS_DIALOG_SAY_MODE( moneyCount ) )
        return;
    TransferMoney( player, moneyCount, true );
}

void dlg_TransferVirtual( Critter& player, Critter@ terminal, string@ moneyCount )
{
    if( not IS_DIALOG_SAY_MODE( moneyCount ) )
        return;
    TransferMoney( player, moneyCount, false );
}

void dlg_TakeMoney( Critter& player, Critter@ terminal, string@ moneyCount )
{
    if( not IS_DIALOG_SAY_MODE( moneyCount ) )
        return;
    if( player.StatBase[ ST_REPLICATION_MONEY ] == 0 )
        SEND_ERROR_RETURN( player, STR_ZERO_BALANCE );
    if( player.StatBase[ ST_REPLICATION_MONEY ] < 0 )
        SEND_ERROR_RETURN( player, STR_NEGATIVE_BALANCE );
    int money = 0;
    if( not StrToInt( moneyCount, money ) )
        SEND_ERROR_RETURN( player, STR_INVALID_MONEY_COUNT );
    if( money == 0 )
        SEND_ERROR_RETURN( player, STR_ZERO_MONEY_COUNT );
    if( money < 0 )
        SEND_ERROR_RETURN( player, STR_NEGATIVE_MONEY_COUNT );
    if( money > player.StatBase[ ST_REPLICATION_MONEY ] )
        SEND_ERROR_RETURN( player, STR_NOT_ENAUGTH_MONEY );
    player.StatBase[ ST_REPLICATION_MONEY ] -= money;
    _CritAddItem( player, PID_BOTTLE_CAPS, money );
    player.SayMsg( SAY_DIALOG, TEXTMSG_TEXT, STR_OPERATION_SUCCESS );
}

void TransferMoney( Critter@ player, string@ moneyCount, bool forReal )
{
    // Get money to transfer.
    int money = 0;
    if( not StrToInt( moneyCount, money ) )
        SEND_ERROR_RETURN( player, STR_INVALID_MONEY_COUNT );
    if( money == 0 )
        SEND_ERROR_RETURN( player, STR_ZERO_MONEY_COUNT );
    if( money < 0 )
        SEND_ERROR_RETURN( player, STR_NEGATIVE_MONEY_COUNT );

    // Get stored critter.
    GameVar@ var = GetLocalVar( LVAR_terminal_player_id, player.Id );
    if( not valid( var ) )
        SEND_ERROR_RETURN( player, STR_GENERIC_ERROR );
    Critter@ cr = GetCritter( var.GetValue() );
    if( not valid( cr ) )
        SEND_ERROR_RETURN( player, STR_PLAYER_NOT_FOUND );

    // Transfer money.
    if( forReal )
    {
        if( uint( money ) > _CritCountItem( player, PID_BOTTLE_CAPS ) )
            SEND_ERROR_RETURN( player, STR_NOT_ENAUGTH_MONEY );
        _CritDeleteItem( player, PID_BOTTLE_CAPS, money );
    }
    else
    {
        if( money > player.StatBase[ ST_REPLICATION_MONEY ] )
            SEND_ERROR_RETURN( player, STR_NOT_ENAUGTH_MONEY );
        player.StatBase[ ST_REPLICATION_MONEY ] -= money;
    }

    cr.StatBase[ ST_REPLICATION_MONEY ] += money;
    player.SayMsg( SAY_DIALOG, TEXTMSG_TEXT, STR_OPERATION_SUCCESS );
}
