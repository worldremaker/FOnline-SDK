// Author rifleman17
// Странствующий путник, Илай.
// Может брать с собой одного игрока в качестве спутника
// Если путника убьет персонаж, у которого есть база, после этого Илай отведет следующего игрока на базу убийцы.
// не надо ставить его в СФ, иначе не выберется

#include "_animation.fos"
#include "_macros.fos"
#include "_bags.fos"
#include "_npc_pids.fos"
#include "_teams.fos"

#define CTE_HEALSELF     ( 41 )
#define STR_ATTACKED     ( 1 )
#define STR_ATTACK       ( 2 )
#define STR_KILL         ( 3 )
#define STR_TIME2MOVE    ( 4 )
#define STR_PICK         ( 5 )
#define PLANE_LOOT       ( 30 )

// #define DL #(s) (Log("traveller: " + s))
#define DL               # (s)

import void SetTraveller( uint crId, bool isTransit, uint entireNum, uint timeWaitLoc, uint timeWaitEnc, uint16[] locPids, bool visibleEncounters ) from "traveller";
import void UseDrug( Critter& cr, Item& drug ) from "drugs";
import void SetMonologue( Critter@ cr, uint firstStr, uint lastStr, uint nextMsg, uint nextDialog, uint8 sayType ) from "monologue";
import bool AddWalkPlane( Critter& npc, uint priority, int identifier, uint identifierExt, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";
import bool AddMiscPlane( Critter& npc, uint priority, uint waitSecond, string@ funcName ) from "npc_planes";

uint EliId;

void _EliInit( Critter& cr, bool firstTime )
{
    EliId = cr.Id;
    // Прокачка
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
    {
        cr.StatBase[ i ] = Random( 8, 10 );
    }
    for( uint i = ST_NORMAL_RESIST; i <= ST_POISON_RESISTANCE; i++ )
    {
        if( i == ST_EMP_RESIST )
            continue;
        cr.StatBase[ i ] = Random( 200, 280 );
    }
    cr.StatBase[ ST_MAX_LIFE ] = 1000;
    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.StatBase[ ST_MELEE_DAMAGE ] = 45;
    cr.StatBase[ ST_ACTION_POINTS ] = 50;
    cr.StatBase[ ST_CRITICAL_CHANCE ] = 65;
    cr.ModeBase[ MODE_GECK ] = 1;
    cr.ModeBase[ MODE_NO_HOME ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_BARTER ] = 1;
    cr.StatBase[ ST_HEALING_RATE ] = 100;
    for( uint i = SKILL_BEGIN; i <= SKILL_END; i++ )
    {
        cr.SkillBase[ i ] = Random( 100, 300 );
    }
    cr.SkillBase[ SK_OUTDOORSMAN ] = 50;
    cr.PerkBase[ PE_BONUS_HTH_ATTACKS ] = 3;
    cr.PerkBase[ PE_BONUS_HTH_DAMAGE ] = 3;
    cr.PerkBase[ PE_BETTER_CRITICALS ] = 1;
    cr.PerkBase[ PE_SILENT_DEATH ] = 1;
    cr.PerkBase[ PE_SLAYER ] = 1;
    cr.PerkBase[ PE_TERMINATOR ] = 1;
    uint16[] locPids;
    for( uint16 i = LOCATION_Den; i <= LOCATION_GeckCity; i++ )
    {
        if( i == LOCATION_SanFrancisco || i == LOCATION_Atoll )
            continue;
        locPids.insertLast( i );
    }
    SetTraveller( cr.Id, false, 0, 60 * 60 * 24, 60 * 60 * 2, locPids, true );
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "_EliAttacked" );
    cr.SetEvent( CRITTER_EVENT_PLANE_BEGIN, "_EliPlaneBegin" );
    cr.SetEvent( CRITTER_EVENT_PLANE_END, "_EliPlaneEnd" );
    cr.SetEvent( CRITTER_EVENT_IDLE, "_EliIdle" );
    cr.SetEvent( CRITTER_EVENT_SMTH_DEAD, "_EliSmthDead" );
    cr.SetEvent( CRITTER_EVENT_ATTACK, "_EliAttack" );
}

int _EliPlaneEnd( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    if( plane.Identifier == PLANE_LOOT && reason == REASON_SUCCESS )
    {
        _CritAnimatePickup( cr );
        if( Random( 1, 3 ) < 2 )
            cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], STR_PICK ) );
        AddMiscPlane( cr, AI_PLANE_ATTACK_PRIORITY - 2, 2 * __TimeMultiplier, null );
    }
    return PLANE_RUN_GLOBAL;
}

bool _EliAttack( Critter& cr, Critter& target )
{
    if( Random( 1, 10 ) < 2 )
        cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], STR_ATTACK ) );
    return false;
}

void _EliSmthDead( Critter& cr, Critter& fromCr, Critter@ killer )
{
    if( valid( killer ) && killer.Id == cr.Id )
    {
        cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], STR_KILL ) );
        AddWalkPlane( cr, 0, PLANE_LOOT, fromCr.Id, fromCr.HexX, fromCr.HexY, 6, false, 1 );
    }
}

void _EliIdle( Critter& cr )
{
    if( !valid( cr.GetMap() ) || !cr.IsNoPlanes() )
    {
        if( cr.Stat[ ST_VAR2 ] > 0 )
            cr.StatBase[ ST_VAR2 ] = 0;
        return;
    }
    // Сохраняется время следующей песни в Var2
    if( uint( cr.Stat[ ST_VAR2 ] ) < __FullSecond )
    {
        if( cr.Stat[ ST_VAR2 ] > 0 )
        {
            DL( "sing!" );
            Sing( cr );
        }
        cr.StatBase[ ST_VAR2 ] = __FullSecond + 60 * 5 * __TimeMultiplier;   // раз в 5 реальных минут
    }
}

void Sing( Critter& cr )
{
    uint8  song = Random( 1, 4 );
    uint16 firstStr = 0;
    uint16 lastStr = 0;
    switch( song )
    {
    case 1:
        firstStr = 5973;
        lastStr = 5978;
        break;
    case 2:
        firstStr = 5980;
        lastStr = 5987;
        break;
    case 3:
        firstStr = 5988;
        lastStr = 5997;
        break;
    case 4:
        firstStr = 5960;
        lastStr = 5967;
        break;
    default:
        return;
    }
    SetMonologue( cr, firstStr, lastStr, 4 * __TimeMultiplier, 0, SAY_EMOTE_ON_HEAD );
}

// CRITTER_EVENT_PLANE_BEGIN
int _EliPlaneBegin( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    plane.Run = true;
    return PLANE_RUN_GLOBAL;
}
// CRITTER_EVENT_ATTACKED
bool _EliAttacked( Critter& cr, Critter& attacker )
{
    if( Random( 1, 10 ) < 3 )
        cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], STR_ATTACKED ) );
    if( cr.GetTimeEvents( CTE_HEALSELF, null, null, null ) == 0 )
        cr.AddTimeEvent( "cte_HealSelf", 0, CTE_HEALSELF );
    return false;
}

// Поиск новой точки маршрута нпц, производится при заходе в локацию
uint cte_HealSelf( Critter& cr, int identifier, uint& rate )
{
    cr.StatBase[ ST_CURRENT_HP ] += 50;
    if( cr.Stat[ ST_CURRENT_HP ] * 2 > cr.Stat[ ST_MAX_LIFE ] )
        return 0;
    Item@ drug = cr.AddItem( PID_SUPER_STIMPAK, 1 );
    if( valid( drug ) )
        UseDrug( cr, drug );
    return 0;
}


// Debug
void WhereEli( Critter& cr, int, int, int )
{
    if( EliId == 0 )
        return;
    Critter@ eli = GetCritter( EliId );
    if( !valid( eli ) )
    {
        cr.Say( SAY_NETMSG, "Eli can't be found" );
        return;
    }
    Map@ map = eli.GetMap();
    if( !valid( map ) )
    {
        cr.Say( SAY_NETMSG, "Eli on global. X:" + eli.WorldX + "; Y:" + eli.WorldY );
        return;
    }
    cr.Say( SAY_NETMSG, "Eli found. MapPid = " + map.GetProtoId() + "; Id =" + map.Id );
}

// ~getaccess admin hh
// ~run debug ToMapEntire 34 0 0
// ~run eli AddEli 0 0 0
// ~run eli WhereEli 0 0 0
// ~settime 9999 2246 10 3 1 10 10 10
void AddEli( Critter& cr, int, int, int )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
    {
        cr.Say( SAY_NETMSG, "Can't add Eli on global." );
        return;
    }
    int[] params = { ST_DIALOG_ID, DIALOG_eli, ST_BAG_ID, BAG_Eli, ST_REPLICATION_TIME, -1 };
    map.AddNpc( NPC_PID_Eli, cr.HexX + 1, cr.HexY + 1, 6, params, null, "eli@_EliInit" );

}
