// Author: cvet
#include "_macros.fos"
#include "quest_warehouse_h.fos"


bool GetQuestCritters( Critter& player, uint[]& questCrIds )
{
    GameVar@ questDataId = GetLocalVar( LVAR_warehouse_data_id, player.Id );
    if( not valid( questDataId ) || questDataId == 0 )
        return false;

    uint[] questData;
    if( not GetAnyData( "Warehouse_" + questDataId.GetValue(), questData ) || questData.length() < 3 )
        return false;

    questCrIds.resize( questData.length() - 2 );
    for( uint i = 2, j = questData.length(); i < j; i++ )
        questCrIds[ i - 2 ] = questData[ i ];
    return true;
}

uint GetLocId( Critter& player )
{
    GameVar@ questDataId = GetLocalVar( LVAR_warehouse_data_id, player.Id );
    if( not valid( questDataId ) || questDataId == 0 )
        return 0;
    uint[] questData;
    if( not GetAnyData( "Warehouse_" + questDataId.GetValue(), questData ) )
        return 0;
    return questData[ 0 ];
}

void SetLocId( Critter& player, uint locId )
{
    GameVar@ questDataId = GetLocalVar( LVAR_warehouse_data_id, player.Id );
    if( not valid( questDataId ) || questDataId == 0 )
        return;
    uint[] questData;
    if( not GetAnyData( "Warehouse_" + questDataId.GetValue(), questData ) )
        return;
    questData[ 0 ] = locId;
    SetAnyData( "Warehouse_" + questDataId.GetValue(), questData );
}

void ChangeCrittersQuest( uint[]& questCrIds, uint16 varId, int newVal, uint exp )
{
    for( uint i = 0, j = questCrIds.length(); i < j; i++ )
    {
        uint     crId = questCrIds[ i ];
        GameVar@ quest = GetLocalVar( varId, crId );
        if( valid( quest ) )
        {
            quest = newVal;
            if( exp > 0 )
            {
                Critter@ cr = GetCritter( crId );
                if( valid( cr ) )
                    cr.StatBase[ ST_EXPERIENCE ] += exp;
            }
        }
    }
}

bool CheckQuestValue( Critter& player, uint questLVar, int val )
{
    GameVar@ quest = GetLocalVar( questLVar, player.Id );
    if( not valid( quest ) )
        return false;
    int curVal = quest.GetValue();

    if( questLVar == LVAR_q_warehouse || questLVar == LVAR_q_warehouse_sub1 || questLVar == LVAR_q_warehouse_sub2 )
    {
        return val == curVal;
    }
    else if( questLVar == LVAR_warehouse_other )
    {
        if( val < 0 || val > OTHER_MAX )
            return false;
        if( ( ( curVal >> val ) & 1 ) == 1 )
            return true;
    }

    return false;
}

bool CheckNewQuestValue( Critter& player, uint questLVar, int needVal )
{
    GameVar@ quest = GetLocalVar( questLVar, player.Id );
    if( not valid( quest ) )
        return false;
    int curVal = quest.GetValue();

    if( questLVar == LVAR_q_warehouse )
    {
        if( needVal == curVal )
            return false;
        if( needVal < MAINQUEST_GIVED || needVal > MAINQUEST_MARK_FAIL )
            return false;
        if( needVal == MAINQUEST_GIVED && curVal != MAINQUEST_NOT_GIVED )
            return false;
        if( needVal == MAINQUEST_DONE && curVal != MAINQUEST_GIVED )
            return false;
        if( needVal == MAINQUEST_MARK_DONE && curVal != MAINQUEST_DONE )
            return false;
        if( needVal == MAINQUEST_MARK_FAIL && curVal != MAINQUEST_GIVED )
            return false;
    }
    else if( questLVar == LVAR_q_warehouse_sub1 )
    {
        if( needVal == curVal )
            return false;
        if( needVal < SUBQUEST1_DAUGHTER_MADMAX || needVal > SUBQUEST1_DONE )
            return false;
        if( needVal == SUBQUEST1_DAUGHTER_MADMAX && curVal != SUBQUEST1_FIND_DAUGHTER )
            return false;
        if( needVal == SUBQUEST1_DELIVER_INFORMATION && curVal != SUBQUEST1_DAUGHTER_MADMAX )
            return false;
        if( needVal == SUBQUEST1_DONE && curVal != SUBQUEST1_DELIVER_INFORMATION )
            return false;
    }
    else if( questLVar == LVAR_q_warehouse_sub2 )
    {
        if( needVal == curVal )
            return false;
        if( needVal < SUBQUEST2_PORN_ACTRES || needVal > SUBQUEST2_DONE )
            return false;
        if( needVal == SUBQUEST2_PORN_ACTRES && curVal != SUBQUEST2_GOLDEN_GLOBES )
            return false;
        if( needVal == SUBQUEST2_GAMBLER && curVal != SUBQUEST2_PORN_ACTRES )
            return false;
        if( needVal == SUBQUEST2_DONE )
        {
            if( curVal != SUBQUEST2_GAMBLER )
                return false;
            GameVar@ subQuest1 = GetLocalVar( LVAR_q_warehouse_sub1, player.Id );
            if( not valid( subQuest1 ) || subQuest1 != SUBQUEST1_DONE )
                return false;
        }
    }
    else if( questLVar == LVAR_warehouse_other )
    {
        if( needVal < 0 || needVal > OTHER_MAX )
            return false;
        if( ( ( curVal >> needVal ) & 1 ) == 0 )
            return false;
    }
    else
    {
        return false;
    }
    return true;
}

uint ProcessMainQuest( Critter& player, int newVal )
{
    if( not CheckNewQuestValue( player, LVAR_q_warehouse, newVal ) )
        return FD_GENERIC_ERROR;

    // Выдача квеста
    if( newVal == MAINQUEST_GIVED )
    {
        Map@ map = player.GetMap();
        if( not valid( map ) )
            return FD_GENERIC_ERROR;

        Critter@[] critters;
        critters.insertLast( @player );
        player.GetFollowGroup( FIND_LIFE, critters );
        if( critters.length() < MIN_PLAYERS )
            return FD_LOW_PLAYERS;

        bool isMalePresent = false;
        uint aproxLevel = 0;
        Critter@[] questCr;
        uint[] questData( 2 );
        questData[ 0 ] = 0;
        questData[ 1 ] = 0;
        for( uint i = 0; i < critters.length(); i++ )
        {
            Critter@ cr = critters[ i ];
            if( cr.IsPlayer() )
            {
                GameVar@ crQuest = GetLocalVar( LVAR_q_warehouse, cr.Id );
                if( valid( crQuest ) && CheckNewQuestValue( cr, LVAR_q_warehouse, MAINQUEST_GIVED ) )
                {
                    if( cr.Stat[ ST_LEVEL ] < MIN_EVERY_LEVEL )
                        return FD_LOW_LEVEL;

                    questCr.insertLast( @cr );
                    questData.insertLast( cr.Id );
                    aproxLevel += cr.Stat[ ST_LEVEL ];
                    if( not isMalePresent && cr.Stat[ ST_GENDER ] == GENDER_MALE )
                        isMalePresent = true;
                }
            }
        }
        if( not isMalePresent )
            return FD_LOW_PLAYERS;

        // Проверка численности.
        if( questCr.length() < MIN_PLAYERS )
            return FD_LOW_PLAYERS;
        if( questCr.length() > MAX_PLAYERS )
            return FD_MANY_PLAYERS;

        // Level check
        aproxLevel /= questCr.length();
        if( aproxLevel < MIN_APROX_LEVEL )
            return FD_LOW_LEVEL;

        // Сохроняем данные о команде.
        if( not SetAnyData( "Warehouse_" + player.Id, questData ) )
            return FD_GENERIC_ERROR;

        // Отмечаем квест.
        for( uint i = 0; i < questCr.length(); i++ )
        {
            Critter@ cr = questCr[ i ];
            GameVar@ crQuestMain = GetLocalVar( LVAR_q_warehouse, cr.Id );
            GameVar@ crQuestSub1 = GetLocalVar( LVAR_q_warehouse_sub1, cr.Id );
            GameVar@ crQuestSub2 = GetLocalVar( LVAR_q_warehouse_sub2, cr.Id );
            GameVar@ crQuestOther = GetLocalVar( LVAR_warehouse_other, cr.Id );
            GameVar@ crQuestDataId = GetLocalVar( LVAR_warehouse_data_id, cr.Id );
            if( not valid( crQuestMain ) || not valid( crQuestSub1 ) || not valid( crQuestSub2 ) ||
                not valid( crQuestOther ) || not valid( crQuestDataId ) )
                return FD_GENERIC_ERROR;
            crQuestMain = MAINQUEST_GIVED;
            crQuestSub1 = SUBQUEST1_FIND_DAUGHTER;
            crQuestSub2 = SUBQUEST2_GOLDEN_GLOBES;
            crQuestOther = 0;
            crQuestDataId = player.Id;
        }
    }
    // Выполнение
    else
    {
        uint[] questCrIds;
        if( not GetQuestCritters( player, questCrIds ) )
            return FD_GENERIC_ERROR;
        ChangeCrittersQuest( questCrIds, LVAR_q_warehouse, newVal, MainQuestExperience[ newVal ] );

        if( newVal == MAINQUEST_MARK_FAIL || newVal == MAINQUEST_MARK_DONE )
        {
            // Осторожно удаляем локацию
            uint      locId = GetLocId( player );
            Location@ loc = GetLocation( locId );
            if( valid( loc ) )
                loc.AutoGarbage = true;

            // Стираем данные
            GameVar@ crQuestDataId = GetLocalVar( LVAR_warehouse_data_id, player.Id );
            if( valid( crQuestDataId ) && crQuestDataId != 0 )
                EraseAnyData( "Warehouse_" + crQuestDataId.GetValue() );
        }
    }

    return 0;
}

uint ProcessSubQuest1( Critter& player, int newVal )
{
    if( not CheckNewQuestValue( player, LVAR_q_warehouse_sub1, newVal ) )
        return FD_GENERIC_ERROR;

    uint[] questCrIds;
    if( not GetQuestCritters( player, questCrIds ) )
        return FD_GENERIC_ERROR;
    ChangeCrittersQuest( questCrIds, LVAR_q_warehouse_sub1, newVal, SubQuest1Experience[ newVal ] );

    if( newVal == SUBQUEST1_DONE )
    {
        Critter@[] critters;
        for( uint i = 0, j = questCrIds.length(); i < j; i++ )
        {
            Critter@ cr = GetCritter( questCrIds[ i ] );
            if( valid( cr ) )
                critters.insertLast( @cr );
        }
        uint16 locPid = Random( LOCATION_Warehouse_First, LOCATION_Warehouse_Last );
        uint   locId = CreateLocation( locPid, Random( 810, 990 ), Random( 510, 690 ), critters );
        if( locId == 0 )
            return FD_GENERIC_ERROR;
        SetLocId( player, locId );
        Location@ loc = GetLocation( locId );
        if( not valid( loc ) )
            return FD_GENERIC_ERROR;
        Map@ map = loc.GetMapByIndex( 0 );
        if( not valid( map ) )
            return FD_GENERIC_ERROR;
        uint16 hexX = 0, hexY = 0;
        if( not map.GetEntireCoords( ENTIRE_LOC_DOOR, 0, hexX, hexY ) )
            return FD_GENERIC_ERROR;
        Item@ door = map.GetDoor( hexX, hexY );
        if( valid( door ) )
        {
            door.LockerId = GENERATE_WAREHOUSE_KEY_ID;
            door.Update();
        }
    }

    return 0;
}

uint ProcessSubQuest2( Critter& player, int newVal )
{
    if( not CheckNewQuestValue( player, LVAR_q_warehouse_sub2, newVal ) )
        return FD_GENERIC_ERROR;

    uint[] questCrIds;
    if( not GetQuestCritters( player, questCrIds ) )
        return FD_GENERIC_ERROR;
    ChangeCrittersQuest( questCrIds, LVAR_q_warehouse_sub2, newVal, SubQuest2Experience[ newVal ] );

    if( newVal == SUBQUEST2_DONE )
    {
        uint      locId = GetLocId( player );
        Location@ loc = GetLocation( locId );
        if( not valid( loc ) )
            return FD_GENERIC_ERROR;
        Map@ map = loc.GetMapByIndex( 0 );
        if( not valid( map ) )
            return FD_GENERIC_ERROR;
        uint16 hexX = 0, hexY = 0;
        if( not map.GetEntireCoords( ENTIRE_LOC_DOOR, 0, hexX, hexY ) )
            return FD_GENERIC_ERROR;
        Item@ door = map.GetDoor( hexX, hexY );
        if( not valid( door ) )
            return FD_GENERIC_ERROR;
        Item@ key = player.AddItem( PID_RED_PASS_KEY, 1 );
        if( valid( key ) )
        {
            key.LockerId = door.LockerId;
            key.Update();
        }
    }

    return 0;
}

uint ProcessOther( Critter& player, int offset )
{
    GameVar@ other = GetLocalVar( LVAR_warehouse_other, player.Id );
    if( not valid( other ) )
        return FD_GENERIC_ERROR;

    int curVal = other.GetValue();
    curVal |= 1 << offset;
    other = curVal;

    return 0;
}

// ///////////////////////////////////////////////////////////////////////////////////////////
bool d_MainQuest_IsNotGived( Critter& player, Critter@ npc, int val )       { return CheckQuestValue( player, LVAR_q_warehouse, MAINQUEST_NOT_GIVED ) || CheckQuestValue( player, LVAR_q_warehouse, MAINQUEST_MARK_DONE ) || CheckQuestValue( player, LVAR_q_warehouse, MAINQUEST_MARK_FAIL ); }
bool d_MainQuest_IsGived( Critter& player, Critter@ npc, int val )          { return CheckQuestValue( player, LVAR_q_warehouse, MAINQUEST_GIVED ) || CheckQuestValue( player, LVAR_q_warehouse, MAINQUEST_DONE ); }
bool d_MainQuest_IsDone( Critter& player, Critter@ npc, int val )           { return CheckQuestValue( player, LVAR_q_warehouse, MAINQUEST_DONE ); }
bool d_SubQuest1_IsFindDaughter( Critter& player, Critter@ npc, int val )   { return CheckQuestValue( player, LVAR_q_warehouse_sub1, SUBQUEST1_FIND_DAUGHTER ); }
bool d_SubQuest1_IsDaughterMadMax( Critter& player, Critter@ npc, int val ) { return CheckQuestValue( player, LVAR_q_warehouse_sub1, SUBQUEST1_DAUGHTER_MADMAX ); }
bool d_IsPlayerAsMadMax( Critter& player, Critter@ npc, int val )
{
    Item@ armor = _CritGetItemArmor( player );
    return player.Stat[ ST_GENDER ] == GENDER_MALE && valid( armor ) && armor.GetProtoId() == PID_LEATHER_JACKET;
}
bool d_SubQuest1_IsDeliverInformation( Critter& player, Critter@ npc, int val )    { return CheckQuestValue( player, LVAR_q_warehouse_sub1, SUBQUEST1_DELIVER_INFORMATION ); }
bool d_SubQuest1_IsNotDeliverInformation( Critter& player, Critter@ npc, int val ) { return not CheckQuestValue( player, LVAR_q_warehouse_sub1, SUBQUEST1_DELIVER_INFORMATION ); }
bool d_SubQuest1_IsNotDone( Critter& player, Critter@ npc, int val )
{
    return CheckQuestValue( player, LVAR_q_warehouse_sub1, SUBQUEST1_FIND_DAUGHTER ) ||
           CheckQuestValue( player, LVAR_q_warehouse_sub1, SUBQUEST1_DAUGHTER_MADMAX ) ||
           CheckQuestValue( player, LVAR_q_warehouse_sub1, SUBQUEST1_DELIVER_INFORMATION );
}
bool d_SubQuest2_IsGoldenGlobes( Critter& player, Critter@ npc, int val ) { return CheckQuestValue( player, LVAR_q_warehouse_sub2, SUBQUEST2_GOLDEN_GLOBES ); }
bool d_SubQuest2_IsPornActres( Critter& player, Critter@ npc, int val )   { return CheckQuestValue( player, LVAR_q_warehouse_sub2, SUBQUEST2_PORN_ACTRES ); }
bool d_SubQuest2_IsGambler( Critter& player, Critter@ npc, int val )      { return CheckQuestValue( player, LVAR_q_warehouse_sub2, SUBQUEST2_GAMBLER ); }
bool d_Other_IsPornActresPay( Critter& player, Critter@ npc, int val )    { return CheckQuestValue( player, LVAR_warehouse_other, OTHER_PORN_ACTRES_PAY ); }
bool d_Other_IsNotPornActresPay( Critter& player, Critter@ npc, int val ) { return not CheckQuestValue( player, LVAR_warehouse_other, OTHER_PORN_ACTRES_PAY ); }
bool d_Other_IsRecPorn( Critter& player, Critter@ npc, int val )          { return CheckQuestValue( player, LVAR_warehouse_other, OTHER_REC_PORN ); }
bool d_Other_IsNotRecPorn( Critter& player, Critter@ npc, int val )       { return not CheckQuestValue( player, LVAR_warehouse_other, OTHER_REC_PORN ); }
// ///////////////////////////////////////////////////////////////////////////////////////////
uint r_MainQuest_Give( Critter& player, Critter@ npc ) { return ProcessMainQuest( player, MAINQUEST_GIVED ); }
// uint r_MainQuest_Done(Critter& player, Critter@ npc, int val)                   {return ProcessMainQuest(player,MAINQUEST_DONE);} // See t_DoneHex
uint r_MainQuest_MarkDone( Critter& player, Critter@ npc, int val )           { return ProcessMainQuest( player, MAINQUEST_MARK_DONE ); }
uint r_MainQuest_MarkFail( Critter& player, Critter@ npc, int val )           { return ProcessMainQuest( player, MAINQUEST_MARK_FAIL ); }
uint r_SubQuest1_DaughterMadMax( Critter& player, Critter@ npc, int val )     { return ProcessSubQuest1( player, SUBQUEST1_DAUGHTER_MADMAX ); }
uint r_SubQuest1_DeliverInformation( Critter& player, Critter@ npc, int val ) { return ProcessSubQuest1( player, SUBQUEST1_DELIVER_INFORMATION ); }
uint r_SubQuest1_Done( Critter& player, Critter@ npc, int val )               { return ProcessSubQuest1( player, SUBQUEST1_DONE ); }
uint r_SubQuest2_PornActres( Critter& player, Critter@ npc, int val )         { return ProcessSubQuest2( player, SUBQUEST2_PORN_ACTRES ); }
uint r_SubQuest2_Gambler( Critter& player, Critter@ npc, int val )            { return ProcessSubQuest2( player, SUBQUEST2_GAMBLER ); }
uint r_SubQuest2_Done( Critter& player, Critter@ npc, int val )               { return ProcessSubQuest2( player, SUBQUEST2_DONE ); }
uint r_Other_PornActresPay( Critter& player, Critter@ npc, int val )          { return ProcessOther( player, OTHER_PORN_ACTRES_PAY ); }
uint r_Other_RecPorn( Critter& player, Critter@ npc, int val )                { return ProcessOther( player, OTHER_REC_PORN ); }
// ///////////////////////////////////////////////////////////////////////////////////////////

void t_DoneHex( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    if( entered &&
        CheckQuestValue( player, LVAR_q_warehouse, MAINQUEST_GIVED ) &&
        CheckQuestValue( player, LVAR_q_warehouse_sub1, SUBQUEST1_DONE ) &&
        CheckQuestValue( player, LVAR_q_warehouse_sub2, SUBQUEST2_DONE ) )
        ProcessMainQuest( player, MAINQUEST_DONE );
}
