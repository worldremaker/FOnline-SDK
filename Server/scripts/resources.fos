// Author: Tab10id
// #define __DEBUG__

#include "_macros.fos"
#include "_msgstr.fos"
#include "_animation.fos"
#include "stdlib_h.fos"

#ifdef __DEBUG__
# define LogEx                             # (error) Log( error )
#endif
#ifndef __DEBUG__
# define LogEx                             # ( error )
#endif

#define STR_ITEM_NAME                      # (itemPid) ( itemPid * 100 )

#define MAX_RESOURCES_COUNT_PER_SCENERY    ( 10 )
#define TIME_FOR_RESOURCES_COUNT_RESP      ( 60 * 60 * 24 * 3 )
#define RESOURCES_COUNT_RESP_COUNT         ( 2 )
#define DEFAULT_TIMEOUT                    ( REAL_MINUTE( 10 ) )
#define OUTDOORSMAN_TIMEOUT                # (cr) ( __FullSecond + ( DEFAULT_TIMEOUT / cr.Skill[ SK_OUTDOORSMAN ] ) )
#define OUTDOORSMAN_SUPERSLEDGE_TIMEOUT    # (cr) ( __FullSecond + ( DEFAULT_TIMEOUT / ( cr.Skill[ SK_OUTDOORSMAN ] * 3 / 2 ) ) )

#define STR_NO_RESOURCE                    ( 3700 )
#define STR_WEIGHT_TOO_HEAVY               ( 3701 )
#define STR_ITEMS_ADDED                    ( 3702 )
#define STR_ITEM_ADDED                     ( 3703 )
#define STR_WOOD_ADDED                     ( 3704 )
#define STR_TYPE_COUNT                     ( 3705 )
#define STR_TYPE_KG                        ( 3706 )
#define STR_NO_AMMIAK                      ( 3707 )
#define STR_AMMIAK_ADDED                   ( 3708 )

#define EXP_FOR_ORE                        ( 20 )

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId, uint forceFlags ) from "combat";
import uint GetNearFullSecond( uint16 year, uint16 month, uint16 day, uint16 hour, uint16 minute, uint16 second ) from "time";

int16[][][] ToolsSettings =
{
    {
        // Axe
        { PID_AXE },                                                                                                                      // Пиды инструментов
        { 0 },                                                                                                                            // Анимация проигрываемая при попытке собрать ресурсы
        { 0 },                                                                                                                            // Анимация проигрываемая при попытке собрать ресурсы
        { 2066, 2316, 2317, 2318, 2319, 2320, 2321, 2945, 2946, 2947, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572 }, // Пиды источников ресурсов
        { 0 },                                                                                                                            // Количество предметов в одном обхекте Scenery (0 - значение по умолчанию)
        { PID_FIREWOOD, PID_SHARPENED_POLE },                                                                                             // Пиды возможных ресурсов
        { 1,            1 },                                                                                                              // минимальное количество получаемых ресурсов
        { 1,            1 },                                                                                                              // максимальное количество получаемых ресурсов
        { 95,           100 },                                                                                                            // Шансы получения того или иного вида ресурсов (шансы проверяются по порядку)
    },
    {
        // Sledgehammer
        { PID_SLEDGEHAMMER, PID_SUPER_SLEDGE },
        { ANIM1_HAMMER,     ANIM1_HAMMER },
        { ANIM2_SWING_1H,   ANIM2_SWING_1H },
        { 2074, 2075, 2079, 2080, 2092, 2093, 2428, 2429, 2430, 2431, 2435, 3273, 3580 },
        { 0 },
        { PID_ROCK },
        { 1 },
        { 5 },
        { 100 },
    },
    {
        // Sledgehammer
        { PID_SLEDGEHAMMER, PID_SUPER_SLEDGE },
        { ANIM1_HAMMER,     ANIM1_HAMMER },
        { ANIM2_SWING_1H,   ANIM2_SWING_1H },
        { 2069, 2070, 2072, 2073, 2078, 2081, 2090, 2091, 2688 },
        { 0 },
        { PID_ROCK, PID_MINERAL, PID_METAL_ORE },
        { 1,        1,           1 },
        { 5,        2,           1 },
        { 80,       65,          100 },
    },
    {
        // Multi tool
        { PID_MULTI_TOOL },
        { 0 },
        { 0 },
        { 2106, 2252, 2253, 2254, 2255, 3294, 3295, 3296 },
        { 5 },
        { PID_METAL_TRASH, PID_PUMP_PARTS },
        { 1,               1 },
        { 2,               1 },
        { 70,              100 },
    },
    {
        // Multi tool
        { PID_BOTTLE_EMPTY },
        { 0 },
        { 0 },
        { 42 },
        { 1 },
        { PID_BOTTLE_AMMIAK },
        { 0 },
        { 0 },
        { 100 },
    }
};
CTool[] Tools;
// Класс стандартной обработки
ToolDefault defTool;

// Классы рассширенной обработки условий и результатов
ToolAxe              toolAxe;
ToolSuperSledge      toolSuperSledge;
ToolGiveExpForOre    toolGiveExpForOre;
ToolShowInfoInWeight toolShowInfoInWeight;
ToolBottle           toolBottle;
void SetToolsExt()
{
    Tools[ 0 ].SetCallbackDemand( toolAxe, PID_AXE )
    .SetCallbackResult( toolAxe, PID_FIREWOOD );
    Tools[ 1 ].SetCallbackSetTimeouts( toolSuperSledge, PID_SUPER_SLEDGE );
    Tools[ 2 ].SetCallbackSetTimeouts( toolSuperSledge, PID_SUPER_SLEDGE )
    .SetCallbackAddExp( toolGiveExpForOre, PID_METAL_ORE )
    .SetCallbackResult( toolShowInfoInWeight, PID_METAL_ORE )
    .SetCallbackResult( toolShowInfoInWeight, PID_MINERAL );
    Tools[ 4 ].SetCallbackDemand( toolBottle, PID_BOTTLE_EMPTY )
    .SetCallbackResult( toolBottle, PID_BOTTLE_AMMIAK )
    .SetCallbackSetTimeouts( toolBottle, PID_BOTTLE_EMPTY );
}


class CStarter
{
    CStarter()
    {
        for( uint i = 0; i < ToolsSettings.length(); i++ )
        {
            uint   k = 0;
            Tools.resize( Tools.length() + 1 );
            CTool@ tool = Tools[ Tools.length() - 1 ];
            tool.ToolPids = ToolsSettings[ i ][ k++ ];
            tool.Anim1 = ToolsSettings[ i ][ k++ ];
            tool.Anim2 = ToolsSettings[ i ][ k++ ];
            tool.SourcePids = ToolsSettings[ i ][ k++ ];
            tool.SourceCount = ToolsSettings[ i ][ k++ ];
            tool.NewItemsPids = ToolsSettings[ i ][ k++ ];
            tool.MinCount = ToolsSettings[ i ][ k++ ];
            tool.MaxCount = ToolsSettings[ i ][ k++ ];
            tool.NewItemsChances = ToolsSettings[ i ][ k ];
            tool.CallbackDemand.resize( tool.ToolPids.length() );
            tool.CallbackResult.resize( tool.NewItemsPids.length() );
            tool.CallbackSetTimeouts.resize( tool.ToolPids.length() );
            tool.CallbackAddExp.resize( tool.NewItemsPids.length() );
            tool.SetCallbackDemand( defTool )
            .SetCallbackResult( defTool )
            .SetCallbackGetTimeouts( defTool )
            .SetCallbackSetTimeouts( defTool )
            .SetCallbackAddExp( defTool );
        }
        SetToolsExt();
    }
}
CStarter  starter;

interface IResourceDemand {
    bool OnDemand( Critter& master, uint16 toolPid );
}
interface IResourceResult {
    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, uint16 toolPid, uint count, uint16 newItemsPid );
}
interface IResourceGetTimeouts {
    bool OnGetTimeouts( Critter& master, uint16 toolPid );
}
interface IResourceSetTimeouts {
    void OnSetTimeouts( Critter& master, uint16 toolPid, uint count, uint16 newItemsPid );
}
interface IResourceAddExp {
    void OnAddExp( Critter& master, uint16 toolPid, uint count, uint16 newItemsPid );
}

class CTool
{
    int16[] ToolPids;
    int16[] SourcePids;
    int16[] SourceCount;
    int16[] NewItemsPids;
    int16[] NewItemsChances;
    int16[] Anim1;
    int16[] Anim2;
    int16[] MinCount;
    int16[] MaxCount;
    IResourceDemand@[] CallbackDemand;
    IResourceResult@[] CallbackResult;
    IResourceGetTimeouts@ CallbackGetTimeouts;
    IResourceSetTimeouts@[] CallbackSetTimeouts;
    IResourceAddExp@[] CallbackAddExp;
    CTool@ SetCallbackDemand( IResourceDemand@ callback )
    {
        for( uint i = 0; i < ToolPids.length(); i++ )
        {
            @CallbackDemand[ i ] = callback;
        }
        return this;
    }
    CTool@ SetCallbackResult( IResourceResult@ callback )
    {
        for( uint i = 0; i < NewItemsPids.length(); i++ )
        {
            @CallbackResult[ i ] = callback;
        }
        return this;
    }
    CTool@ SetCallbackDemand( IResourceDemand@ callback, uint16 toolPid )
    {
        int toolIdx = GetToolIdx( toolPid );
        if( toolIdx != -1 )
        {
            @CallbackDemand[ toolIdx ] = callback;
        }
        else
        {
            LogEx( "Tool with pid №" + toolPid + " not found in group" );
        }
        return this;
    }
    CTool@ SetCallbackResult( IResourceResult@ callback, uint16 newItemPid )
    {
        int16 newItemIdx = GetNewItemIdx( newItemPid );
        if( newItemIdx != -1 )
        {
            @CallbackResult[ newItemIdx ] = callback;
        }
        else
        {
            LogEx( "New item with pid №" + newItemPid + " not found in group" );
        }
        return this;
    }
    CTool@ SetCallbackGetTimeouts( IResourceGetTimeouts@ callback )
    {
        @CallbackGetTimeouts = callback;
        return this;
    }
    CTool@ SetCallbackSetTimeouts( IResourceSetTimeouts@ callback )
    {
        for( uint i = 0; i < ToolPids.length(); i++ )
        {
            @CallbackSetTimeouts[ i ] = callback;
        }
        return this;
    }
    CTool@ SetCallbackSetTimeouts( IResourceSetTimeouts@ callback, uint16 toolPid )
    {
        int toolIdx = GetToolIdx( toolPid );
        if( toolIdx != -1 )
        {
            @CallbackSetTimeouts[ toolIdx ] = callback;
        }
        else
        {
            LogEx( "Tool with pid №" + toolPid + " not found in group" );
        }
        return this;
    }
    CTool@ SetCallbackAddExp( IResourceAddExp@ callback )
    {
        for( uint i = 0; i < NewItemsPids.length(); i++ )
        {
            @CallbackAddExp[ i ] = callback;
        }
        return this;
    }
    CTool@ SetCallbackAddExp( IResourceAddExp@ callback, uint16 newItemPid )
    {
        int16 newItemIdx = GetNewItemIdx( newItemPid );
        if( newItemIdx != -1 )
        {
            @CallbackAddExp[ newItemIdx ] = callback;
        }
        else
        {
            LogEx( "New item with pid №" + newItemPid + " not found in group" );
        }
        return this;
    }
    int16 GetNewItemIdx( Critter& player, int16 toolIdx )
    {
        bool demand = true;
        if( not ( CallbackDemand[ toolIdx ] is null ) )
        {
            demand = CallbackDemand[ toolIdx ].OnDemand( player, ToolPids[ toolIdx ] );
        }
        if( demand )
        {
            for( uint i = 0; i < NewItemsChances.length(); i++ )
            {
                if( Random( 0, 99 ) < NewItemsChances[ i ] )
                {
                    return i;
                }
                else
                {
                    continue;
                }
            }
        }
        return -1;
    }
    int16 GetNewItemIdx( uint16 pid )
    {
        LogEx( "NewItemsPids count: " + NewItemsPids.length() );
        for( uint i = 0; i < NewItemsPids.length(); i++ )
        {
            LogEx( "NewItemsPids" + i + ": " + NewItemsPids[ i ] );
            if( NewItemsPids[ i ] == pid )
            {
                return i;
            }
        }
        return -1;
    }
    int GetToolIdx( uint16 pid )
    {
        for( uint i = 0; i < ToolPids.length(); i++ )
        {
            if( ToolPids[ i ] == pid )
            {
                return i;
            }
        }
        return -1;
    }
}

void _ToolInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "_ToolUse" );
}

bool _ToolUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    uint16 pid = item.GetProtoId();
    uint16 onObj;
    uint   resourceCount;
    if( valid( onItem ) )
    {
        onObj = onItem.GetProtoId();
    }
    else
    {
        if( valid( onScenery ) )
        {
            onObj = onScenery.ProtoId;
        }
        else
        {
            return false;
        }
    }
    CTool@ tool;
    @tool = GetTool( pid, onObj );
    if( valid( tool ) )
    {
        uint toolIdx = tool.GetToolIdx( pid );
        if( not ( tool.CallbackGetTimeouts is null ) )
        {
            bool noTimeouts = tool.CallbackGetTimeouts.OnGetTimeouts( cr, pid );
            if( not noTimeouts )
            {
                return true;
            }
        }
        if( not CritterCanGetMoreItems( cr ) )
        {
            return true;
        }
        AnimateCritter( cr, tool.Anim1[ toolIdx ], tool.Anim2[ toolIdx ] );
        uint16 mapId = cr.GetMapId();
        LogEx( "Tool used" );
        if( valid( onScenery ) )
        {
            resourceCount = GetSceneryResourcesCount( mapId, onScenery );
            if( resourceCount == 0 )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_RESOURCE );
                return true;
            }
        }
        int16 newItemIdx = tool.GetNewItemIdx( cr, toolIdx );
        if( newItemIdx != -1 )
        {
            if( tool.NewItemsPids[ newItemIdx ] > 0 )
            {
                uint itemCount = Random( tool.MinCount[ newItemIdx ], tool.MaxCount[ newItemIdx ] );
                if( itemCount > 0 )
                {
                    if( valid( onScenery ) )
                    {
                        if( resourceCount < itemCount )
                        {
                            itemCount = resourceCount;
                        }
                        resourceCount -= itemCount;
                        SetSceneryResourcesCount( resourceCount, mapId, onScenery );
                    }
                    cr.AddItem( tool.NewItemsPids[ newItemIdx ], itemCount );
                }
                if( not ( tool.CallbackResult[ newItemIdx ] is null ) )
                {
                    itemCount += tool.CallbackResult[ newItemIdx ].OnResult( cr, onItem, onScenery, pid, itemCount, tool.NewItemsPids[ newItemIdx ] );
                }
                if( not ( tool.CallbackSetTimeouts[ toolIdx ] is null ) )
                {
                    tool.CallbackSetTimeouts[ toolIdx ].OnSetTimeouts( cr, pid, itemCount, tool.NewItemsPids[ newItemIdx ] );
                }
                if( not ( tool.CallbackAddExp[ newItemIdx ] is null ) )
                {
                    tool.CallbackAddExp[ newItemIdx ].OnAddExp( cr, pid, itemCount, tool.NewItemsPids[ newItemIdx ] );
                }
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    else
    {
        LogEx( "Wrong tool using" );
    }
    return false;
}
bool CritterCanGetMoreItems( Critter& player )
{
    if( ( player.Stat[ ST_CARRY_WEIGHT ] - player.ItemsWeight() ) < 0 )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WEIGHT_TOO_HEAVY );
        return false;
    }
    return true;
}

uint GetSceneryResourcesCount( uint16 mapId, Scenery& scenery )
{
    uint[] adResourceCount;
    uint resourceCount = 0;
    if( IsAnyData( "Resources_" + mapId + "_" + scenery.HexX + "_" + scenery.HexY + "_" + scenery.ProtoId ) )
    {
        if( GetAnyData( "Resources_" + mapId + "_" + scenery.HexX + "_" + scenery.HexY + "_" + scenery.ProtoId, adResourceCount ) )
        {
            resourceCount = adResourceCount[ 0 ];
        }
    }
    else
    {
        uint[] anyData;
        uint maxResCount = GetMaxResourceCount( scenery.ProtoId );
        anyData.insertLast( maxResCount );
        if( not SetAnyData( "Resources_" + mapId + "_" + scenery.HexX + "_" + scenery.HexY + "_" + scenery.ProtoId, anyData ) )
        {
            Log( "AnyData not created" );
        }
        uint[] forTE;
        forTE.insertLast( mapId );
        forTE.insertLast( scenery.HexX );
        forTE.insertLast( scenery.HexY );
        forTE.insertLast( scenery.ProtoId );
        CreateTimeEvent( __FullSecond + TIME_FOR_RESOURCES_COUNT_RESP, "_AddResourcesCount", forTE, true );
        resourceCount = maxResCount;
    }
    return resourceCount;
}

void SetSceneryResourcesCount( uint resourceCount, uint16 mapId, Scenery& scenery )
{
    uint[] anyData;
    anyData.insertLast( resourceCount );
    if( not SetAnyData( "Resources_" + mapId + "_" + scenery.HexX + "_" + scenery.HexY + "_" + scenery.ProtoId, anyData ) )
    {
        Log( "AnyData not created" );
    }
}

CTool@ GetTool( uint16 pid, uint16 source )
{
    LogEx( "ToolsGroup count: " + Tools.length() );
    for( uint i = 0; i < Tools.length(); i++ )
    {
        for( int16 k = 0; k < int( Tools[ i ].ToolPids.length() ); k++ )
        {
            if( Tools[ i ].ToolPids[ k ] == pid )
            {
                for( int16 l = 0; l < int( Tools[ i ].SourcePids.length() ); l++ )
                {
                    if( Tools[ i ].SourcePids[ l ] == source )
                    {
                        return Tools[ i ];
                    }
                }
                break;
            }
        }
    }
    return null;
}

CTool@ GetTool( uint16 sourcePid )
{
    for( uint i = 0; i < Tools.length(); i++ )
    {
        for( int16 k = 0; k < int( Tools[ i ].SourcePids.length() ); k++ )
        {
            if( Tools[ i ].SourcePids[ k ] == sourcePid )
            {
                return Tools[ i ];
            }
        }
    }
    return null;
}

uint _AddResourcesCount( uint[] @ values )
{
    uint[] adResourceCount;
    if( IsAnyData( "Resources_" + values[ 0 ] + "_" + values[ 1 ] + "_" + values[ 2 ] + "_" + values[ 3 ] ) )
    {
        if( GetAnyData( "Resources_" + values[ 0 ] + "_" + values[ 1 ] + "_" + values[ 2 ] + "_" + values[ 3 ], adResourceCount ) )
        {
            adResourceCount[ 0 ] += RESOURCES_COUNT_RESP_COUNT;
            if( adResourceCount[ 0 ] < GetMaxResourceCount( values[ 3 ] ) )
            {
                if( not SetAnyData( "Resources_" + values[ 0 ] + "_" + values[ 1 ] + "_" + values[ 2 ] + "_" + values[ 3 ], adResourceCount ) )
                {
                    Log( "AnyData not created" );
                }
            }
            else
            {
                EraseAnyData( "Resources_" + values[ 0 ] + "_" + values[ 1 ] + "_" + values[ 2 ] + "_" + values[ 3 ] );
                return 0;
            }
        }
        return TIME_FOR_RESOURCES_COUNT_RESP;
    }
    else
    {
        return 0;
    }
}

void AnimateCritter( Critter& cr, uint anim1, uint anim2 )
{
    if( anim1 != 0 or anim2 != 0 )
    {
        cr.Animate( anim1, anim2, null, true, true );
    }
}

uint GetMaxResourceCount( uint16 scProto )
{
    CTool@ tool = GetTool( scProto );
    {
        uint count = tool.SourceCount[ 0 ];
        if( count != 0 )
        {
            return count;
        }
    }
    return MAX_RESOURCES_COUNT_PER_SCENERY;
}

class ToolDefault : IResourceDemand, IResourceResult, IResourceGetTimeouts, IResourceSetTimeouts, IResourceAddExp
{
    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, uint16 toolPid, uint count, uint16 newItemsPid )
    {
        string lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( newItemsPid ) + "@";
        if( count > 1 )
        {
            lexem += "$count" + count + "$type" + "@msg text " + STR_TYPE_COUNT + "@";
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEMS_ADDED, lexem );
        }
        else
        {
            if( count == 1 )
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEM_ADDED, lexem );
            }
        }
        return 0;
    }
    bool OnDemand( Critter& master, uint16 toolPid )
    {
        return true;
    }
    bool OnGetTimeouts( Critter& master, uint16 toolPid )
    {
        if( master.Timeout[ TO_SK_OUTDOORSMAN ] > 0 )
        {
            master.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
            return false;
        }
        return true;
    }
    void OnSetTimeouts( Critter& master, uint16 toolPid, uint count, uint16 newItemsPid )
    {
        master.TimeoutBase[ TO_SK_OUTDOORSMAN ] = OUTDOORSMAN_TIMEOUT( master );
    }

    void OnAddExp( Critter& master, uint16 toolPid, uint count, uint16 newItemsPid )
    {
        // do nothing
    }
}



// Tools

class ToolBottle : IResourceDemand, IResourceResult, IResourceSetTimeouts
{
    bool OnDemand( Critter& master, uint16 toolPid )
    {
        GameVar@ qVar = GetLocalVar( LVAR_q_mod_farrel_ammiak, master.Id );
        if( valid( qVar ) && qVar > 0 )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, uint16 toolPid, uint count, uint16 newItemsPid )
    {
        uint[] adResourceCount;
        uint itemCount = 1;
        uint resourceCount = 1;
        if( valid( onItem ) )
        {
            if( IsAnyData( "Resources_" + onItem.MapId + "_" + onItem.HexX + "_" + onItem.HexY + "_" + onItem.GetProtoId() ) )
            {
                if( GetAnyData( "Resources_" + onItem.MapId + "_" + onItem.HexX + "_" + onItem.HexY + "_" + onItem.GetProtoId(), adResourceCount ) )
                {
                    resourceCount = adResourceCount[ 0 ];
                }
            }
            if( resourceCount == 0 )
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_AMMIAK );
                return 0;
            }
            uint[] anyData;
            resourceCount = 0;
            anyData.insertLast( resourceCount );
            if( not SetAnyData( "Resources_" + onItem.MapId + "_" + onItem.HexX + "_" + onItem.HexY + "_" + onItem.GetProtoId(), anyData ) )
            {
                Log( "res: AnyData not created" );
            }
            else
            {
                uint[] forTE;
                forTE.insertLast( onItem.MapId );
                forTE.insertLast( onItem.HexX );
                forTE.insertLast( onItem.HexY );
                forTE.insertLast( onItem.GetProtoId() );
                CreateTimeEvent( __FullSecond + TIME_FOR_RESOURCES_COUNT_RESP * 5, "_AddResourcesCount", forTE, true );
            }
            Item@ tool = master.GetItem( toolPid, -1 );
            if( ( Random( 1, 6 ) + int(master.Stat[ ST_LUCK ] / 4) ) > 5 && valid( tool ) )
            {
                master.AddItem( PID_BOTTLE_AMMIAK, 1 );
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_AMMIAK_ADDED );
                _SubItem( tool, 1 );
            }
            else
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_AMMIAK );
            }
        }
        return 0;
    }

    void OnSetTimeouts( Critter& master, uint16 toolPid, uint count, uint16 newItemsPid )
    {}
}


class ToolAxe : IResourceDemand, IResourceResult
{

    bool OnDemand( Critter& master, uint16 toolPid )
    {
        if( Random( 0, 99 ) < ( 50 + ( master.StatBase[ ST_AGILITY ] * 5 ) ) )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, uint16 toolPid, uint count, uint16 newItemsPid )
    {
        uint[] adResourceCount;
        uint resourceCount = GetMaxResourceCount( onScenery.ProtoId );
        uint maxCount = master.Skill[ SK_OUTDOORSMAN ] / 50;
        if( maxCount == 0 )
        {
            maxCount = 1;
        }
        uint   itemCount = Random( 1, maxCount );
        uint16 mapId = master.GetMapId();
        if( valid( onScenery ) )
        {
            if( IsAnyData( "Resources_" + mapId + "_" + onScenery.HexX + "_" + onScenery.HexY + "_" + onScenery.ProtoId ) )
            {
                if( GetAnyData( "Resources_" + mapId + "_" + onScenery.HexX + "_" + onScenery.HexY + "_" + onScenery.ProtoId, adResourceCount ) )
                {
                    resourceCount = adResourceCount[ 0 ];
                }
            }
            if( resourceCount < itemCount )
            {
                itemCount = resourceCount;
            }
        }
        if( ( resourceCount == 0 ) and ( count == 0 ) )
        {
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_RESOURCE );
            return 0;
        }
        else
        {
            resourceCount -= itemCount;
            if( ( count + itemCount ) > 0 )
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WOOD_ADDED );
            }
        }
        if( valid( onScenery ) )
        {
            uint[] anyData;
            anyData.insertLast( resourceCount );
            if( not SetAnyData( "Resources_" + mapId + "_" + onScenery.HexX + "_" + onScenery.HexY + "_" + onScenery.ProtoId, anyData ) )
            {
                Log( "AnyData not created" );
            }
        }
        master.AddItem( PID_FIREWOOD, itemCount );
        return itemCount;
    }
}

class ToolSuperSledge : IResourceSetTimeouts
{
    void OnSetTimeouts( Critter& master, uint16 toolPid, uint count, uint16 newItemsPid )
    {
        master.TimeoutBase[ TO_SK_OUTDOORSMAN ] = OUTDOORSMAN_SUPERSLEDGE_TIMEOUT( master );
    }
}

class ToolGiveExpForOre : IResourceAddExp
{
    void OnAddExp( Critter& master, uint16 toolPid, uint count, uint16 newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_ORE;
    }
}

class ToolShowInfoInWeight : IResourceResult
{
    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, uint16 toolPid, uint count, uint16 newItemsPid )
    {
        string lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( newItemsPid ) + "@";
        if( count > 0 )
        {
            ProtoItem@ newItemProto = GetProtoItem( newItemsPid );
            uint       itemweight = newItemProto.Weight * count / 1000;
            lexem += "$count" + itemweight + "$type" + "@msg text " + STR_TYPE_KG + "@";
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEMS_ADDED, lexem );
        }
        return 0;
    }
}
