// Author: Tab10id

//
// Dro-Poker
// Using in poker
//

// В этом файле хранятся настройки игры для различных НПЦ (минимальные/максимальные ставки и тп)
// Для того чтобы заставить нпц играть с теми или иными настойкам, необходимо указать ему соответствующее значение NpcRole
#define NPC_ROLE_START_VALUE    ( 71600 )

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";

class PokerGamer
{
    uint   MoneyForStartGame; // Деньги которые необходимо поставить для начала игры
    uint   MinBet;            // Минимальная ставка
    uint   MaxBet;            // Максимальная ставка
    uint   Raise1;            // Стандартное повышение 1
    uint   Raise2;            // Стандартное повышение 2
    uint   Raise3;            // Стандартное повышение 3
    uint16 OnCheat1;          // Реакция на обнаружение жульничества типа 1
    uint16 OnCheat2;          // Реакция на обнаружение жульничества типа 2
    uint16 OnCheat3;          // Дополнительное поле
    uint8  PMLevel;           // Способность покермана заметить жульничество (от 1 до 10)
    uint   StopGameMoney;     // Сумма, проигрывая которую покерман перестает играть с Дудом. Если 0, то ограничений нет.
    uint16 WaitForGame;       // Количество игровых дней, которые необходимо подождать, чтобы покерман снова начал играть с Дудом, после того как он его обыграл на сумму StopGameMoney


    PokerGamer( uint moneyForStartGame, uint minBet, uint maxBet, uint raise1, uint raise2, uint raise3, uint16 onCheat1, uint16 onCheat2, uint16 onCheat3, uint8 pMLevel, uint stopGameMoney, uint16 waitForGame )
    {
        this.MoneyForStartGame = moneyForStartGame;
        this.MinBet = minBet;
        this.MaxBet = maxBet;
        this.Raise1 = raise1;
        this.Raise2 = raise2;
        this.Raise3 = raise3;
        this.OnCheat1 = onCheat1;
        this.OnCheat2 = onCheat2;
        this.OnCheat3 = onCheat3;
        this.PMLevel = pMLevel;
        this.StopGameMoney = stopGameMoney;
        this.WaitForGame = waitForGame;
    }
};
PokerGamer@[] PGamers;

class Starter
{
    Starter()
    {
        InitPGemers();
    }
};
Starter aStarter;

void InitPGemers()
{
    PGamers.insertLast( @PokerGamer( 120, 20, 750, 20, 50, 100, 1, 0, 0, 1, 3000, 2 ) );
    PGamers.insertLast( @PokerGamer( 130, 30, 850, 30, 60, 200, 1, 0, 0, 3, 6000, 3 ) );
}

void RunCheatScript( uint16 funcNum, Critter& player, Critter& pokerMan )
{
    switch( funcNum )
    {
    case 1:
        _OnCheat1_npc1( player, pokerMan );
        break;
    default:
        _OnCheatDefault( player, pokerMan );
        break;
    }
}

void _OnCheat1_npc1( Critter& player, Critter& pokerMan )
{
    pokerMan.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, STR_CHEAT_1 );
    AddAttackPlane( pokerMan, 0, player );
    InGame[ pokerMan.StatBase[ ST_VAR9 ] ] = false;
    GameVar@ var = GetUnicumVar( UVAR_poker_fraud, pokerMan.Id, player.Id );
    var = __FullSecond + ( 60 * 60 * 24 * 3 );
}

void _OnCheatDefault( Critter& player, Critter& pokerMan )
{
    pokerMan.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, STR_CHEAT_DEFAULT );
    InGame[ pokerMan.StatBase[ ST_VAR9 ] ] = false;
    GameVar@ var = GetUnicumVar( UVAR_poker_fraud, pokerMan.Id, player.Id );
    var = __FullSecond + ( 60 * 60 * 24 * 1 );
}
