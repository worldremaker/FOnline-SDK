// Author: rifleman17
#include "_macros.fos"

#define RUN_PLANE_ID         ( 111 )                               // код плана "бежать от игрока"
#define MAX_RUNS             ( 5 )                                 // число перебежек
#define SON_WAIT_PRIORITY    ( 100 )                               // приоритет плана "подожди игрока"
#define SEARCH_RADIUS        ( 3 )                                 // расстояние в гексах до игрока, в котором он должен быть вовремя остановок мальчика
#define RUN_RADIUS           ( 5 )                                 // расстояние, на которое бежит мальчик (20)

#define Q_STAT_FAILED        ( 4 )                                 // статус квеста - провален (не догнал)
#define Q_STAT_CATCHED       ( 5 )                                 // статус квеста - выполнен

#define STR_RUN              ( 1 )                                 // строка, которую произносит человек

import bool GetFreeHex( Map& map, uint radius, uint16& hx, uint16& hy ) from "caravan";
import bool AddMiscPlane( Critter& npc, uint priority, uint waitSecond, string@ funcName ) from "npc_planes";
import bool AddWalkPlane( Critter& npc, uint priority, int identifier, uint identifierExt, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";


void r_RunKarlsonRun( Critter& player, Critter@ npc )
{
    if( !valid( npc ) )
        return;

    if( !npc.IsNoPlanes() )
        return;

    GameVar @ catcher = GetLocalVar( LVAR_ncr_son_catcher_id, npc.Id );

    if( !valid( catcher ) )
        return;

    GameVar @ runs = GetLocalVar( LVAR_ncr_son_moves_counter, npc.Id );

    if( !valid( runs ) )
        return;

    runs = 0;
    catcher = player.Id;

    npc.SetEvent( CRITTER_EVENT_PLANE_END, "_PlaneEnd" );

    Run( npc );
}

// Npc misc plane script
void plane_WaitPlayer( Critter& npc )
{
    GameVar @ runs = GetLocalVar( LVAR_ncr_son_moves_counter, npc.Id );
    if( !valid( runs ) )
        return;
    runs = runs.GetValue() + 1;
    npc.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( npc.StatBase[ ST_DIALOG_ID ], STR_RUN ) );

    if( !_CheckIsPlayerHere( npc ) )
    {
        GameVar @ playerId = GetLocalVar( LVAR_ncr_son_catcher_id, npc.Id );
        if( !valid( playerId ) )
        {
            return;
        }

        GameVar @qVar = GetLocalVar( LVAR_q_ncr_karlson_son, playerId.GetValue() );
        if( !valid( qVar ) )
        {
            return;
        }
        runs = MAX_RUNS;
        qVar = Q_STAT_FAILED;

        return;
    }

    if( runs.GetValue() <= MAX_RUNS )
    {
        Run( npc );
    }
    else
    {
        GameVar @ playerId = GetLocalVar( LVAR_ncr_son_catcher_id, npc.Id );
        if( !valid( playerId ) )
        {
            return;
        }

        GameVar @qVar = GetLocalVar( LVAR_q_ncr_karlson_son, playerId.GetValue() );
        if( !valid( qVar ) )
        {
            return;
        }

        qVar = Q_STAT_CATCHED;
        npc.ModeBase[ MODE_NO_HOME ] = 0;
    }
}

bool _CheckIsPlayerHere( Critter& cr )
{
    GameVar @ playerId = GetLocalVar( LVAR_ncr_son_catcher_id, cr.Id );
    if( !valid( playerId ) )
        return false;

    Critter @ player = GetCritter( playerId.GetValue() );
    if( !valid( player ) )
        return false;

    if( !valid( player.GetMap() ) )
        return false;

    if( player.GetMap().Id != cr.GetMap().Id )
        return false;

    return GetCrittersDistantion( cr, player ) <= SEARCH_RADIUS;
}

// CRITTER_EVENT_PLANE_END
int _PlaneEnd( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    if( plane.Identifier == RUN_PLANE_ID && reason == REASON_SUCCESS )
    {
        AddMiscPlane( cr, SON_WAIT_PRIORITY, __FullSecond + 60, "ncr_karlson_son@plane_WaitPlayer" );

    }
    else if( plane.Identifier == RUN_PLANE_ID && reason != REASON_SUCCESS )
    {
        Run( cr );
        return PLANE_DISCARD;
    }
    return PLANE_RUN_GLOBAL;
}

// ~loadscript ncr_karlson_son
void Run( Critter& cr )
{
    uint16 hX = cr.HexX;
    uint16 hY = cr.HexY;

    GetFreeHex( cr.GetMap(), RUN_RADIUS, hX, hY );

    AddWalkPlane( cr, AI_PLANE_WALK_PRIORITY, RUN_PLANE_ID, 0, hX, hY, Random( 0, 5 ), true, 1 );
}
