#include "_macros.fos"
#include "_animation.fos"


#define BASE_TIMEOUT        ( 11 ) // real seconds

#define STR_NEED_REST       ( 2201 )
#define STR_MINE_URANIUM    ( 3035 )
#define STR_MINE_STONE      ( 3036 )
#define STR_MINE_GOLD       ( 3037 )
bool s_MineGold( Critter& cr, Scenery& sc, int skill, Item@ item ) { return s_MG( cr, sc, skill, item ); }
bool s_MG( Critter& cr, Scenery& sc, int skill, Item@ item ) // Mine Gold
{
    if( not IsMiningTool( item ) )
        return false;

    if( not IsTimeoutExpired( cr ) )
    {
        // critter need a rest
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_REST );
        return true;
    }
    else
    {
        cr.Animate( ANIM1_HAMMER, ANIM2_SWING_1H, null, true, true );
    }

    int successChance = ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] * 4 );
    successChance = CLAMP( successChance, 10, 95 );
    int roll = Random( 1, 100 );

    if( roll <= successChance )
    {
        cr.AddItem( PID_GOLD_NUGGET, 1 );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_GOLD );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_STONE );
        cr.AddItem( PID_ROCK, 1 );
    }

    SetTimeout( cr );
    return true;
}

bool s_Mine( Critter& cr, Scenery& sc, int skill, Item@ item )
{
    if( not IsMiningTool( item ) )
        return false;

    if( not IsTimeoutExpired( cr ) )
    {
        // critter need a rest
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_REST );

        // cr.Animate(0xFF, ANIM1_EMPTY, 0, 0xFF, 0, true, true, true);

        return true;
    }
    else
    {
        cr.Animate( ANIM1_HAMMER, ANIM2_SWING_1H, null, true, true );
    }

    int successChance = ( cr.Stat[ ST_LUCK ] ) * 10;
    successChance = CLAMP( successChance, 10, 95 );
    int roll = Random( 1, 100 );

    // шанс выбить простой камень
    if( roll <= successChance )
    {
        cr.AddItem( PID_URANIUM_ORE, 1 );
        // cr.Say(SAY_NETMSG, "Success. Roll/Chance = " + roll + "/" + successChance);
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_URANIUM );
    }
    else
    {
        // cr.Say(SAY_NETMSG, "Fail. Roll/Chance = " + roll + "/" + successChance);
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_STONE );
        // r17 091228>
        // добавление камня всегда, если не досталось урановой руды
        cr.AddItem( PID_ROCK, 1 );
        // <r17
    }

    SetTimeout( cr );
    return true;
}

/*
   Determines whether given item is appropriate for mining
 */
bool IsMiningTool( Item@ item )
{
    if( not valid( item ) )
        return false;

    uint16 pid = item.GetProtoId();

    return pid == PID_SLEDGEHAMMER || pid == PID_SUPER_SLEDGE;
}

/*
   Checks whether mining timeout for given critter is expired
 */
bool IsTimeoutExpired( Critter& cr )
{
    GameVar@ timeoutExpireTime = GetLocalVar( LVAR_hell_mine_timeout_end, cr.Id );
    if( not valid( timeoutExpireTime ) )
    {
        Log( "Cannot find local var: hell_mine_timeout_end" );
        return true;
    }

    if( timeoutExpireTime == 0 ||              // uninitialized
        timeoutExpireTime < __FullSecond )
    {
        return true;
    }
    else
    {
        cr.Say( SAY_NETMSG,
                "Remaining time: " + ( timeoutExpireTime.GetValue() - __FullSecond ) );
        return false;
    }
}

/*
   Sets mining timeout for given critter
 */
void SetTimeout( Critter& cr )
{
    GameVar@ timeoutExpireTime = GetLocalVar( LVAR_hell_mine_timeout_end, cr.Id );
    if( not valid( timeoutExpireTime ) )
    {
        Log( "Cannot find local var: hell_mine_timeout_end" );
        return;
    }

    // basic formula for timeout time in real seconds
    int timeoutTime = ( BASE_TIMEOUT - cr.Stat[ ST_ENDURANCE ] );

    // set timeout end timestamp
    timeoutExpireTime = __FullSecond + REAL_SECOND( timeoutTime );

    cr.Say( SAY_NETMSG,
            "Setting timeout: " + ( timeoutExpireTime.GetValue() - __FullSecond ) );
}
