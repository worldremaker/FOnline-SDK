#include "_macros.fos"
#include "_msgstr.fos"

import bool IsKeyAviable( Critter& cr, uint lockerId ) from "lockers";

#define STR_CAR_INFO    ( 2100 )


uint GetCarCost( uint16 protoCar ) // Export
{
    uint       count = WorldItemCount( protoCar );
    ProtoItem@ car = GetProtoItem( protoCar );
    if( valid( car ) )
        return car.Cost + car.Cost * count;
    return 0;
}

bool UseItemOnCar( Critter& cr, Item& car, Item& item ) // Export
{
    uint16 pid = item.GetProtoId();
//	if(((pid==PID_BEER || pid==PID_BOOZE || pid==PID_GAMMA_GULP_BEER || pid==PID_ROT_GUT || pid==PID_ROENTGEN_RUM) && _CarIsBioEngine(car)) ||
//	   ((pid==PID_SMALL_ENERGY_CELL || pid==PID_MICRO_FUSION_CELL) && _CarIsEnergoEngine(car)))
    bool isEnergo = ( pid == PID_SMALL_ENERGY_CELL || pid == PID_MICRO_FUSION_CELL );
    bool isBio = ( pid == PID_BEER || pid == PID_BOOZE || pid == PID_GAMMA_GULP_BEER || pid == PID_ROT_GUT || pid == PID_ROENTGEN_RUM );

    if( not isEnergo && not isBio )
        return false;

    if( isBio && not _CarIsBioEngine( car ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_CAR_FUEL_NOT_SUPPORTED );
        return true;
    }

    int octane = 100;
    if( pid == PID_BEER || pid == PID_GAMMA_GULP_BEER )
        octane = 30;
    else if( pid == PID_SMALL_ENERGY_CELL )
        octane = 100;
    else if( pid == PID_MICRO_FUSION_CELL )
        octane = 150;
    else
        octane = 70;    // Bio energy

    int need = int(car.Proto.Car_TankVolume) - car.Charge;
    int count = item.GetCount() * octane;
    if( count > need )
        count = need;

    if( count <= 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_CAR_FUEL_TANK_FULL );
    }
    else
    {
        int newCount = item.GetCount() - count / octane;
        if( newCount <= 0 )
            DeleteItem( item );
        else
            item.SetCount( newCount );
        car.Charge += count;
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_CAR_FUEL_TANK_FILL );
    }

    return true;
}

bool UseSkillOnCar( Critter& cr, Item& car, int skill ) // Export
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        if( not IsKeyAviable( cr, car.LockerId ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY );
        }
        else if( valid( cr.GetMap() ) )     // Critter on local map
        {
            if( cr.Timeout[ TO_TRANSFER ] > 0 )
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_TRANSFER_WAIT );
            else if( cr.Timeout[ TO_BATTLE ] > 0 )
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
            else
                DriveToGlobal( cr, car, true );
        }
    }
    else if( skill == SK_SCIENCE )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CAR_INFO, "$number" + car.LockerId +
                   "$fuel" + ( car.Charge / 100 ) + "$fuel_tank" + ( car.Proto.Car_TankVolume / 100 ) +
                   "$wear" + ( car.Deterioration * 100 / car.Proto.Car_MaxDeterioration ) );
    }
    else if( skill == SK_REPAIR )
    {
        if( car.Deterioration == 0 )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_CAR_REPAIR_NO_NEED );
        else if( cr.IsPlayer() && cr.Timeout[ TO_SK_REPAIR ] > 0 )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
        else
        {
            int fix = car.Deterioration - ( cr.Skill[ SK_REPAIR ] > 0 ? cr.Skill[ SK_REPAIR ] : 1 ) * 100;
            if( fix < 0 )
                fix = 0;
            car.Deterioration = fix;
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_CAR_REPAIR_SUCCESS );
            cr.TimeoutBase[ TO_SK_REPAIR ] = REPAIR_TIMEOUT( cr );
            cr.StatBase[ ST_EXPERIENCE ] += 10;
            cr.PlaySound( "CARREPAR.ACM", true );
        }
    }
    else if( skill == SK_LOCKPICK )
    {
        if( cr.Timeout[ TO_SK_LOCKPICK ] > 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
            return true;
        }

        if( _CarIsNoLockpick( car ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_LOCKPICK_FAIL );
            return true;
        }

        int    base = cr.Skill[ SK_LOCKPICK ] - 200;
        uint8  mode = 0;
        uint16 activePid = cr.GetSlotProto( SLOT_HAND1, mode ).ProtoId;
        if( activePid == PID_LOCKPICKS )
        {
            base += 25;
            if( Random( 0, 30 ) == 0 )
                cr.DeleteItem( PID_LOCKPICKS, 1 );
        }
        else if( activePid == PID_EXP_LOCKPICK_SET )
        {
            base += 50;
            if( Random( 0, 30 ) == 0 )
                cr.DeleteItem( PID_EXP_LOCKPICK_SET, 1 );
        }

        int minChance = cr.Stat[ ST_LUCK ] / 2;
        base = CLAMP( base, minChance, 95 );
        if( base >= Random( 1, 100 ) && car.LockerId != 1 )
        {
            DriveToGlobal( cr, car, true );
            cr.StatBase[ ST_EXPERIENCE ] += 200;
            cr.AddScore( SCORE_CRACKER, 1 );

            Item@ key = cr.GetItem( PID_KEY, SLOT_HAND1 );
            if( not valid( key ) )
                @key = cr.GetItem( PID_KEY, SLOT_HAND2 );
            if( valid( key ) )
                key.LockerId = car.LockerId;
        }
        else
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_LOCKPICK_FAIL );
        }

        cr.TimeoutBase[ TO_SK_LOCKPICK ] = LOCKPICK_TIMEOUT( cr );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
    }
    return true;
}

void DriveToGlobal( Critter& cr, Item& car, bool requestGroup )
{
    // Place car and bags to inventory
    for( uint i = 0; i < 3; i++ )
    {
        Item@ bag = car.GetChild( i );
        if( valid( bag ) )
        {
            SETFLAG( bag.Flags, ITEM_HIDDEN );
            MoveItem( bag, 0, cr );
        }
    }
    SETFLAG( car.Flags, ITEM_HIDDEN );
    MoveItem( car, 0, cr );
    cr.TransitToGlobal( true );
}
