// Author: Tab10id, Тринитротолуол
#include "_macros.fos"
#include "_teams.fos"
#include "_bags.fos"
#include "_npc_pids.fos"

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";
import bool AddWalkPlane( Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";
import bool AddMiscPlane( Critter& npc, uint priority, uint waitSecond, string@ funcName ) from "npc_planes";

#define TIME_FOR_START                   ( 15 * 60 * 60 )
#define ROLE_TRIB_MEN                    ( 10 )
#define ROLE_TRIB_WOMEN                  ( 11 )
#define ROLE_TRIB_RAIDER                 ( 12 )
#define QUEST_STAT_NONE                  ( 0 )
#define QUEST_STAT_TAKEN                 ( 1 )
#define QUEST_STAT_FULL_SUCC             ( 2 )
#define QUEST_STAT_FAIL_RUNAWAY          ( 3 )
#define QUEST_STAT_FAIL_KILL             ( 4 )
#define QUEST_STAT_FAIL_NO_HELP          ( 5 )
#define QUEST_STAT_NOT_FULL_SUCC         ( 6 )
#define QUEST_STAT_END                   ( 7 )
#define QUEST_STAT_FAIL_NOT_START        ( 8 )
#define QUEST_STAT_FAIL_TRIBE_IS_DEAD    ( 9 )
#define QUEST_STAT_ATTACK_RUNS           ( 10 )

#define MAXDIST                          ( 15 )
#define RUN_PERIOD                       ( REAL_MINUTE( 6 + Random( 0, 7 ) ) )

#define RAIDERS_LEVEL                    ( 4 )
#define ENT_GROUP_START                  ( 10 )
#define ENT_GROUP_FINISH                 ( 12 )

#define STR_TALK_TO_SULIK                ( 2600 )

#define TIME_TO_CHANGE_TARGET            ( REAL_MINUTE( 13 + Random( 0, 7 ) ) )

bool AttackRuns = false;
uint[] QuestPlayers;
uint MapIdent = 0;
bool NotCome = true;
bool TribeDead = false;
uint StartAttackTE = 0;


void _PrimalTribeInit( Map& map, bool firstTime )
{
    initQuest( map );
//	initNaturResp(map);
}

void initNaturResp( Map& map )
{
    CreateTimeEvent( __FullSecond, "e_NaturResp", map.Id, false );
}

uint e_NaturResp( uint[] @ values )
{
    Map@ map = GetMap( values[ 0 ] );
// 272 120 82
// 272 108 81
// 271 127 87
// 271 107 83
// 117 118 84
    return 60 * 60 * 12;
}

void initQuest( Map& map )
{
    MapIdent = map.Id;
//	Log("map.Id: "+map.Id+" MapIdent: "+MapIdent);
    uint menCount = 0;
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_PlayerInMap" );
    map.SetEvent( MAP_EVENT_FINISH, "_SaveAD" );

    Critter@[] citizens;
    GetCritters( map, citizens, ROLE_TRIB_MEN, FIND_ALL | FIND_ONLY_NPC );
    menCount = citizens.length();
    GetAD();
    GetCritters( map, citizens, ROLE_TRIB_WOMEN, FIND_ALL | FIND_ONLY_NPC );
    if( map.GetNpcCount( ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC ) > 0 )
    {
        AttackRuns = true;
    }
//	Log("initQuest "+menCount);
    for( uint i = 0; i < citizens.length(); i++ )
    {
        citizens[ i ].SetEvent( CRITTER_EVENT_DEAD, "_CDead" );
        citizens[ i ].SetEvent( CRITTER_EVENT_TALK, "_OnDial" );
        if( i < menCount )
        {
            citizens[ i ].SetEvent( CRITTER_EVENT_ATTACKED, "_MOnAttack" );
        }
        else
        {
            citizens[ i ].SetEvent( CRITTER_EVENT_ATTACKED, "_WOnAttack" );
        }
    }
}

void _SaveAD( Map& map, bool deleted )
{
    if( not SetAnyData( "PrimalTribe", QuestPlayers ) )
    {
        Log( "AnyData not created" );
    }
}

void GetAD()
{
    if( IsAnyData( "PrimalTribe" ) )
    {
        GetAnyData( "PrimalTribe", QuestPlayers );
    }
}

void r_StartQuest( Critter& master, Critter@ npc )
{
    GameVar@ quest = GetLocalVar( LVAR_q_trib_sulik_raid, master.Id );
    if( !valid( quest ) )
    {
        Log( "\n<Trib: Rangers Attack> LVAR_q_trib_sulik_raid not loaded" );
    }
    GameVar@ globStart = GetGlobalVar( GVAR_trib_raid );
    if( !valid( globStart ) )
    {
        Log( "\n<Trib: Rangers Attack> GVAR_trib_raid not loaded" );
    }
    GameVar@ raidersKilled = GetLocalVar( LVAR_trib_raider_kill_count, master.Id );
    if( !valid( raidersKilled ) )
    {
        Log( "\n<Trib: Rangers Attack> LVAR_trib_raider_kill_count not loaded." );
        return;
    }
    quest = QUEST_STAT_TAKEN;
    globStart = 1;
    raidersKilled = 0;
    NotCome = true;
    QuestPlayers.insertLast( master.Id );
    StartAttackTE = CreateTimeEvent( __FullSecond + TIME_FOR_START, "e_StartAttack", true );
}

void r_PushQuestPl( Critter& master, Critter@ npc )
{
    QuestPlayers.insertLast( master.Id );
}

void r_GetExp( Critter& master, Critter@ npc )
{
    GameVar@ quest = GetLocalVar( LVAR_q_trib_sulik_raid, master.Id );
    if( !valid( quest ) )
    {
        Log( "\n<Trib: Rangers Attack> LVAR_q_trib_sulik_raid not loaded" );
    }
    GameVar@ raidersKilled = GetLocalVar( LVAR_trib_raider_kill_count, master.Id );
    if( !valid( raidersKilled ) )
    {
        Log( "\n<Trib: Rangers Attack> LVAR_trib_raider_kill_count not loaded." );
        return;
    }
    master.StatBase[ ST_EXPERIENCE ] += ( raidersKilled.GetValue() + 1 ) * 100;
    master.StatBase[ ST_KARMA ] += ( ( raidersKilled.GetValue() + 1 ) * 10 );
    raidersKilled = 0;
    quest = QUEST_STAT_END;
}

bool d_AttackRuns( Critter& master, Critter@ npc )
{
    if( AttackRuns )
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool d_QuestSucc( Critter& master, Critter@ npc )
{
    GameVar@ quest = GetLocalVar( LVAR_q_trib_sulik_raid, master.Id );
    if( !valid( quest ) )
    {
        Log( "\n<Trib: Rangers Attack> LVAR_q_trib_sulik_raid not loaded" );
        return false;
    }
    uint qs = quest.GetValue();
    if( ( qs == QUEST_STAT_FULL_SUCC ) or ( qs == QUEST_STAT_NOT_FULL_SUCC ) or ( qs == QUEST_STAT_END ) )
    {
        return true;
    }
    else
    {
        return false;
    }
}

uint e_StartAttack( uint[] @ values )
{
    StartAttackTE = 0;
    uint entGroup = Random( ENT_GROUP_START, ENT_GROUP_FINISH );
    SpawnRaiders( MapIdent, entGroup, 0, RAIDERS_LEVEL );
    return 0;
}

void ChangeTarget( Critter& crit )
{
    Map@ map = crit.GetMap();
    Critter@[] raiders;
    GetCritters( map, raiders, ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    uint count = map.GetNpcCount( ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    uint m;
    if( count == 0 )
    {
        AttackRuns = false;
    }
    else
    {
        // crit.ClearEnemyStack();
        _NpcEraseAllPlanesAttack( crit );
        m = Random( 0, count - 1 );
        AddAttackPlane( crit, AI_PLANE_ATTACK_PRIORITY, raiders[ m ] );
    }
}

uint e_DeleteRaider( uint[] @ values )
{
    Critter@ raider;
    if( not valid( values ) )
    {
        return 0;
    }
    if( values.length() > 0 )
    {
        @raider = GetCritter( values[ 0 ] );
        if( not valid( raider ) )
        {
            //	Log("\n<Trib: Raiders Attack> critter not valid ");
            return 0;
        }

        DeleteNpc( raider );
    }
    return 0;
}

void _CDead( Critter& crit, Critter@ killer )
{
    if( !valid( killer ) )
    {
        return;
    }
}

uint e_CChangeTarget( uint[] @ values )
{
    Critter@ crit;
    if( not valid( values ) )
    {
        return 0;
    }
    if( values.length() > 0 )
    {
        @crit = GetCritter( values[ 0 ] );
        if( !valid( crit ) )
        {
            return 0;
        }
        if( crit.IsDead() )
        {
            return 0;
        }
        if( AttackRuns )
        {
            ChangeTarget( crit );
            return TIME_TO_CHANGE_TARGET;
        }
        else
        {
            return 0;
        }
    }
    return 0;
}

void _RaiderDead( Critter& crit, Critter@ killer )
{
    GameVar@ questStat;
    GameVar@ raidersKilled;
    uint     count = crit.GetMap().GetNpcCount( ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    uint     CountAll = crit.GetMap().GetNpcCount( ROLE_TRIB_RAIDER, FIND_ALL | FIND_ONLY_NPC );
    GameVar@ globStart = GetGlobalVar( GVAR_trib_raid );
    if( !valid( globStart ) )
    {
        Log( "\n<Trib: Rangers Attack> GVAR_trib_raid not loaded" );
    }
    if( valid( killer ) )
    {
        if( ( killer.IsNpc() ) and ( killer.Stat[ ST_NPC_ROLE ] != ROLE_TRIB_RAIDER ) )
        {
            ChangeTarget( killer );
            // return;
        }
        if( killer.IsPlayer() )
        {
            @questStat = GetLocalVar( LVAR_q_trib_sulik_raid, killer.Id );
            if( !valid( questStat ) )
            {
                Log( "\n<Trib: Rangers Attack> LVAR_q_trib_sulik_raid not loaded." );
                return;
            }
            @raidersKilled = GetLocalVar( LVAR_trib_raider_kill_count, killer.Id );
            if( !valid( raidersKilled ) )
            {
                Log( "\n<Trib: Rangers Attack> LVAR_trib_raider_kill_count not loaded." );
                return;
            }
            if( ( questStat.GetValue() == QUEST_STAT_NONE ) or ( questStat.GetValue() == QUEST_STAT_FAIL_RUNAWAY ) or ( questStat.GetValue() == QUEST_STAT_FAIL_KILL ) or ( questStat.GetValue() == QUEST_STAT_FAIL_NO_HELP ) or ( questStat.GetValue() == QUEST_STAT_FAIL_NOT_START ) or ( questStat.GetValue() == QUEST_STAT_FAIL_TRIBE_IS_DEAD ) or ( questStat.GetValue() == QUEST_STAT_ATTACK_RUNS ) or ( questStat.GetValue() == QUEST_STAT_NOT_FULL_SUCC ) )
            {
                if( raidersKilled.GetValue() == int(CountAll - 1) )
                {
                    questStat = QUEST_STAT_FULL_SUCC;
                }
                else
                {
                    if( raidersKilled.GetValue() == 0 )
                    {
                        questStat = QUEST_STAT_NOT_FULL_SUCC;
                    }
                    raidersKilled += 1;
                }
            }
        }
    }
    if( count == 0 )
    {
        globStart = 0;
        SendQuestStat();
    }
    CreateTimeEvent( __FullSecond + 60 * Random( 20, 60 ), "e_DeleteRaider", crit.Id, true );
}

void _PlayerDead( Critter& player, Critter@ killer )
{
    GameVar@ questStat = GetLocalVar( LVAR_q_trib_sulik_raid, player.Id );
    if( !valid( questStat ) )
    {
        Log( "\n<Trib: Rangers Attack> LVAR_q_trib_sulik_raid not loaded." );
        return;
    }
    if( ( questStat.GetValue() != QUEST_STAT_FULL_SUCC ) and ( questStat.GetValue() != QUEST_STAT_NOT_FULL_SUCC ) )
    {
        questStat = QUEST_STAT_FAIL_KILL;
    }
    player.SetEvent( CRITTER_EVENT_DEAD, "" );
}

bool _MOnAttack( Critter& crit, Critter& attacker )
{
//	if(!AttackRuns)
//	{
//		AttackRuns=true;
//	}
    if( attacker.Stat[ ST_NPC_ROLE ] == ROLE_TRIB_RAIDER )
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool _WOnAttack( Critter& crit, Critter& attacker )
{
//	if(!AttackRuns)
//	{
//		AttackRuns=true;
//	}
    if( attacker.Stat[ ST_NPC_ROLE ] == ROLE_TRIB_RAIDER )
    {
        RunAway( crit );
        return true;
    }
    else
    {
        return false;
    }
}

uint GetCritters( Map@ map, Critter@[] @ arr, int npcRole, int findType )
{
    uint findCount = 0;
    uint count = map.GetNpcCount( npcRole, findType );
    for( uint i = 0; i < count; i++ )
    {
        Critter@ cr = map.GetNpc( npcRole, findType, i );
        if( not valid( cr ) )
            continue;
        findCount++;
        arr.insertLast( @cr );
    }
    return findCount;
}

Critter@ SpawnRaider( Map& map, uint8 entGroup, uint8 entNum, uint16 npcPid, uint8 dir, uint dialog, uint bagId, uint level )
{
    uint16 x = 0, y = 0;
    if( not map.GetEntireCoords( entGroup, entNum, x, y ) )
    {
        Log( "\n<Trib: Rangers Attack> Error: GetEntireCoords " + entGroup + ":" + entNum );
        return null;
    }

    int[] params =
    {
        ST_DIALOG_ID, dialog, ST_BAG_ID, bagId, ST_TEAM_ID, TEAM_Bandit, ST_VAR2, x, ST_VAR3, y,
        ST_NPC_ROLE, ROLE_TRIB_RAIDER, ST_REPLICATION_TIME, -1, MODE_NO_SUPPLY, 1, MODE_NO_HOME, 1, ST_LEVEL, level
    };
    Critter@ raider = map.AddNpc( npcPid, x, y, dir, params, null, null );
    if( not valid( raider ) )
    {
        Log( "\n<Trib: Rangers Attack> critter not valid " );
        return null;
    }
    CreateTimeEvent( __FullSecond, "e_RaiderChangeTarget", raider.Id, false );
    raider.SetEvent( CRITTER_EVENT_DEAD, "_RaiderDead" );
    return raider;
}

uint e_RaiderChangeTarget( uint[] @ values )
{
    Critter@ raider;
    Critter@[] players;
    Map@     map;
    uint     citizenCount;
    GameVar@ questState;
    uint     mCount, wCount;
    Critter@ target;
    if( not valid( values ) )
    {
        return 0;
    }
    if( values.length() > 0 )
    {
        @raider = GetCritter( values[ 0 ] );
        if( not valid( raider ) )
        {
            // Log("\n<Trib: Rangers Attack> critter not valid ");
            return 0;
        }
        if( raider.IsDead() )
        {
            return 0;
        }
        @map = raider.GetMap();
        if( not valid( map ) )
        {
            Log( "\n<Trib: Rangers Attack> map not valid " );
            return 0;
        }
        citizenCount = map.GetNpcCount( ROLE_TRIB_MEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
        #ifdef __DEBUG__
        Log( "Citizens Men: " + citizenCount );
        #endif
        @questState = GetGlobalVar( GVAR_trib_raid );
        if( !valid( questState ) )
        {
            Log( "\n<Trib: Rangers Attack> GVAR_trib_raid not loaded" );
        }
        citizenCount += map.GetNpcCount( ROLE_TRIB_WOMEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
        #ifdef __DEBUG__
        Log( "Citizens All: " + citizenCount );
        #endif
        if( citizenCount == 0 )
        {
            AddWalkPlane( raider, AI_PLANE_WALK_PRIORITY, raider.Stat[ ST_VAR2 ], raider.Stat[ ST_VAR3 ], Random( 0, 5 ), true, Random( 0, 1 ) );
            AddMiscPlane( raider, AI_PLANE_MISC_PRIORITY, 0, "plane_DelRaider" );
            questState = 0;
            TribeDead = true;
            SendQuestStat();
            return 0;
        }
        else
        {
            mCount = map.GetNpcCount( ROLE_TRIB_MEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
            wCount = map.GetNpcCount( ROLE_TRIB_WOMEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
            raider.ClearEnemyStack();
            _NpcEraseAllPlanesAttack( raider );
            map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players );
            if( ( Random( 0, 1 ) == 0 ) or ( players.length() == 0 ) )
            {
                if( ( Random( 0, 1 ) == 0 ) or ( wCount == 0 ) )
                {
                    @target = map.GetNpc( ROLE_TRIB_MEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC, Random( 0, mCount - 1 ) );
                }
                else
                {
                    @target = map.GetNpc( ROLE_TRIB_WOMEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC, Random( 0, wCount - 1 ) );
                }
            }
            else
            {
                @target = players[ Random( 0, players.length() - 1 ) ];
            }
            if( valid( target ) )
            {
                AddAttackPlane( raider, AI_PLANE_ATTACK_PRIORITY, target );
            }
            return TIME_TO_CHANGE_TARGET;
        }
    }
    return 0;
}

void plane_DelRaider( Critter& raider )
{
    if( raider.Stat[ ST_NPC_ROLE ] != ROLE_TRIB_RAIDER )
        return;
    DeleteNpc( raider );
}

void SpawnRaiders( uint mapId, uint entGroup, uint dialogId, uint mobLevel )
{
    uint npcPid;
    Map@ map = GetMap( mapId );
    uint count = 0;
    if( not valid( map ) )
    {
        Log( "\n<Trib: Rangers Attack> map not valid" );
        return;
    }
    uint bagId;
    Critter@[] raiders;
    uint entCount = map.CountEntire( entGroup );
    GetCritters( map, raiders, ROLE_TRIB_RAIDER, FIND_ALL | FIND_ONLY_NPC );
    count = raiders.length();
    if( count > 0 )
    {
        for( uint i = 0; i < raiders.length(); i++ )
        {
            DeleteNpc( raiders[ i ] );
        }
    }
    for( uint i = 0; i < entCount; i++ )
    {
        npcPid = Random( NPC_PID_RaiderMale, NPC_PID_RaiderFemale );
        if( npcPid == NPC_PID_RaiderMale )
        {
            bagId = Random( BAG_RDRC_Raiders_RaiderMale, BAG_RDRC_Raiders_RaiderMale2 );
        }
        else
        {
            bagId = Random( BAG_RDRC_Raiders_RaiderFemale, BAG_RDRC_Raiders_RaiderFemale2 );
        }
        Critter@ raider = SpawnRaider( map, entGroup, i, npcPid, Random( 0, 5 ), dialogId, bagId, mobLevel );
        if( not valid( raider ) )
        {
            continue;
        }
    }
    if( !AttackRuns )
    {
        AttackRuns = true;
        for( uint i = 0; i < QuestPlayers.length(); i++ )
        {
            Critter@ crit = GetCritter( QuestPlayers[ i ] );
            GameVar@ questStat = GetLocalVar( LVAR_q_trib_sulik_raid, QuestPlayers[ i ] );
            if( !valid( questStat ) )
            {
                Log( "\n<Trib: Rangers Attack> LVAR_q_trib_sulik_raid not loaded." );
                return;
            }
            if( questStat.GetValue() == QUEST_STAT_TAKEN )
            {
                questStat = QUEST_STAT_ATTACK_RUNS;
            }
        }
    }
    Critter@[] citizensM;
    Critter@[] citizensW;
    GetCritters( map, citizensM, ROLE_TRIB_MEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    GetCritters( map, citizensW, ROLE_TRIB_WOMEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );

    for( uint i = 0; i < citizensM.length(); i++ )
    {
        CreateTimeEvent( __FullSecond, "e_CChangeTarget", citizensM[ i ].Id, true );
    }
    for( uint i = 0; i < citizensW.length(); i++ )
    {
        CreateTimeEvent( __FullSecond + RUN_PERIOD, "e_RunRandom", citizensW[ i ].Id, false );
        citizensW[ i ].ModeBase[ MODE_NO_HOME ] = 1;
        citizensW[ i ].SetEvent( CRITTER_EVENT_PLANE_END, "_WPlaneEnd" );
    }
}

void SendQuestStat()
{
    Critter@ crit;
    GameVar@ questStat;
    GameVar@ raidersKilled;
    GameVar@ questFromElize;
    Map@     map;
    uint     mapId;
    for( uint i = 0; i < QuestPlayers.length(); i++ )
    {
        @crit = GetCritter( QuestPlayers[ i ] );
        @questStat = GetLocalVar( LVAR_q_trib_sulik_raid, QuestPlayers[ i ] );
        if( !valid( questStat ) )
        {
            Log( "\n<Trib: Rangers Attack> LVAR_q_trib_sulik_raid not loaded." );
            return;
        }
        @raidersKilled = GetLocalVar( LVAR_trib_raider_kill_count, QuestPlayers[ i ] );
        if( !valid( raidersKilled ) )
        {
            Log( "\n<Trib: Rangers Attack> LVAR_trib_raider_kill_count not loaded." );
            return;
        }
        @questFromElize = GetLocalVar( LVAR_ncr_elize_slavers, QuestPlayers[ i ] );
        if( !valid( questFromElize ) )
        {
            Log( "\n<Trib: Rangers Attack> LVAR_ncr_elize_slavers not loaded." );
            return;
        }
        if( ( raidersKilled.GetValue() == 0 ) and ( questStat != QUEST_STAT_FAIL_KILL ) )
        {
            if( valid( crit ) )
            {
                @map = crit.GetMap();
                if( valid( map ) )
                {
                    mapId = map.Id;
                }
                else
                {
                    mapId = 0;
                }
                if( mapId != MapIdent )
                {
                    if( questFromElize.GetValue() == 0 )
                    {
                        questStat = QUEST_STAT_FAIL_RUNAWAY;
                    }
                    else
                    {
                        if( NotCome )
                        {
                            questStat = QUEST_STAT_FAIL_NOT_START;
                        }
                        else
                        {
                            questStat = QUEST_STAT_FAIL_RUNAWAY;
                        }
                    }
                }
                else
                {
                    if( TribeDead )
                    {
                        questStat = QUEST_STAT_FAIL_TRIBE_IS_DEAD;
                    }
                    else
                    {
                        questStat = QUEST_STAT_FAIL_NO_HELP;
                    }
                }
            }
            else
            {
                if( questFromElize.GetValue() == 0 )
                {
                    questStat = QUEST_STAT_FAIL_RUNAWAY;
                }
                else
                {
                    if( NotCome )
                    {
                        questStat = QUEST_STAT_FAIL_NOT_START;
                    }
                    else
                    {
                        questStat = QUEST_STAT_FAIL_RUNAWAY;
                    }
                }
            }
        }
    }
    QuestPlayers.resize( 0 );
}

void _PlayerInMap( Map& map, Critter& crit )
{
    if( crit.IsNpc() )
    {
        return;
    }
    GameVar@ questStat = GetLocalVar( LVAR_q_trib_sulik_raid, crit.Id );
    if( questStat.GetValue() == QUEST_STAT_TAKEN )
    {
        if( !AttackRuns )
        {
            if( StartAttackTE != 0 )
            {
                EraseTimeEvent( StartAttackTE );
                StartAttackTE = 0;
            }
            e_StartAttack( null );
        }
        crit.SetEvent( CRITTER_EVENT_DEAD, "_PlayerDead" );
        NotCome = false;
    }
}

void RunAway( Critter& crit )
{
    uint16 x, y, homeX = 0, homeY = 0, homeM = 0, homeD = 0;
    uint8  dir;
    do
    {
        x = crit.HexX + Random( -8, 8 );
    }
    while( ( x < homeX + MAXDIST ) or ( x > homeX - MAXDIST ) );
    do
    {
        y = crit.HexY + Random( -8, 8 );
    }
    while( ( y < homeY + MAXDIST ) or ( y > homeY - MAXDIST ) );
    dir = GetDirection( crit.HexX, crit.HexY, x, y );
    AddWalkPlane( crit, AI_PLANE_WALK_PRIORITY, x, y, dir, true, 0 );
}

uint e_RunRandom( uint[] @ values )
{
    GameVar@ globStart = GetGlobalVar( GVAR_trib_raid );
    if( !valid( globStart ) )
    {
        Log( "\n<Trib: Rangers Attack> GVAR_trib_raid not loaded" );
    }
    Critter@ crit;
    if( not valid( values ) )
    {
        return 0;
    }
    if( values.length() > 0 )
    {
        @crit = GetCritter( values[ 0 ] );
        if( valid( crit ) )
        {
            Map@ map = crit.GetMap();
            if( valid( map ) )
            {
                uint count = map.GetNpcCount( ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
                if( count == 0 )
                {
                    if( globStart.GetValue() != 0 )
                    {
                        SendQuestStat();
                        globStart = 0;
                    }
                    crit.ModeBase[ MODE_NO_HOME ] = 0;
                    crit.SetEvent( CRITTER_EVENT_PLANE_END, "" );
                }
                else
                {
                    RunAway( crit );
                }
            }
        }
    }
    return 0;
}

int _WPlaneEnd( Critter& crit, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    CreateTimeEvent( __FullSecond + RUN_PERIOD, "e_RunRandom", crit.Id, false );
    return PLANE_RUN_GLOBAL;
}


bool _OnDial( Critter& crit, Critter& player, bool attach, uint talkCount )
{
    GameVar@ quest;
    uint     qs;
    if( crit.Stat[ ST_DIALOG_ID ] != DIALOG_trib_sulik )
    {
        @quest = GetLocalVar( LVAR_q_trib_sulik_raid, player.Id );
        if( !valid( quest ) )
        {
            Log( "\n<Trib: Rangers Attack> LVAR_q_trib_sulik_raid not loaded" );
            return true;
        }
        qs = quest.GetValue();
        if( ( qs == QUEST_STAT_FULL_SUCC ) or ( qs == QUEST_STAT_NOT_FULL_SUCC ) )
        {
            crit.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, STR_TALK_TO_SULIK );
            return false;
        }
        else
        {
            return true;
        }
    }
    else
    {
        return true;
    }
}

void critter_init( Critter& crit, bool firstTime )
{
    if( !AttackRuns )
    {
        return;
    }
    if( crit.Stat[ ST_GENDER ] == GENDER_MALE )
    {
        CreateTimeEvent( __FullSecond, "e_CChangeTarget", crit.Id, true );
    }
    else
    {
        CreateTimeEvent( __FullSecond + RUN_PERIOD, "e_RunRandom", crit.Id, false );
        crit.ModeBase[ MODE_NO_HOME ] = 1;
        crit.SetEvent( CRITTER_EVENT_PLANE_END, "_WPlaneEnd" );
    }
}
