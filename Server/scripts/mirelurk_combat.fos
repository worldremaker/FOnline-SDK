// Author: rifleman17
// Поведение болотников во время нашествия на сан-франциско
/* Стадия №1
   Если есть возможность атаковать кого-то, болотники атакуют.
   Если дорога перекрыта, остаются на месте.
   Периодически перемещаются в случайном направлении на 1 гекс с использованием Critter::MoveRandom
 */


#define SRCH_RADIUS_STAGE_1         ( 15 )                                                                                                      // Радиус поиска целей для первого этапа
#define SRCH_RADIUS_STAGE_2         ( 25 )                                                                                                      // Радиус поиска целей для второго этапа
#define SRCH_RADIUS_STAGE_3         ( 35 )                                                                                                      // Радиус поиска целей для третьего этапа.

#define ATTACK_NPC_PRIORITY         ( AI_PLANE_ATTACK_PRIORITY )                                                                                // Приоритет атаки рядовых НПЦ
#define ATTACK_PLAYER_PRIORITY      ( AI_PLANE_ATTACK_PRIORITY * 3 )                                                                            // Приоритет атаки игроков
#define ATTACK_BOS_DEF_PRIORITY     ( AI_PLANE_ATTACK_PRIORITY * 2 )                                                                            // Приоритет атаки представителей БС
#define CHANGE_STAGE_PRIORITY       ( ATTACK_PLAYER_PRIORITY - 1 )                                                                              // Приоритет плана на смену состояния
#define MOVE_OUT_PRIORITY           ( ATTACK_BOS_DEF_PRIORITY - 1 )                                                                             // Приоритет плана удрать из доков. Ниже приоритета на убийство бойцов БОС и игроков, но выше всех остальных
#define DESTROY_SANDBAG_PRIORITY    ( ATTACK_PLAYER_PRIORITY + 1 )                                                                              // приоритет плана "ломать мешки"
#define IdleCount                   StatBase[ ST_VAR1 ]                                                                                         // Счетчик простоев у болотников НЕНУЖНО
#define CurStage                    StatBase[ ST_VAR2 ]                                                                                         // Текушая стадия поведения у болотника
#define TimeNextStage               StatBase[ ST_VAR4 ]                                                                                         // Следующая стадия должна наступить
#define LastBrokenBag               StatBase[ ST_VAR3 ]                                                                                         // Последнее игровое время, когда болотник ломал мешок. Болотники не могу ломать мешок чаще чем в 1 игровую минуту
#define DestroyingItem              StatBase[ ST_VAR5 ]                                                                                         // Код итема-баррикады, который последний раз ломал болотник.
#define IDLE_COUNT_STAGE_1TO2       ( 300 )                                                                                                     // Число простоев, после которого болотники начинают жить в режиме№2
#define IDLE_COUNT_STAGE_2TO3       ( 300 )                                                                                                     // Число простоев, после которого болотники начинают жить в режиме№3
#define IDLE_COUNT_TO_MOVEOUT       ( 300 )                                                                                                     // Число простоев на третьей стадии, после которого болотники начинают линять из района Доков.
#define MSG_ALL2STAGE_2             ( 214 )                                                                                                     // Номер сообщения, после получения которого все болотники переходят в режим№2
#define STR_ALL2STAGE_2             ( 5100 )                                                                                                    // Строка, которую произносит болотник, когда инициирует переход на новую стадию
#define STR_DESTROY_SANDBAGS        ( 5100 )                                                                                                    // Строка, которую произносит болотник перед поломкой мешка
#define STR_STAGE2_MSG_RECIEVED     ( 5101 )                                                                                                    // Строка, которую произносит болоник в состоянии 1, когда получает сообщение о переходе в состояние 2
#define PLANE_ID_DESTROY            ( 121 )                                                                                                     // Id плана - разрушения мешков
#define PLANE_ID_MOVEOUT            ( 122 )                                                                                                     // Id плана - выход из доков наружу
#define TIME_TO_NEXT_STAGE          ( 30 * 60 )                                                                                                 // Базовое время перехода в следующее состояние (30 игровых минут)
#define MAX_STAGE_NUM               ( 3 )                                                                                                       // Последняя стадия модели поведения


#define _SearchRadius               # (stage) ( stage == 1 ? SRCH_RADIUS_STAGE_1 : ( stage == 2 ? SRCH_RADIUS_STAGE_2 : SRCH_RADIUS_STAGE_3 ) ) // Радиус поиска врагов
#define _AttackPriority             # (target) ( target.IsPlayer() ? ATTACK_PLAYER_PRIORITY : ( target.Stat[ ST_TEAM_ID ] == TEAM_BoSTrooper ? ATTACK_BOS_DEF_PRIORITY : ATTACK_NPC_PRIORITY ) )


void _MirelurkInit( Critter& cr, bool firstTime )
{
    cr.CurStage = 1;
    cr.TimeNextStage = __FullSecond + TIME_TO_NEXT_STAGE;
    cr.ModeBase[ MODE_NO_HOME ] = 1;
    cr.SetEvent( CRITTER_EVENT_IDLE, "_MirelurkIdle" );
    cr.SetEvent( CRITTER_EVENT_PLANE_END, "_MirelurkPlaneEnd" );
    cr.SetEvent( CRITTER_EVENT_DEAD, "_Dead" );
}

// Основной скрипт болотника
// В нем переключаются состояния, выбираются цели для атаки и разрушения баррикад
// В нем же принимаются решения о том, что пора линять с карты
void _MirelurkIdle( Critter& cr )
{
    // Обработчики срабатывают только, если на карте есть игроки
    if( !IsPlayerOnMap( cr ) )
        return;
    // Если есть какие-то планы, тоже не обрабатывается
    if( !cr.IsNoPlanes() )
        return;
    Map @ map = cr.GetMap();
    if( !valid( map ) )
        return;
    // Если нужно, делаем изменение стадии модели поведения
    ChangeStageIfNeaded( cr );
    // Ищем цель, доступную для атаки
    TryFoundAccessibleTarget( cr, map );
    // Если так и нет никаких планов
    if( cr.IsNoPlanes() )
    {
        // Чем позже стадия, тем ниже шанс на случайное перемещение
        if( Random( 3 - cr.CurStage, 4 ) == 4 )
            cr.MoveRandom();
        // Во время третьей стадии болотники начинают уходить с карты
        TryMoveOut( map, cr );
    }
}

// Завершение плана перемещения к мешкам, чтобы разрушить
// Или перемещения к сетке выхода
int _MirelurkPlaneEnd( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    if( reason == REASON_GAG_ITEM )  // Болотники должны ломать баррикады по-другому, не так, как обычные криттеры
    {
        return PLANE_DISCARD;
    }
    if( plane.Identifier == PLANE_ID_DESTROY && plane.Type == AI_PLANE_WALK )
    {
        if( reason == REASON_SUCCESS )
        {
            DestroyBarricade( cr, plane.IdentifierExt );
        }
        else
        {
            return PLANE_DISCARD;
        }
    }
    if( plane.Identifier == PLANE_ID_MOVEOUT )
    {
        if( reason == REASON_SUCCESS )
        {
            // Болотник добрался до точки выхода
            DeleteNpc( cr );
            return PLANE_DISCARD;
        }
        return PLANE_RUN_GLOBAL;
    }
    return PLANE_RUN_GLOBAL;
}

// Изменение стадии поведения, если подошло время
void ChangeStageIfNeaded( Critter& cr )
{
    if( cr.CurStage < MAX_STAGE_NUM )
    {
        if( __FullSecond > uint( cr.TimeNextStage ) )
        {
            // Log("Stage changed"+cr.CurStage);
            cr.CurStage++;
            cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_ALL2STAGE_2 );
            cr.TimeNextStage = __FullSecond + TIME_TO_NEXT_STAGE * cr.CurStage;
        }
    }
}

// Попытка найти цель для атаки, до которой можно дойти
void TryFoundAccessibleTarget( Critter& cr, Map& map )
{
    DL( "searching target" );
    uint   radius = _SearchRadius( cr.CurStage );
    Critter@[] crits;
    uint16 crX = cr.HexX;
    uint16 crY = cr.HexY;
    // Первоочередная цель - игроки
    map.GetCrittersHex( crX, crY, radius, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, crits );
    map.GetCrittersHex( crX, crY, radius, FIND_LIFE_AND_KO | FIND_ONLY_NPC, crits );
    Critter @ target;
    for( uint i = 0, l = crits.length(); i < l; i++ )
    {
        @ target = crits[ i ];
        if( !valid( target ) )
            continue;
        if( cr.Id == target.Id )
            continue;
        // DL("CheckPathLen cr.Id"+target.Id+"crX:"+crX+";crY:"+crY+"; target X:"+target.HexX+";Y:"+target.HexY+". Distance:"+GetCrittersDistantion(cr,target));//TODO COMMENT
        uint16 len = map.GetPathLength( cr, target.HexX, target.HexY, 1 + cr.GetMultihex() );
        DL( "len=" + len );
        if( len > 0 )
        {
            if( target.IsPlayer() || cr.Stat[ ST_TEAM_ID ] != target.Stat[ ST_TEAM_ID ] )
            {
                DL( "Attack plane added" );
                AddAttackPlane( cr, _AttackPriority( target ), target );
            }

        }
    }
    // Если стадия 2я и дальше, болотники будут ломать мешки (если нет доступных целей для атаки). Иначе выход
    if( !cr.IsNoPlanes() || cr.CurStage < 2 )
        return;
    // Если таймаут на поломку баррикады - выход
    if( uint( cr.LastBrokenBag ) >= __FullSecond )
        return;
    cr.LastBrokenBag = __FullSecond + Random( 1, 8 ) * 60; // Следующая попытка поломать будет через 1..8 игровых минут
    // Проверяем, не было ли уже попыток что-то сломать, если было, код предмета сохранен в cr.DestroyingItem
    if( cr.DestroyingItem > 0 )
    {
        Item @sb = map.GetItem( cr.DestroyingItem );
        if( valid( sb ) )
        {
            // Действительно, мешок найден.
            AddDestroyBarricadePlane( cr, map, sb );
            return;
        }
        else
        {
            // Очистка запомненного итема
            cr.DestroyingItem = 0;
        }
    }
    // Собираем элементы баррикады в радиусе атаки
    Item@[] gagItems;
    map.GetItems( crX, crY, radius, PID_SANDBAG_1, gagItems );
    map.GetItems( crX, crY, radius, PID_SANDBAG_2, gagItems );
    map.GetItems( crX, crY, radius, PID_SANDBAG_3, gagItems );
    map.GetItems( crX, crY, radius, PID_SANDBAG_4, gagItems );
    map.GetItems( crX, crY, radius, PID_SANDBAG_5, gagItems );
    uint16 counter = 0;     // максимум 300 попыток
    DL( "trying found sandbags" );
    Item @ item;
    for( uint i = 0, l = crits.length(); i < l && counter < 300; i++ )
    {

        @ target = crits[ i ];
        if( target.IsDead() )
            continue;
        if( target.Id == cr.Id )
            continue;
        for( uint j = 0, k = gagItems.length(); j < k; j++ )
        {
            if( counter > 300 )
            {
                DL( "too many tries" );
                break;
            }
            counter++;
            @ item = gagItems[ j ];
            if( !valid( target ) || !valid( item ) )
                continue;
            // НПЦ может дойти до мешка?
            DL( "npc can reach sandbag?" );
            if( map.GetPathLength( cr, item.HexX, item.HexY, 1 + cr.GetMultihex() ) == 0 )
                continue;                                                                             // не пройдет
            // От мешка можно дайти до игрока?
            if( map.GetPathLength( target, item.HexX, item.HexY, 1 + cr.GetMultihex() ) == 0 )
                continue;                                                                             // нет
            AddDestroyBarricadePlane( cr, map, item );
            return;
        }
    }
}

// Добавление плана "подойти, чтобы сломать баррикаду в таком-то месте"
bool AddDestroyBarricadePlane( Critter& cr, Map& map, Item& barricade )
{
    uint16 bX = barricade.HexX;
    uint16 bY = barricade.HexY;
    // Находим координаты гекса, к которому можно подойти
    uint16 crX = cr.HexX;
    uint16 crY = cr.HexY;
    uint16 x = bX;
    uint16 y = bY;
    for( uint8 dir = 0; dir < 6; dir++ )
    {
        // TODO: выбор кратчайшего маршрута из возможных
        map.MoveHexByDir( x, y, dir, 1 );
        if( map.GetPathLength( cr, x, y, 0 + cr.GetMultihex() ) > 0 )
        {
            return AddWalkPlane( cr, DESTROY_SANDBAG_PRIORITY, PLANE_ID_DESTROY, barricade.Id, x, y, GetDirection( x, y, bX, bY ), false, 0 );
            // Подходящий гекс найден
        }
        x = bX;
        y = bY;
    }
    DL( "can't destroy" );
    return false;
}

// Попытка добавить план на выход с локации
void TryMoveOut( Map& map, Critter& cr )
{
    if( cr.CurStage < 3 )
        return;
    if( __FullSecond < uint( cr.TimeNextStage ) )
        return;
    uint16 x = cr.HexX;
    uint16 y = cr.HexY;
    bool   pathFounded = false;
    if( GetNearEntire( map, ENTIRE_EXIT_SF, x, y ) )
    {
        uint tries = 0;
        while( !map.IsHexPassed( x, y ) && tries < 10 )
        {
            cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_STAGE2_MSG_RECIEVED );
            if( GetFreeHex( map, tries, x, y ) )
            {
                pathFounded = true;
                break;
            }
            tries++;
        }
        if( pathFounded )
        {
            AddWalkPlane( cr, MOVE_OUT_PRIORITY, PLANE_ID_MOVEOUT, 0, x, y, Random( 0, 5 ), false, 0 );
            return;
        }
    }
}

/* Вспомогательные методы */
// Вспомогательная проверка. Если на карте нет игроков, болотники ничего не делают
bool IsPlayerOnMap( Critter& cr )
{
    Map @ map = cr.GetMap();
    if( !valid( map ) )
        return false;

    return ( map.GetCritters( 0, FIND_ALL | FIND_ONLY_PLAYERS, null ) > 0 );
}

// Разрушение баррикады из мешков по коду предмета
void DestroyBarricade( Critter& cr, uint itemId )
{
// Log("destroy!");
    Item @ sandbag = GetItem( itemId );
    if( valid( sandbag ) )
    {
        if( IsSandBag( sandbag.GetProtoId() ) )
        {
            cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_DESTROY_SANDBAGS );
            cr.DestroyingItem = sandbag.Id;
            cr.SetDir( GetDirection( cr.HexX, cr.HexY, sandbag.HexX, sandbag.HexY ) );
            _CritAnimateUse( cr );
            _SandBagSkill( sandbag, cr, SK_REPAIR );
        }
    }
}
