// Author: cvet
#include "_macros.fos"
#include "trader_table.fos"

import void SetDeterioration( Item& item, int deteriorationProcent ) from "repair";

#define TABLE_TRADERS_COUNT    ( TradersCount )
#define TABLE_ITEMS_COUNT      ( ItemsCount )
#define TABLE_DIALOG_ID        # (traderIndex)           ( TradersData[ ( traderIndex ) ] )
#define TABLE_REFRESH_HOUR     # (traderIndex)           ( TradersData[ TABLE_TRADERS_COUNT + ( traderIndex ) ] )
#define TABLE_SKILL            # (traderIndex)           ( TradersData[ TABLE_TRADERS_COUNT * 2 + ( traderIndex ) ] )
#define TABLE_ITEM_PID         # (itemIndex)             ( TradersData[ TABLE_TRADERS_COUNT * 3 + ( itemIndex ) ] )
#define TABLE_ITEM_COUNT       # ( traderIndex, itemIndex )( TradersData[ TABLE_TRADERS_COUNT * 3 + TABLE_ITEMS_COUNT + TABLE_ITEMS_COUNT * ( traderIndex ) + ( itemIndex ) ] )

void _CashTraderInit( Critter& trader, bool firstTime )
{
    trader.ModeBase[ MODE_BARTER_ONLY_CASH ] = 1;
    _TraderInit( trader, firstTime );
}

void _TraderInit( Critter& trader, bool firstTime )
{
    int traderIndex = GetTraderIndex( trader );
    if( traderIndex >= 0 )
    {
        trader.StatBase[ ST_TALK_DISTANCE ]      = 5;
        trader.StatBase[ ST_MAX_TALKERS ]        = 6;
        trader.StatBase[ ST_REPLICATION_TIME ]   = 30;
        trader.SkillBase[ SK_BARTER ]            = TABLE_SKILL( traderIndex );
        trader.ModeBase[ MODE_NO_ITEM_GARBAGER ] = 1;
        trader.ModeBase[ MODE_NO_BARTER ]        = 0;
        trader.ModeBase[ MODE_NO_DROP ]          = 1;
        trader.ModeBase[ MODE_NO_STEAL ]         = 1;
        trader.ModeBase[ MODE_NO_LOOT ]          = 1;
        trader.ModeBase[ MODE_NO_ENEMY_STACK ]   = 1;

        if( trader.GetTimeEvents( CTE_TRADER, null, null, null ) == 0 )
        {
            uint nextCall = UpdateItems( trader );
            if( nextCall > 0 )
                trader.AddTimeEvent( "cte_UpdateItems", nextCall, CTE_TRADER );
        }
    }
}

uint cte_UpdateItems( Critter& trader, int identifier, uint& stage )
{
    if( trader.IsDead() )
        return trader.Timeout[ TO_REPLICATION ] + REAL_MINUTE( 1 );
    return UpdateItems( trader );
}

int GetTraderIndex( Critter& trader )
{
    int dialogId = trader.Stat[ ST_DIALOG_ID ];
    if( dialogId > 0 )
    {
        for( uint i = 0, j = TABLE_TRADERS_COUNT; i < j; i++ )
        {
            if( TABLE_DIALOG_ID( i ) == dialogId )
                return i;
        }
    }
    return -1;
}

uint UpdateItems( Critter& trader )
{
    int traderIndex = GetTraderIndex( trader );
    if( traderIndex < 0 )
        return 0;

    // Delete all
    Item@[] items;
    trader.GetItems( SLOT_INV, items );
    DeleteItems( items );

    // Add new
    for( uint i = 0, j = TABLE_ITEMS_COUNT; i < j; i++ )
    {
        int pid = TABLE_ITEM_PID( i );
        if( pid > 0 )
        {
            int needCount = TABLE_ITEM_COUNT( traderIndex, i );
            if( needCount > 0 )
            {
                ProtoItem@ proto = GetProtoItem( pid );
                if( proto.Deteriorable )
                {
                    if( proto.Stackable )
                    {
                        Item@ item = trader.AddItem( pid, needCount );
                        if( valid( item ) )
                            SetDeterioration( item, Random( 5, 25 ) );                                 // 5%..25% procent of deteoration
                    }
                    else
                    {
                        while( needCount > 0 )
                        {
                            Item@ item = trader.AddItem( pid, 1 );
                            if( valid( item ) )
                                SetDeterioration( item, Random( 5, 25 ) );                                     // 5%..25% procent of deteoration
                            needCount--;
                        }
                    }
                }
                else
                {
                    trader.AddItem( pid, needCount );
                }
            }
        }
    }

    // Calculate next update time
    int hour = TABLE_REFRESH_HOUR( traderIndex );
    if( hour <= 0 )
        return 0;
    return ( hour * 60 * 60 ) * Random( 50, 150 ) / 100; // +- 50%
}
