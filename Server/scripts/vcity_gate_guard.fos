// Author: heX
// Охранники на входе во внутренний город.
// обыскивают, и запрещают проносить наркотики, алкоголь, взрывчатку
// и заходить в ПА/АПА броне.  ;-)
// ver 0.4

/*
   ToDo:
   сделать закрытие-открытие ворот
 */

#include "utils_for_array.fos"
#include "_macros.fos"
#include "_animation.fos"
#include "guard_lib.fos"

uint[] player_ok = {};     // Массив с id игроков которых обыскали и им можно проходить
uint[] player_warned = {}; // Массив с id игроков которых предупредили - дважды предупреждать не будут
// uint[] player_bad={}; //Массив с id игроков которые прошли без обыска

import bool  GuardItemTest( Item@ item ) from "vcity_guard";
import uint8 GetRank( Critter& cr ) from "vc_guardsman";

void _GateGuardInit( Critter& guard, bool firstTime )
{
    guard.SetEvent( CRITTER_EVENT_MESSAGE, "Guard_OnMessage" );
    guard.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "Guard_on_add_critter" );
    guard.SetEvent( CRITTER_EVENT_HIDE_CRITTER, "Guard_on_remove_critter" );
    guard.SetEvent( CRITTER_EVENT_HIDE_ITEM_ON_MAP, "Guard_on_pick_item" );
}

void Guard_on_add_critter( Critter& npc, Critter& player )
{
    if( not player.IsPlayer() )
        return;
    // Log("Add OK.");
    int i = FindInArray( player_ok, player.Id );
    if( i > 0 )
        player_ok.removeAt( i );
    i = FindInArray( player_warned, player.Id );
    if( i > 0 )
        player_warned.removeAt( i );
}

// Вызывается, когда из поля зрения NPC исчезает криттер.
void Guard_on_remove_critter( Critter& npc, Critter& player )
{
    if( not player.IsPlayer() )
        return;
    int i = FindInArray( player_ok, player.Id );
    if( i > 0 )
        player_ok.removeAt( i );
    i = FindInArray( player_warned, player.Id );
    if( i > 0 )
        player_warned.removeAt( i );
}

// тестирование предмета на разрешонность
bool ItemTest( uint16 protoId )
{
    if(
        Present( protoId, Pids_Drugs ) ||
        Present( protoId, Pids_DrugsAlcohol ) ||
        Present( protoId, Pids_MiscExplosions ) ||
        Present( protoId, Pids_MiscActiveExplosions )
        )
        return false;
    else
        return true;
}

// алгоритм обыска
// возращает коды недопуска
// 0 - все хорошо
// 1 - плохой предмет
// 2 - алкоголь
// 3 - наркотики
// 4 - взрывчатка
// 5 - нету пропуска
int Searching( Critter& npc, Critter& player )
{
    int result = 5;
    int pid = 0;
    Item@[] items;
    int count = player.GetItems( -1, items );
    for( int i = 0; i < count; i++ )
    {
        pid = items[ i ].GetProtoId();
        if( not ItemTest( pid ) )
            return 1;
        if( pid == PID_DAY_PASS )
            result = 0;
        if( pid == PID_FAKE_CITIZENSHIP )
            result = 0;
    }
    return result;
}

// Сообщения от тригеров
void Guard_OnMessage( Critter& guard, Critter& player, int num, int val )
{
// Log("OnMessage ok");
    if( not player.IsPlayer() )
        return;
    if( not guard.IsNoPlanes() )
        return;
    if( guard.Cond != COND_LIFE )
        return;
    if( player.Stat[ ST_CURRENT_HP ] < 0 )
        return;
    if( GetRank( player ) > 0 )
        return;                       // Гвардейцам разрешено проходить без пропуска

    if( num == MESSAGE_PLAYER_ON_WARNING_HEX )
    {
        // Предупреждаем игрока
        if( Present( player.Id, player_warned ) )
            return;             // значит мы его уже предупредили - дважды повторять не будем
        player_warned.insertLast( player.Id );
        Item@ itm = _CritGetItemArmor( player );
        if( valid( itm ) )
            if( Present( itm.GetProtoId(), Pids_ArmorHeavy ) )
            {
                guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 5 ) );
                return;
            }
        guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 1 ) );
        return;
    }

    if( num == MESSAGE_PLAYER_ON_SEARCH_HEX )
        if( GetCrittersDistantion( guard, player ) == 1 )
        {
            if( Present( player.Id, player_ok ) )
                return;                 // мы его уже обыскивали - больше покачто небудем.
            guard.SetDir( GetDirection( guard.HexX, guard.HexY, player.HexX, player.HexY ) );
            if( GuardItemTest( _CritGetItemHand( player ) ) )
            {
                // оружие в руках
                guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 6 ) );
                return;
            }
            Item@ itm = _CritGetItemArmor( player );
            if( valid( itm ) )
                if( Present( itm.GetProtoId(), Pids_ArmorHeavy ) )
                {
                    // плохая броня
                    guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 5 ) );
                    return;
                }
            _CritAnimateUse( guard );
            int searchResult = 0;
            if( ( searchResult = Searching( guard, player ) ) == 0 )
            {
                // все окей
                // guard.Say(SAY_NORM_ON_HEAD, "Даже отобрать нечего, топай дальше");
                guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 2 ) );
                player_ok.insertLast( player.Id );
            }
            else
            {
                if( searchResult == 5 )              // нету пропуска
                    guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 7 ) );
                else
                {
                    // плохие предметы
                    // guard.Say(SAY_NORM_ON_HEAD, "О! да у тебя тут Алкоголь и Наркотики. Не уходи от нас братец!");
                    guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 3 ) );
                    player_ok.removeAt( uint( FindInArray( player_ok, player.Id ) ) );
                }
            }
            return;
        }
        else
        {
            return;
        }

    if( num == MESSAGE_PLAYER_ON_ATACK_HEX )
        if( not Present( player.Id, player_ok ) )
        {
            // игрок ушел в город и его надо вернуть назад
            // ALERT!
            guard.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 4 ) );
            // guard.Say(SAY_SHOUT_ON_HEAD,"Стой! Стрелять буду!");

            // игрок 'просит' чтобы его пристрелили
            player.SendMessage( MESSAGE_PLEASE_KILL_ME_I_AM_IDIOT, 0, MESSAGE_TO_WHO_SEES_ME );

            // Alert(player, MAX_ALERT, ALERT_TYPE_ENTER_ON_DENY);
        }
        else
        {
            // игрок ушел в город

        }

    if( num == MESSAGE_PLAYER_ON_PRE_ENTER )
    {
        // это не честный обыск, но зато надежный.
        if( Searching( guard, player ) != 0 )
        {
            uint idx = uint( FindInArray( player_ok, player.Id ) );
            if( idx >= 0 )
                player_ok.removeAt( idx );
            idx = uint( FindInArray( player_ok, player.Id ) );
            if( idx >= 0 )
                player_warned.removeAt( idx );
            guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 1 ) );
        }
    }

}

// зона в которой солдаты предупреждают о необходимости обыскивания
void t_incoming( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    if( not entered )
        return;

    // Проверяем игрок ли это
    if( not player.IsPlayer() )
        return;

    // он вышел или вошел?
    if( dir == 1 || dir == 2 || dir == 3 )
    {
        // вышел из города дальше зоны предупреждения
        // удаляем из листов
        // grd.DelObserving(player);//!!!
        // player_ok.removeAt(uint(FindInArray(player_ok, player.Id)));
        return;
    }

    // Посылаем сообщение о том, что наступили на этот хекс.
    player.SendMessage( MESSAGE_PLAYER_ON_WARNING_HEX, 0, MESSAGE_TO_WHO_SEES_ME );
}

// обыскивают
// rename t_income -> t_searching
void t_income( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    if( not entered )
        return;
    // Проверяем игрок ли это
    if( not player.IsPlayer() )
        return;

    // Посылаем сообщение о том, что наступили на этот хекс.
    player.SendMessage( MESSAGE_PLAYER_ON_SEARCH_HEX, 0, MESSAGE_TO_WHO_SEES_ME );
}

// игрок проходит первые ворота города
void t_pre_enter( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    if( not entered )
        return;

    // Проверяем игрок ли это
    if( not player.IsPlayer() )
        return;

    if( dir == 1 || dir == 2 || dir == 3 )
        return;

    // Посылаем сообщение о том, что наступили на этот хекс.
    player.SendMessage( MESSAGE_PLAYER_ON_PRE_ENTER, 0, MESSAGE_TO_WHO_SEES_ME );
}

// игрок вошел в город
void t_enter( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    if( not entered )
        return;

    // Проверяем игрок ли это
    if( not player.IsPlayer() )
        return;

    if( dir == 1 || dir == 2 || dir == 3 )
    {
        // вышел из города
        // удаляем из листов
        // убираем из листа наблюдения - больше он охрану не интересует
        // grd.DelObserving(player);//!!!
        return;
    }

    // Посылаем сообщение о том, что наступили на этот хекс.
    player.SendMessage( MESSAGE_PLAYER_ON_ATACK_HEX, 0, MESSAGE_TO_WHO_SEES_ME );
}

void Guard_on_pick_item( Critter& guard, Item& hideItem, bool removed, Critter@ picker )
{
    if( not valid( picker ) )
        return;
    if( removed )
        return;
    if( not picker.IsPlayer() )
        return;
    if( not guard.IsNoPlanes() )
        return;
    if( guard.Cond != COND_LIFE )
        return;
    // Log("pickup detect");

    if( not ItemTest( hideItem.GetProtoId() ) )
    {
        int i = 0;
        if( FindInArray( player_ok, picker.Id, i ) )
        {
            player_ok.removeAt( i );
            guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( DIALOG_vc_gate_guard, 1 ) );
        }
    }
}

uint r_searching( Critter& player, Critter@ guard, int val )
{
    if( Searching( guard, player ) == 0 )
    {
        // окей
        if( not Present( player.Id, player_ok ) )
            player_ok.insertLast( player.Id );
        return 9;
    }
    // не пускаем
    return 10;
}

// constructor [ heX ]
