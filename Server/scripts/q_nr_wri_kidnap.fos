// Author: rifleman17
// Квест "Проблемы мистера Райта: Заложник."
#include "_macros.fos"
#define NEXT_KIDNAP_TIME          ( 60 * 60 * 24 * 30 * Random( 1, 3 ) )
#define KIDNAP_LOC_PROTO          ( LOCATION_WrightKidnap )
#define KINDAP_GLOBAL_X           ( Random( 1229, 1359 ) )
#define KINDAP_GLOBAL_Y           ( Random( 847, 942 ) )

#define GVAR_KIDNAP_ACCESS        ( 11111 )
#define LLVAR_HOSTILE             ( LLVAR_loc_defenders_hostile )    // Признак: нпц враждебны
#define QUEST_VAR                 ( LVAR_q_nr_wri_kidnap )           // Номер квестовой переменной
#define LVAR_LAST_NOTIFY          ( LVAR_nr_wri_kidnap_notify_time ) // Номер переменной, в которой сохраняется последнее время предупреждения игрока
#define LLVAR_GUARD_DEAD          ( LLVAR_nr_wri_guard_dead )        // Признак: охранник Райта мертв

// Статусы квеста
#define Q_QUEST_TAKEN             ( 1 )                              // Взят квест
#define Q_PAY_RAMIREZ             ( 2 )                              // Игрок заплатил за освобождение Райта


#define ENT_DEADZONE_1            ( 100 )                            // Начало мертвой зоны
#define ENT_DEADZONE_2            ( 112 )                            // конец мертвой зоны

#define NPC_ROLE_MARODEUR         ( 1 )                              // Роль НПЦ - рядовой бандит
#define NPC_ROLE_GUARD            ( 2 )                              // Охранник пленного Райта
#define NPC_ROLE_WRIGHT           ( 3 )

#define CTE_ATTACK                ( 17 )

#define RADIUS_SEARCH_MARODEUR    ( 15 )   // Радиус в гексах, в котором нужно искать мародера, который начнет диалог с игроком


#define STR_MAP_IN_HOSTILE        ( 3350 ) // Вы на месте. Бандиты настороже и с оружием в руках. Мирным путем договориться не получится.
#define STR_MAP_IN_SNEAK_OK       ( 3351 ) // Вы на месте. Бандиты выглядят достаточно беспечно. Палатку с сыном Райта охраняет один часовой. Если убрать часового без лишнего шума, вы получите шанс решить все проблемы по-тихому.
#define STR_MAP_IN_LOWSNEAK       ( 3352 ) // Вы на месте. Бандиты выглядят достаточно беспечно. Главарь банды - в центре лагеря. Возможно, у вас получится заплатить выкуп и обойтись без кровопролития.
#define STR_MARODEUR_ATTACK       ( 1 )    // Строка из диалога мародера, которую он произносит при атаке в специальных случаях.
#define STR_GUARD_SHOUT           ( 3353 ) // На помощь!@@Все сюда, Райт может сбежать!@@Подкрепление! Подкрепление!

// #define DL #(s) (Log("kidnap: " + s))
#define DL                        # ( s )

import bool IsCritterInDeadZone( Critter& cr, Map& map, uint8 dir, uint8 hexFirst, uint8 hexEnd ) from "entire";
import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";
import bool Merc2Player( Critter& player, Critter& merc ) from "merc";
import void _MercInit( Critter& merc, bool firstTime ) from "merc";

// ************************ Выдача квеста. *****************************************************************

uint KidnapLocationId = 0;

void _OliverInit( Critter& cr, bool firstTime )
{
    if( cr.Stat[ ST_VAR0 ] == 0 )
    {
        cr.StatBase[ ST_VAR0 ] = CreateTimeEvent( __FullSecond + NEXT_KIDNAP_TIME, "e_Kidnap", true );
    }
    // cr.SetEvent(CRITTER_EVENT_FINISH, "_OliverFinish");
}

uint e_Kidnap( uint[] @ values )
{
    if( !KidnapLocationExist() )
    {
        uint locId = CreateLocation( KIDNAP_LOC_PROTO, KINDAP_GLOBAL_X, KINDAP_GLOBAL_Y, null );
        if( locId > 0 )
        {
            KidnapLocationId = locId;
            DL( "Location:" + locId );
        }
    }
    return NEXT_KIDNAP_TIME;
}



bool KidnapLocationExist()
{
    if( KidnapLocationId == 0 )
        return false;
    Location@ loc = GetLocation( KidnapLocationId );
    return valid( loc );
}

bool d_QuestActive( Critter& player, Critter@ npc )
{
    return KidnapLocationExist();
}

bool d_NotQuestActive( Critter& player, Critter@ npc )
{
    return !KidnapLocationExist();
}

void r_ShowLocation( Critter& player, Critter@ npc )
{
    Location@ loc = GetLocation( KidnapLocationId );
    if( valid( loc ) )
    {
        if( !player.IsKnownLoc( true, loc.Id ) )
            player.SetKnownLoc( true, loc.Id );
    }
}

// ************************ Скрипт карты. ******************************************************************
void _MapInit( Map& map, bool firstTime )
{
    DL( "Map init" );
    Location@ loc = map.GetLocation();
    KidnapLocationId = loc.Id;
    map.SetEvent( MAP_EVENT_LOOP_0, "_MapLoop0" );
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_MapInCritter" );
    map.SetEvent( MAP_EVENT_CRITTER_DEAD, "_MapCritterDead" );

    map.SetEvent( MAP_EVENT_OUT_CRITTER, "_MapOutCritter" );
    map.SetLoopTime( 0, 6000 );
}


void _MapInCritter( Map& map, Critter& cr )
{
    DL( "Map in critter" );
    Location@ loc = map.GetLocation();
    if( !valid( loc ) )
        return;
    GameVar@ status = GetLocalVar( LLVAR_HOSTILE, loc.Id );
    GameVar@ qVar = GetLocalVar( QUEST_VAR, cr.Id );
    if( valid( status ) && valid( qVar ) && qVar == Q_QUEST_TAKEN )
    {
        if( status == 1 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MAP_IN_HOSTILE );
            return;
        }
        if( cr.Skill[ SK_SNEAK ] > 50 )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MAP_IN_SNEAK_OK );
        else
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MAP_IN_LOWSNEAK );
    }
}

void _MapOutCritter( Map& map, Critter& cr )
{
    UpdateQuestStatus( map, cr );
    Location@ loc = map.GetLocation();
    if( valid( loc ) )
        ResetHostileIfNoPlayers( loc );
}

void ResetHostileIfNoPlayers( Location& loc )
{
    GameVar@ status = GetLocalVar( LLVAR_HOSTILE, loc.Id );
    if( !valid( status ) || status == 0 )
        return;
    Critter@[] players;
    for( uint i = 0; i < loc.GetMapCount(); i++ )
    {
        Map@ map = loc.GetMapByIndex( i );
        if( valid( map ) )
            map.GetCritters( 0, FIND_ALL | FIND_ONLY_PLAYERS, players );
    }
    if( players.length() == 0 )
    {
        status = 0;
        // Если убит охранник, возрождаем его
        GameVar@ guardId = GetLocalVar( LLVAR_GUARD_DEAD, loc.Id );
        if( valid( guardId ) && guardId > 0 )
        {
            Critter@ cr = GetCritter( guardId.GetValue() );
            if( valid( cr ) && cr.IsNpc() && cr.IsDead() )
            {
                guardId = 0;
                cr.ToLife();
            }
        }
    }
}
// ************************ На карте кто-то убит. **********************************************************
void _MapCritterDead( Map& map, Critter& cr, Critter@ killer )
{
    Location@ loc = map.GetLocation();
    if( valid( loc ) )
        ResetHostileIfNoPlayers( loc );
    UpdateQuestStatus( map, null );
}
// ************************ Атака рейдеров. ****************************************************************
// Признак: нпц на карте враждебны
bool IsHostile( Map& map )
{
    Location@ loc = map.GetLocation();
    if( valid( loc ) )
    {
        GameVar@ status = GetLocalVar( LLVAR_HOSTILE, loc.Id );
        return valid( status ) && status == 1;
    }
    return false;
}

void SetHostile( Location@ loc, bool hostileOn )
{
    if( valid( loc ) )
    {
        GameVar@ status = GetLocalVar( LLVAR_HOSTILE, loc.Id );
        if( valid( status ) )
            status = hostileOn ? 1 : 0;
    }
}

void AcceptAttack( Map& map )
{
    DL( "accept attack" );
    if( !IsHostile( map ) )
        SetHostile( map.GetLocation(), true );
    uint     marodeurs = map.GetNpcCount( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC );
    Critter@ marodeur;
    Critter@[] players;
    Critter@ player;
    map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players );
    for( uint i = 0; i < marodeurs; i++ )
    {
        DL( "marodeurs" + marodeurs );
        @marodeur = map.GetNpc( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC, i );
        if( valid( marodeur ) )
        {
            for( uint j = 0, l = players.length(); j < l; j++ )
            {
                @player = players[ j ];
                if( valid( player ) )
                {
                    DL( "target found" );
                    marodeur.AddEnemyInStack( player.Id );
                    if( GetCrittersDistantion( marodeur, player ) < 15 )
                    {
                        AddAttackPlane( marodeur, 0, player );
                    }
                }

            }
        }
    }
}

void r_Attack( Critter& cr, Critter@ npc )
{
    AcceptAttack( cr.GetMap() );
}

void dlg_Attack( Critter& cr, Critter@ npc, string@ lexems )
{
    AcceptAttack( cr.GetMap() );
}

// ************************ Игрок в мертвой зоне. **********************************************************
// Мертвая зона. Если игрок в мертвой зоне, рейдеры будут обращаться к нему с вопросами "кто такой", с возможностью атаки
void _MapLoop0( Map& map )
{
    if( IsHostile( map ) )
        return;
    Critter@[] players;
    Critter@[] marodeurs;
    Critter@ player;
    Critter@ npc;
    if( map.GetCritters( 0, FIND_LIFE | FIND_ONLY_PLAYERS, players ) > 0 )
    {
        for( uint i = 0, l = players.length(); i < l; i++ )
        {
            @player = players[ i ];
            if( !valid( player ) )
                return;
            marodeurs.resize( 0 );
            if( map.GetCrittersHex( player.HexX, player.HexY, RADIUS_SEARCH_MARODEUR, FIND_LIFE | FIND_ONLY_NPC, marodeurs ) > 0 )
            {
                @npc = marodeurs[ 0 ];
                if( valid( npc ) && npc.Stat[ ST_NPC_ROLE ] == NPC_ROLE_MARODEUR )
                {
                    TryMarodeurDialog( player, npc, map );
                }
            }
        }
    }
}

void TryMarodeurDialog( Critter& player, Critter& marodeur, Map& map )
{
    if( marodeur.GetTalkedPlayers( null ) > 0 )
        return;                                                                             // НПЦ уже говорит с кем-то
    GameVar@ warned = GetLocalVar( LVAR_LAST_NOTIFY, player.Id );
    if( !valid( warned ) || warned.GetValue() + __TimeMultiplier * 20 > int(__FullSecond) ) // запросы к игрокам не реже раз в 20 сек
        return;
    player.Wait( 0 );
    Critter@ cr;
    Critter@[] players;
    // проверка, что с игроком еще никто не разговаривает
    uint npcCount = map.GetNpcCount( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC );
    if( npcCount > 0 )
    {
        for( uint i = 0; i < npcCount; i++ )
        {
            @cr  = map.GetNpc( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC, i );
            if( valid( cr ) )
                cr.GetTalkedPlayers( players );               // собираем всех говорящих игроков с нпц
        }
    }
    for( uint i = 0, l = players.length(); i < l; i++ )
    {
        @cr = players[ i ];
        if( valid( cr ) && cr.Id == player.Id )     // С этим игроком кто-то уже заговорил
            return;
    }
    // Все проверки пройдены, с игроком никто не говорит, время разрешения находиться на локации прошло. Запускаем еще один диалог
    warned = __FullSecond;
    RunDialog( player, marodeur, true );
}

// ************************ Мародеры. **********************************************************************
void _HostileInit( Critter& cr, bool firstTime )
{
    cr.SetEvent( CRITTER_EVENT_ATTACK, "_HostileAttack" );
    cr.SetEvent( CRITTER_EVENT_DEAD, "_HostileDead" );
    cr.SkillBase[ SK_SMALL_GUNS ] = 250;
    cr.StatBase[ ST_MAX_LIFE ] = Random( 400, 600 );
    cr.StatBase[ ST_ACTION_POINTS ] = Random( 8, 12 );
    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.PerkBase[ PE_BETTER_CRITICALS ] = 1;
    cr.PerkBase[ PE_SNIPER ] = 1;
}

bool _HostileAttack( Critter& cr, Critter& target )
{
    if( target.IsPlayer() && !target.IsDead() && !IsHostile( cr.GetMap() ) )
    {
        if( Random( 1, 2 ) == 1 )
        {
            AcceptAttack( cr.GetMap() );
            cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_GUARD_SHOUT );
        }

    }
    return false;
}
void _HostileDead( Critter& cr, Critter@ killer )
{
    if( valid( killer ) && killer.IsPlayer() )
    {
        GameVar @ counter = GetLocalVar( LVAR_nr_kidnap_kills_counter, killer.Id );
        if( valid( counter ) )
            counter = counter.GetValue() + 1;
    }
}
// ************************ Охранник пленного Райта. *******************************************************
void _GuardInit( Critter& cr, bool firstTime )
{
    cr.SetEvent( CRITTER_EVENT_DEAD, "_GuardDead" );
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "_GuardAttacked" );
    cr.SetEvent( CRITTER_EVENT_RESPAWN, "_GuardRespawn" );
}

void _GuardDead( Critter& cr, Critter@ killer )
{
    Location@ loc = cr.GetMap().GetLocation();
    GameVar@  guardId = GetLocalVar( LLVAR_GUARD_DEAD, loc.Id );
    if( valid( guardId ) )
        guardId = cr.Id;
    if( valid( killer ) && !IsHostile( cr.GetMap() ) )
    {
        GameVar@ qVar = GetLocalVar( QUEST_VAR, killer.Id );
        if( ( valid( qVar ) && qVar == 1 ) || ( valid( qVar ) && qVar == 2 ) )
        {
            qVar = 3;
        }
    }
}

void _GuardRespawn( Critter& cr )
{
    Location@ loc = cr.GetMap().GetLocation();
    GameVar@  guardId = GetLocalVar( LLVAR_GUARD_DEAD, loc.Id );
    if( valid( guardId ) && guardId == cr.Id )
        guardId = 0;
}

bool _GuardAttacked( Critter& cr, Critter& attacker )
{
    Item@ wpn = _CritGetItemHand( attacker );
    if( valid( wpn ) && wpn.GetType() == ITEM_TYPE_WEAPON && wpn.Proto.Weapon_Skill_1 != SK_UNARMED && wpn.Proto.Weapon_Skill_1 != SK_MELEE_WEAPONS )
    {
        // Атака не холодным оружием, остальные должны прибежать
        if( !IsHostile( cr.GetMap() ) )
        {
            SetHostile( cr.GetMap().GetLocation(), true );
            cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_GUARD_SHOUT );
        }
    }
    return false;
}

void t_Alarm( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    Map@     map = player.GetMap();
    Critter@ guard = map.GetNpc( NPC_ROLE_GUARD, FIND_ALL | FIND_ONLY_NPC, 0 );
    if( !valid( guard ) || guard.IsDead() || !entered || IsHostile( player.GetMap() ) )
        return;
    if( player.IsPlayer() )
    {
        GameVar@ questVar = GetLocalVar( QUEST_VAR, player.Id );
        if( valid( questVar ) && questVar != 2 && questVar != 4 )
        {
            AddAttackPlane( guard, 0, player );
            guard.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_GUARD_SHOUT );
            SetHostile( guard.GetMap().GetLocation(), true );
            Critter@ npc = map.GetNpc( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC, 0 );
            if( valid( npc ) )
            {
                AddAttackPlane( npc, 0, player );
            }
        }
    }
}
// Триггер, наступая на который игрок должен быть в снике и подходить ровно со спины
void t_CheckSneak( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    Map@     map = player.GetMap();
    Critter@ guard = map.GetNpc( NPC_ROLE_GUARD, FIND_ALL | FIND_ONLY_NPC, 0 );
    if( !player.IsPlayer() || !valid( guard ) || guard.IsDead() || !entered || IsHostile( player.GetMap() ) )
        return;

    GameVar@ questVar = GetLocalVar( QUEST_VAR, player.Id );
    if( valid( questVar ) )
    {
        if( questVar == 2 )
        {
            player.Wait( 0 );
            RunDialog( player, guard, true );
            return;
        }
        if( questVar == 1 )
        {
            if( player.Mode[ MODE_HIDE ] == 1 && ( player.Dir == 2 || player.Dir == 3 ) )
            {
                guard.SayMsg( SAY_NORM, TEXTMSG_TEXT, 3354 );
                return;
            }
        }
        if( questVar == 4 )
        {
            return;
        }
    }
    AddAttackPlane( guard, 0, player );
    guard.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_GUARD_SHOUT );
    SetHostile( guard.GetMap().GetLocation(), true );
    Critter@ npc = map.GetNpc( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC, 0 );
    if( valid( npc ) )
    {
        AddAttackPlane( npc, 0, player );
    }
}

// Сын райта
void _WrightInit( Critter& cr, bool firstTime )
{
    cr.SetEvent( CRITTER_EVENT_DEAD, "_WrightDead" );
    cr.StatBase[ ST_REPLICATION_TIME ] = -1;
}

void _WrightDead( Critter& cr, Critter@ killer )
{
    // Удаляем локацию, переключаем доступность переменной
    UpdateQuestStatus( cr.GetMap(), null );
    if( valid( killer ) )
    {
        GameVar@ status = GetLocalVar( LVAR_q_nr_salvatore_kill, killer.Id );
        if( valid( status ) && status == 1 )
            status = 2;
    }
}

// Диалог с сыном райта
bool d_WeaponHand( Critter& player, Critter@ npc )
{
    Item@ item = _CritGetItemHand( player );
    if( valid( item ) && item.GetType() == ITEM_TYPE_WEAPON )
        return true;
    return false;
}

void dlg_WeaponHand( Critter& player, Critter@ npc, string@ lexems )
{
    Item@ item = _CritGetItemHand( player );
    if( valid( item ) && item.GetType() == ITEM_TYPE_WEAPON )
        lexems = "$weaponName@msg ITEM" + item.GetProtoId() * 100 + "@";
}

void r_GiveWeaponHand( Critter& player, Critter@ npc )
{
    Item@ item = _CritGetItemHand( player );
    if( valid( item ) && item.GetType() == ITEM_TYPE_WEAPON )
    {
        npc.AddItem( item.GetProtoId(), 1 );
        npc.SetFavoriteItem( SLOT_HAND1, item.GetProtoId() );
        DeleteItem( item );
    }
}

// Озверевший Райт
void r_Fight( Critter& player, Critter@ npc )
{
    if( valid( npc ) )
    {
        npc.AddTimeEvent( "cte_WrightAttack", REAL_SECOND( 3 ), CTE_ATTACK );
        npc.ModeBase[ MODE_UNLIMITED_AMMO ] = 1;
    }
}


void r_WrightMerc( Critter& player, Critter@ npc )
{
    if( !valid( npc ) )
        return;
    Merc2Player( player, npc );
    npc.MercBase[ MERC_ALWAYS_RUN ] = 1;
    npc.MercBase[ MERC_LOSE_DIST ] = 0;
    npc.MercBase[ MERC_MASTER_DIST ] = 2;
}

void _WrightInitMerc( Critter& cr, bool firstTime )
{
    _MercInit( cr, firstTime );

    cr.SetEvent( CRITTER_EVENT_GLOBAL_PROCESS, "_WrightGlobalProcess" );
}

bool _WrightGlobalProcess( Critter& cr, int type, Item@ car, float& x, float& y, float& toX, float& toY, float& speed, uint& encounterDescriptor, bool& waitForAnswer )
{
    cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], 1 ) );
    DeleteNpc( cr );
    return false;
}

void UpdateQuestStatus( Map@ map, Critter@ cr )
{
    if( !valid( map ) )
        return;
    bool wrightAlive = ( map.GetNpcCount( NPC_ROLE_WRIGHT, FIND_LIFE | FIND_ONLY_NPC ) > 0 );
    bool wrightDead = ( map.GetNpcCount( NPC_ROLE_WRIGHT, FIND_DEAD | FIND_ONLY_NPC ) > 0 );
    bool marodeursAlive = ( map.GetNpcCount( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC ) > 0 );
    int  status = 0;
    // if(wrightAlive && marodeursAlive)
    //	status = 5;
    if( !wrightAlive && !wrightDead && marodeursAlive )
        status = 5;
    if( wrightAlive && !marodeursAlive )
        status = 6;
    if( !wrightAlive && !wrightDead && !marodeursAlive )
        status = 6;
    if( wrightDead && marodeursAlive )
        status = 7;
    if( wrightDead && !marodeursAlive )
        status = 8;
    Critter@[] players;
    if( valid( cr ) )
        players.insertLast( cr );
    GameVar@ qVar;
    if( map.GetCritters( 0, FIND_ALL | FIND_ONLY_PLAYERS, players ) > 0 )
    {
        for( uint i = 0, l = players.length(); i < l; i++ )
        {
            @qVar = GetLocalVar( QUEST_VAR, players[ i ].Id );
            if( valid( qVar ) && qVar != 0 && qVar != 11 )
                qVar = status;
        }
    }
    if( wrightDead || !marodeursAlive || ( !wrightDead && !wrightAlive ) )
        CreateTimeEvent( __FullSecond + REAL_HOUR( 1 ), "e_DeleteQuestLocation", map.Id, true );
    if( !marodeursAlive )
    {
        Location@ loc = map.GetLocation();
        if( valid( loc ) )
        {
            GameVar@ allDead = GetLocalVar( LLVAR_nr_kidnap_all_marodeurs_dead, loc.Id );
            allDead = 1;
        }
    }
}

uint e_DeleteQuestLocation( uint[] @ values )
{
    Map@ map = GetMap( values[ 0 ] );
    if( valid( map ) )
    {
        Location@ loc = map.GetLocation();
        if( valid( loc ) )
        {
            loc.AutoGarbage = true;
        }
    }
    return 0;
}

uint cte_WrightAttack( Critter& cr, int identifier, uint& stage )
{
    Map@     map = cr.GetMap();
    AcceptAttack( map );
    uint     marodeurs = map.GetNpcCount( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC );
    Critter@ marodeur;
    for( uint i = 0, l = marodeurs; i < marodeurs; i++ )
    {
        @marodeur = map.GetNpc( NPC_ROLE_MARODEUR, FIND_LIFE | FIND_ONLY_NPC, i );
        if( valid( marodeur ) )
        {
            marodeur.AddEnemyInStack( cr.Id );
            cr.AddEnemyInStack( marodeur.Id );
            AddAttackPlane( cr, 0, marodeur );
        }
    }
    return 0;
}
