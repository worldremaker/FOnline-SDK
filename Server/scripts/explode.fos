// Author: cvet, rifleman17
#include "_macros.fos"

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId ) from "combat";
import void QuakeScreen( Map& map ) from "effects";

#define TRAPS_HIDE                      # (traps)              ( ( traps ) / 5 + 10 )
#define EXPLODE_CLEARANCE_EXPERIENCE    ( 50 )

#define _ExplodeSetNumEvent             # ( explode, eventNum )explode.Val1 = int(eventNum)
#define _ExplodeGetNumEvent             # (explode) uint( explode.Val1 )
#define _ExplodeSetSwitch               # ( explode, explSwitch )explSwitch.Val1 = int(explode.Id)
#define _ExplodeGetExplode              # (explSwitch) GetItem( uint( explSwitch.Val1 ) )
#define _ExplodeSetOwner                # ( explode, ownerId )explode.Val2 = int(ownerId)
#define _ExplodeGetOwner                # (explode) uint( explode.Val2 )
#define _ExplodeSetBonusDamage          # ( explode, value )explode.Val3 = ( value )
#define _ExplodeGetBonusDamage          # (explode) ( explode.Val3 )
#define _ExplodeSetBonusRadius          # ( explode, value )explode.Val4 = ( value )
#define _ExplodeGetBonusRadius          # (explode) ( explode.Val4 )


// Global on use, export
bool OnUseExplode( Critter& cr, Item& explode, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen, uint timer ) // Export
{
    if( valid( targetCr ) || valid( targetItem ) || valid( targetScen ) )
        return false;
    uint16 pid = explode.GetProtoId();
    if( pid != PID_DYNAMITE && pid != PID_ACTIVE_DYNAMITE &&
        pid != PID_PLASTIC_EXPLOSIVES && pid != PID_ACTIVE_PLASTIC_EXPLOSIVE && pid != PID_TOGGLE_SWITCH &&
        pid != PID_MINE && pid != PID_ACTIVE_MINE )
        return false;

    bool isExpert = cr.Perk[ PE_DEMOLITION_EXPERT ] != 0;
    int  trapsSkill = cr.Skill[ SK_TRAPS ];
    if( trapsSkill < 0 )
        trapsSkill = 0;

    if( timer < TIMER_MIN_VALUE )
        timer = TIMER_MIN_VALUE;
    if( timer > TIMER_MAX_VALUE )
        timer = TIMER_MAX_VALUE;
    timer *= 60;   // Convert to game seconds

    // Activate dynamite explosion
    if( pid == PID_DYNAMITE )
    {
        Item@ activateExpl = cr.AddItem( PID_ACTIVE_DYNAMITE, 1 );
        if( not valid( activateExpl ) )
            return false;

        if( not isExpert )
            timer = timer * Random( 80, 120 ) / 100;

        uint numEvent = CreateTimeEvent( __FullSecond + timer, "explode@e_Explode", activateExpl.Id, true );
        SETFLAG( activateExpl.Flags, ITEM_TRAP );
        _ExplodeSetNumEvent( activateExpl, numEvent );
        _ExplodeSetOwner( activateExpl, cr.Id );
        activateExpl.TrapValue = TRAPS_HIDE( cr.Skill[ SK_TRAPS ] );
        _ExplodeSetBonusDamage( activateExpl, trapsSkill );
        _ExplodeSetBonusRadius( activateExpl, isExpert ? 1 : 0 );
        if( cr.Timeout[ TO_REMOVE_FROM_GAME ] < int(timer) + REAL_MINUTE( 5 ) )
            cr.TimeoutBase[ TO_REMOVE_FROM_GAME ] = __FullSecond + timer + REAL_MINUTE( 5 );
    }
    // Activate plastic explosion
    else if( pid == PID_PLASTIC_EXPLOSIVES )
    {
        Item@ expl = cr.AddItem( PID_ACTIVE_PLASTIC_EXPLOSIVE, 1 );
        if( not valid( expl ) )
            return false;
        Item@ explSwitch = cr.AddItem( PID_TOGGLE_SWITCH, 1 );
        if( not valid( explSwitch ) )
            return false;

        SETFLAG( expl.Flags, ITEM_TRAP );
        _ExplodeSetSwitch( expl, explSwitch );
        _ExplodeSetOwner( expl, cr.Id );
        expl.TrapValue = TRAPS_HIDE( cr.Skill[ SK_TRAPS ] );
        _ExplodeSetBonusDamage( expl, trapsSkill );
        _ExplodeSetBonusRadius( expl, isExpert ? 1 : 0 );

        expl.Info += 2;
        explSwitch.Info += 2;
        expl.SetLexems( "$frequency" + expl.Id );
        explSwitch.SetLexems( "$frequency" + expl.Id );
        expl.Update();
        explSwitch.Update();
    }
    // Explode plastic explosion
    else if( pid == PID_TOGGLE_SWITCH )
    {
        Item@ expl = _ExplodeGetExplode( explode );
        if( valid( expl ) )
        {
            uint16   hexX = 0, hexY = 0;
            Map@     map = expl.GetMapPosition( hexX, hexY );
            Critter@ crExpl = ( expl.Accessory == ACCESSORY_CRITTER ? ::GetCritter( expl.CritId ) : null );
            Explode( map, hexX, hexY, crExpl, PID_ACTIVE_PLASTIC_EXPLOSIVE, _ExplodeGetOwner( expl ), _ExplodeGetBonusDamage( expl ), _ExplodeGetBonusRadius( expl ) );
            DeleteItem( expl );
        }
    }
    // Activate mine
    else if( pid == PID_MINE )
    {
        Item@ mine = cr.AddItem( PID_ACTIVE_MINE, 1 );
        if( not valid( mine ) )
            return false;

        SETFLAG( mine.Flags, ITEM_TRAP );
        _ExplodeSetOwner( mine, cr.Id );
        mine.TrapValue = TRAPS_HIDE( cr.Skill[ SK_TRAPS ] );
        _ExplodeSetBonusDamage( mine, trapsSkill );
        _ExplodeSetBonusRadius( mine, isExpert ? 1 : 0 );
        mine.SetScript( "_ExplodeInit" );
    }
    // Deactivate dynamite explosion, plastic explosion or mine
    else if( pid == PID_ACTIVE_DYNAMITE || pid == PID_ACTIVE_PLASTIC_EXPLOSIVE || pid == PID_ACTIVE_MINE )
    {
        if( pid == PID_ACTIVE_DYNAMITE )
            ::EraseTimeEvent( _ExplodeGetNumEvent( explode ) );

        int chance = cr.Skill[ SK_TRAPS ] - ( explode.TrapValue - 10 ) * ( cr.Id == _ExplodeGetOwner( explode ) ? 5 : 10 );
        chance = CLAMP( chance, 5, 90 ) + cr.Stat[ ST_LUCK ];

        // Success
        if( chance > Random( 1, 100 ) )
        {
            if( pid == PID_ACTIVE_DYNAMITE )
                cr.AddItem( PID_DYNAMITE, 1 );
            else if( pid == PID_ACTIVE_MINE )
                cr.AddItem( PID_MINE, 1 );
            else if( pid == PID_ACTIVE_PLASTIC_EXPLOSIVE )
                cr.AddItem( PID_PLASTIC_EXPLOSIVES, 1 );
            cr.StatBase[ ST_EXPERIENCE ] += EXPLODE_CLEARANCE_EXPERIENCE;
        }
        // Fail
        else
        {
            Map@ map = cr.GetMap();
            Explode( map, cr.HexX, cr.HexY, cr, pid, _ExplodeGetOwner( explode ), _ExplodeGetBonusDamage( explode ), _ExplodeGetBonusRadius( explode ) );
        }
    }

    _SubItem( explode, 1 );
    return true;
}

// Explosions initialisation
void _ExplodeInit( Item& item, bool firstTime )
{
    if( item.GetProtoId() == PID_ACTIVE_MINE )
    {
        SETFLAG( item.Flags, ITEM_TRAP );
        item.SetEvent( ITEM_EVENT_WALK, "_MineWalk" );
        item.Update();
    }
}

// Item walk event
void _MineWalk( Item& mine, Critter& cr, bool entered, uint8 dir )
{
    if( entered && cr.Stat[ ST_LOCOMOTION_TYPE ] != LOCOMOTION_FLY && ( cr.Perk[ PE_LIGHT_STEP ] == 0 || Random( 0, 1 ) == 0 ) )
    {
        CreateTimeEvent( __FullSecond, "e_Explode", mine.Id, false );
    }
}

// Time event
uint e_Explode( uint[] @ values )
{
    Item@ item = GetItem( values[ 0 ] );
    if( not valid( item ) )
        return 0;

    uint16 explodePid = item.GetProtoId();
    uint   ownerId = _ExplodeGetOwner( item );
    int    bonusDamage = _ExplodeGetBonusDamage( item );
    int    bonusRadius = _ExplodeGetBonusRadius( item );
    uint16 hexX = 0;
    uint16 hexY = 0;
    Map@   map = item.GetMapPosition( hexX, hexY );
    DeleteItem( item );

    if( valid( map ) )
        Explode( map, hexX, hexY, null, explodePid, ownerId, bonusDamage, bonusRadius );
    else if( item.Accessory == ACCESSORY_CRITTER ) // Global map
    {
        Critter@ cr = ::GetCritter( item.CritId );
        if( valid( cr ) )
            Explode( null, 0, 0, cr, explodePid, ownerId, bonusDamage, bonusRadius );
    }
    return 0;
}

void Explode( Map@ map, uint16 hexX, uint16 hexY, Critter@ cr, uint16 explodePid, uint ownerId, int bonusDamage, int bonusRadius ) // Export
{
    uint16 effectPid;
    uint   effectRadius;
    uint   damage;
    uint   damageType;
    uint   damageRadius;

    switch( explodePid )
    {
    case PID_ACTIVE_DYNAMITE:
        effectPid = PID_EXPLODE_ROCKET;
        effectRadius = 1;
        damage = Random( 30, 50 );
        damageType = DAMAGE_EXPLODE;
        damageRadius = 3;
        break;
    case PID_ACTIVE_PLASTIC_EXPLOSIVE:
        effectPid = PID_EXPLODE_ROCKET;
        effectRadius = 2;
        damage = Random( 40, 80 );
        damageType = DAMAGE_EXPLODE;
        damageRadius = 3;
        break;
    case PID_ACTIVE_MINE:
        effectPid = PID_EXPLODE_ROCKET;
        effectRadius = 1;
        damage = Random( 40, 80 );
        damageType = DAMAGE_EXPLODE;
        damageRadius = 3;
        break;
    default:
        Log( "Invalid explode pid." );
        return;
    }

    damage += bonusDamage;
    if( damage <= 0 )
        damage = 1;
    damageRadius += bonusRadius;
    if( damageRadius <= 0 )
        damageRadius = 1;

    if( valid( map ) )
        ExplodeEx( map, hexX, hexY, effectPid, effectRadius, damage, damageType, damageRadius, ownerId );
    else if( valid( cr ) )
        InjureCritter( cr, damage, damageType, cr.Dir, ownerId );
}

void ExplodeEx( Map& map, uint16 hexX, uint16 hexY, uint16 effectPid, uint effectRadius, uint damage, uint damageType, uint damageRadius, uint ownerId ) // Export
{
    map.RunEffect( effectPid, hexX, hexY, effectRadius );
    map.PlaySound( Random( 0, 1 ) == 0 ? "WHN1XXX1.ACM" : "WHN1XXX2.ACM" );
    QuakeScreen( map );

    Critter@[] critters;
    if( map.GetCrittersHex( hexX, hexY, damageRadius, FIND_LIFE_AND_KO, critters ) == 0 )
        return;
    for( uint i = 0, j = critters.length(); i < j; i++ )
    {
        Critter@ cr = critters[ i ];
        uint     dist = ::GetDistantion( hexX, hexY, cr.HexX, cr.HexY );
        int      dir = ( dist == 0 ? ( cr.Dir + 3 ) % 6 : GetDirection( hexX, hexY, cr.HexX, cr.HexY ) );
        InjureCritter( cr, damage, damageType, dir, ownerId );
        if( ownerId != 0 )
            cr.AddEnemyInStack( ownerId );
    }
}

/*
        Самовостанавливающаяся мина, которую можно положить через маппер
        восстанавливается через некоторое время в тех же координатах
        после того, как взорвется
        время восстановления, в игровых минутах, указывается в Val1
        поскольку Val1 - используется только для динамита пока
        !работает только для предмета Активированная мина
        все параметры:
        Val1 - время респавна мины после активации, в игровых минутах
        Val2 - Id сапера, поставившего мину
        TrapValue- сложность мины
        Val3 - дополнительный урон
        Val4 - дополнительный радиус(базовый радиус = 3)
 */
void _TimerMineInit( Item& mine, bool firstTime )
{
    if( mine.GetProtoId() == PID_ACTIVE_MINE )
    {
        mine.SetEvent( ITEM_EVENT_WALK, "_TimerMineWalk" );
        mine.SetEvent( ITEM_EVENT_SKILL, "_OnSkillTimerMine" );
        mine.Val4 = CLAMP( mine.Val4, 1, 5 );
        SETFLAG( mine.Flags, ITEM_TRAP );
        mine.Update();
    }
}

void _TimerMineWalk( Item& mine, Critter& cr, bool entered, uint8 dir )
{
    // Cкопировано из _MineWalk
    if( entered && cr.Stat[ ST_LOCOMOTION_TYPE ] != LOCOMOTION_FLY && ( cr.Perk[ PE_LIGHT_STEP ] == 0 || Random( 0, 1 ) == 0 ) )
    {
        CreateTimeEvent( __FullSecond, "e_Explode", mine.Id, false );

        // Respawn
        if( mine.Val1 > 0 )
        {
            uint[] values = { mine.MapId, mine.HexX, mine.HexY, mine.GetProtoId(), mine.Val1, mine.Val2, mine.TrapValue, mine.Val3, mine.Val4 }; // 9 элементов массива
            CreateTimeEvent( __FullSecond + mine.Val1 * 60, "e_RespawnTimerMine", values, true );
        }
    }
}

uint e_RespawnTimerMine( uint[] @ values )
{
    if( values.length() < 9 )
        return 0;

    Map@ map = GetMap( values[ 0 ] );
    if( valid( map ) )
    {
        Item @ mine = map.AddItem( values[ 1 ], values[ 2 ], values[ 3 ], 1 );
        if( valid( mine ) )
        {
            mine.Val1 = values[ 4 ];
            mine.Val2 = values[ 5 ];
            mine.TrapValue = ( values[ 6 ] == 0 ? Random( 30, 50 ) : values[ 6 ] );
            mine.Val3 = values[ 7 ];
            mine.Val4 = CLAMP( values[ 8 ], 1, 5 );
            mine.Update();
            mine.SetScript( "_TimerMineInit" );
        }
    }

    return 0;
}

bool _OnSkillTimerMine( Item& mine, Critter& cr, int skill )
{
    uint16 pid = mine.GetProtoId();
    if( pid != PID_ACTIVE_MINE )
        return false;

    bool isExpert = cr.Perk[ PE_DEMOLITION_EXPERT ] != 0;
    int  trapsSkill = cr.Skill[ SK_TRAPS ];
    if( trapsSkill < 0 )
        trapsSkill = 0;

    int chance = cr.Skill[ SK_TRAPS ] - ( mine.TrapValue - 10 ) * ( cr.Id == _ExplodeGetOwner( mine ) ? 5 : 10 );
    chance = CLAMP( chance, 5, 90 ) + cr.Stat[ ST_LUCK ];

    // Success
    if( chance > Random( 1, 100 ) )
    {
        cr.StatBase[ ST_EXPERIENCE ] += EXPLODE_CLEARANCE_EXPERIENCE;
    }
    // Fail
    else
    {
        Map@ map = cr.GetMap();
        Explode( map, cr.HexX, cr.HexY, cr, pid, _ExplodeGetOwner( mine ), _ExplodeGetBonusDamage( mine ), _ExplodeGetBonusRadius( mine ) );
    }

    if( mine.Val1 > 0 )
    {
        uint[] values = { mine.MapId, mine.HexX, mine.HexY, mine.GetProtoId(), mine.Val1, mine.Val2, mine.TrapValue, mine.Val3, mine.Val4 }; // 9 элементов массива
        CreateTimeEvent( __FullSecond + mine.Val1 * 60 + Random( 120, 240 ) * 60, "e_RespawnTimerMine", values, true );
    }

    _SubItem( mine, 1 );
    return true;
}
