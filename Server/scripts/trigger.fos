// Author: cvet, heX, Tab10id
#include "_macros.fos"
#include "stdlib_h.fos"
#include "_msgstr.fos"

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";

#define AI_PLANE_ATTACK_PRIORITY_MARK    ( AI_PLANE_ATTACK_PRIORITY + 1 )

void t_Warn( Critter& player, Scenery& trigger, bool entered, uint8 dir, int npcRole )
{
    Warn( player, npcRole );
}

void t_Attack( Critter& player, Scenery& trigger, bool entered, uint8 dir, int npcRole )
{
    if( not player.IsPlayer() )
        return;
    Map@ map = player.GetMap();
    uint count = map.GetNpcCount( npcRole, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    for( uint i = 0; i < count; i++ )
        AddAttackPlane( map.GetNpc( npcRole, FIND_LIFE_AND_KO | FIND_ONLY_NPC, i ), AI_PLANE_ATTACK_PRIORITY_MARK, player );
}

void t_AttackStop( Critter& player, Scenery& trigger, bool entered, uint8 dir, int npcRole )
{
    if( not player.IsPlayer() )
        return;
    Map@ map = player.GetMap();
    uint count = map.GetNpcCount( npcRole, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    NpcPlane@[] planes;
    for( uint i = 0; i < count; i++ )
    {
        Critter@ npc = map.GetNpc( npcRole, FIND_LIFE_AND_KO | FIND_ONLY_NPC, i );
        planes.resize( 0 );
        uint     count = npc.GetPlanes( planes );
        // проходимся по списку планов в поисках маркированного плана
        for( uint j = 0; j < count; j++ )
            if( ( planes[ j ].Attack_TargId == player.Id ) and
                ( planes[ j ].Priority == AI_PLANE_ATTACK_PRIORITY_MARK ) )
                if( npc.ErasePlane( j ) )
                    npc.EraseEnemyFromStack( player.Id );
    }
}

void t_Kill( Critter& player, Scenery& trigger, bool entered, uint8 dir, int type )
{
    Kill( player, type );
}

void t_Damage( Critter& player, Scenery& trigger, bool entered, uint8 dir, int dmg, int type )
{
    Damage( player, dmg, type, dir );
}

void t_DoorOpen( Critter& player, Scenery& trigger, bool entered, uint8 dir, int entireNum )
{
    DoorControl( player, entireNum, true );
}

void door_open( Critter& player, Scenery& trigger, bool entered, uint8 dir, int entireNum )
{
    t_DoorOpen( player, trigger, entered, dir, entireNum );
}
void t_DoorClose( Critter& player, Scenery& trigger, bool entered, uint8 dir, int entireNum )
{
    DoorControl( player, entireNum, false );
}

void door_close( Critter& player, Scenery& trigger, bool entered, uint8 dir, int entireNum )
{
    t_DoorClose( player, trigger, entered, dir, entireNum );
}

import void ShowElevator( Critter& player, uint8 elevatorType, uint[] mapPids, uint entireNum ) from "elevator";
// лифт, всего существуют 8 типов лифтов. Максимум - 4 этажа
// для четырехэтажного отдельный триггер
// 1ый параметр - номер гекса, на который попадет игрок
// остальные параметры - коды прототипов карт
void t_Elevator4( Critter& player, Scenery& trigger, bool entered, uint8 dir, int entireExit, int map1Pid, int map2Pid, int map3Pid, int map4Pid )
{
    uint[] pids = { uint( map1Pid ), uint( map2Pid ), uint( map3Pid ), uint( map4Pid ) };
    ShowElevator( player, 0, pids, entireExit );
}
// лифт, в котором меньше чем 4 этажа
// 1ый параметр - номер гекса, на который попадет игрок
// 2о1 параметр - типа лифта (от 1 до 8. см. _defines.fos, секцию // Elevators)
// 3ий..5ый параметры - коды протоипов карт
void t_Elevator( Critter& player, Scenery& trigger, bool entered, uint8 dir, int entireExit, int elevatorType, int map1Pid, int map2Pid, int map3Pid )
{
    if( entered )
    {
        if( player.Timeout[ TO_TRANSFER ] > 0 )
            player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_TRANSFER_WAIT );
        else if( player.Timeout[ TO_BATTLE ] > 0 )
            player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
        else
        {
            uint[] pids = { uint( map1Pid ) };
            if( map2Pid > 0 )
                pids.insertLast( uint( map2Pid ) );
            if( map3Pid > 0 )
                pids.insertLast( uint( map3Pid ) );
            ShowElevator( player, elevatorType, pids, entireExit );
        }
    }
}

// Диалог с НПЦ рядом с триггером,  с определенной ролью. 1 параметр - роль НПЦ.
void t_DialogNpc( Critter& player, Scenery& trigger, bool entered, uint8 dir, int npcRole )
{
    player.Wait( 0 );
    DialogNpc( player, npcRole );
}
