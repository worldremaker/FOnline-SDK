// Generic encounter npc script
// Author: cvet, rifleman17, Dagnir
#include "_macros.fos"
#include "_animation.fos"
#include "_teams.fos"

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target, bool run ) from "npc_planes";
import bool AddWalkPlane( Critter& npc, uint priority, int identifier, uint identifierExt, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";
import void SetDeterioration( Item& item, int deteriorationProcent ) from "repair";
import void SaveLoot2Storehouse( uint16 WorldX, uint16 WorldY, Item@[] items ) from "game_event_storehouse";

#define MESSAGE_COLLECT_NPC    ( 30 )
#define MESSAGE_ATTACK_HIM     ( 31 )
#define MESSAGE_ATTACK_ME      ( 32 )
#define PLANE_LOOT             ( 30 )

uint LastDeadId = 0;
uint[] CollectedNpcIds;

void _NpcInit( Critter& npc, bool firstTime )
{
    uint bt = npc.Stat[ ST_BODY_TYPE ];
    if( bt >= BT_MEN && bt <= BT_GHOUL )
    {
        npc.SetEvent( CRITTER_EVENT_MESSAGE, "_NpcMessage"     );
        npc.SetEvent( CRITTER_EVENT_DEAD, "_NpcDead"        );
        npc.SetEvent( CRITTER_EVENT_SMTH_DEAD, "_NpcSmthDead"    );
        npc.SetEvent( CRITTER_EVENT_SMTH_USE_SKILL, "_NpcSmthUseSkill" );
        npc.SetEvent( CRITTER_EVENT_PLANE_END, "_NpcPlaneEnd"    );
        npc.SetEvent( CRITTER_EVENT_STEALING, "_NpcStealing"    );
        npc.SetEvent( CRITTER_EVENT_SMTH_USE_ITEM, "_NpcSmthUseItem" );
        npc.SetEvent( CRITTER_EVENT_SMTH_DROP_ITEM, "_NpcSmthDropItem" );

        Item@[] items;
        npc.GetItems( -1, items );
        bool favrtAmmoSet = false;
        bool favrtWpnSet  = false;
        for( uint i = 0, j = items.length(); i < j; i++ )
        {
            SetDeterioration( items[ i ], Random( 80, 95 ) );
            if( items[ i ].GetType() == ITEM_TYPE_WEAPON && !favrtWpnSet )
            {
                npc.SetFavoriteItem( SLOT_HAND1, items[ i ].GetProtoId() );
                favrtWpnSet = true;
            }
            /*	if(items[i].GetType() == ITEM_TYPE_AMMO && !favrtAmmoSet)
                    {
                            npc.SetFavoriteItem(SLOT_HAND2, items[i].GetProtoId());
                            favrtAmmoSet = true;
                            continue;
                    } */
        }
    }
}

Critter@ GetCritterForLooting( Critter& lootCr )
{
    // Collect npc
    Critter@ result = null;
    lootCr.SendMessage( MESSAGE_COLLECT_NPC, 0, MESSAGE_TO_WHO_SEES_ME );
    if( CollectedNpcIds.length() > 0 )
    {
        // Find better looter
        for( uint i = 0, j = CollectedNpcIds.length(); i < j; i++ )
        {
            Critter@ cr = GetCritter( CollectedNpcIds[ i ] );
            if( cr.GetPlanes( PLANE_LOOT, null ) == 0 )
            {
                @result = cr;
                break;
            }
        }

        // Get random npc
        if( not valid( result ) )
            @result = GetCritter( CollectedNpcIds[ Random( 0, CollectedNpcIds.length() - 1 ) ] );

        // Free handles
        CollectedNpcIds.resize( 0 );
    }
    return result;
}

void _NpcSmthUseItem( Critter& npc, Critter& fromCr, Item& item, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( fromCr.IsPlayer() && npc.IsLife() )
    {
        uint pid = item.GetProtoId();
        if( pid == PID_PLASTIC_EXPLOSIVES || pid == PID_MINE || pid == PID_TOGGLE_SWITCH || pid == PID_DYNAMITE )
        {
            AddAttackPlane( npc, 0, fromCr, __RunOnCombat );
            npc.SendMessage( MESSAGE_ATTACK_HIM, fromCr.Id, MESSAGE_TO_ALL_ON_MAP );
        }
    }
}

void _NpcSmthDropItem( Critter& npc, Critter& fromCr, Item& item )
{
    if( fromCr.IsPlayer() && npc.IsLife() )
    {
        uint pid = item.GetProtoId();
        if( pid == PID_ACTIVE_PLASTIC_EXPLOSIVE || pid == PID_ACTIVE_MINE || pid == PID_ACTIVE_DYNAMITE )
        {
            AddAttackPlane( npc, 0, fromCr, __RunOnCombat );
            npc.SendMessage( MESSAGE_ATTACK_HIM, fromCr.Id, MESSAGE_TO_ALL_ON_MAP );
        }
    }
}

void _NpcMessage( Critter& npc, Critter& fromCr, int message, int value )
{
    if( message == MESSAGE_COLLECT_NPC )
    {
        if( not npc.IsDead() )
            CollectedNpcIds.insertLast( npc.Id );
    }
    else if( message == MESSAGE_ATTACK_HIM )
    {
        if( fromCr.Stat[ ST_TEAM_ID ] == npc.Stat[ ST_TEAM_ID ] && npc.IsLife() )
        {
            Critter@ target = GetCritter( value );
            if( valid( target ) )
                AddAttackPlane( npc, 0, target, __RunOnCombat );
        }
    }
    else if( message == MESSAGE_ATTACK_ME )
    {
        Critter@ target = GetCritter( value );
        if( valid( target ) )
            AddAttackPlane( npc, 0, target, __RunOnCombat );
    }
}

void _NpcDead( Critter& npc, Critter@ killer )
{
    // Loot
    NpcPlane@[] planes;
    if( npc.GetPlanes( PLANE_LOOT, planes ) > 0 )
    {
        Critter@ cr = GetCritterForLooting( npc );
        if( valid( cr ) )
        {
            // Copy planes
            for( uint i = 0, j = planes.length(); i < j; i++ )
                cr.AddPlane( planes[ i ] );
        }
    }

    // Encounters loyality
    if( valid( killer ) && killer.IsPlayer() )
    {
        uint varId = 0;
        switch( npc.Stat[ ST_TEAM_ID ] )
        {
        case TEAM_EncounterHubologist:
            varId = LVAR_enc_loyality_hubologists;
            break;
        case TEAM_EncounterNCR:
            varId = LVAR_enc_loyality_ncr;
            break;
        case TEAM_EncounterVC:
            varId = LVAR_enc_loyality_vcity;
            break;
        case TEAM_EncounterRedding:
            varId = LVAR_enc_loyality_redding;
            break;
        case TEAM_EncounterBroken:
            varId = LVAR_enc_loyality_broken;
            break;
        case TEAM_EncounterGecko:
            varId = LVAR_enc_loyality_gecko;
            break;
        case TEAM_EncounterArroyo:
            varId = LVAR_enc_loyality_arroyo;
            break;
        case TEAM_EncounterKlamath:
            varId = LVAR_enc_loyality_klamath;
            break;
        case TEAM_EncounterModoc:
            varId = LVAR_enc_loyality_modoc;
            break;
        case TEAM_EncounterDen:
            varId = LVAR_enc_loyality_den;
            break;
        case TEAM_EncounterReno:
            varId = LVAR_enc_loyality_reno;
            break;
        case TEAM_EncounterEnclave:
            varId = LVAR_enc_loyality_enclave;
            break;
        case TEAM_EncounterSF:
            varId = LVAR_enc_loyality_sf;
            break;
        default:
            break;
        }
        if( varId != 0 )
        {
            GameVar@ var = GetLocalVar( varId, killer.Id );
            var += 1;
        }
    }
}

void _NpcSmthDead( Critter& npc, Critter& fromCrit, Critter@ killer )
{
    if( fromCrit.Id != LastDeadId )
    {
        if( fromCrit.ItemsCount() > 0 && _CritCanDropItemsOnDead( fromCrit ) )
        {
            Critter@ cr = GetCritterForLooting( fromCrit );
            if( valid( cr ) )
                AddWalkPlane( cr, 0, PLANE_LOOT, fromCrit.Id, fromCrit.HexX, fromCrit.HexY, 6, false, 1 );
        }
        LastDeadId = fromCrit.Id;
    }
}

void _NpcSmthUseSkill( Critter& npc, Critter& fromCr, int skill, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( ( skill == SKILL_LOOT_CRITTER || skill == SK_STEAL ) && valid( onCritter ) && npc.GetPlanes( PLANE_LOOT, onCritter.Id, null ) > 0 )
        AddAttackPlane( npc, AI_PLANE_ATTACK_PRIORITY + 1, fromCr, __RunOnCombat );

}

int _NpcPlaneEnd( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    if( plane.Identifier == PLANE_LOOT && reason == REASON_SUCCESS )
    {
        Critter@ cr = GetCritter( plane.IdentifierExt );
        if( valid( cr ) && cr.IsDead() )
        {
            Item@[] items;
            cr.GetItems( SLOT_INV, items );
            cr.GetItems( SLOT_HAND1, items );
            cr.GetItems( SLOT_HAND2, items );
            npc.GetMap().GetItems( cr.HexX, cr.HexY, items );

            for( uint i = 0, j = items.length(); i < j; i++ )
            {
                int type = items[ i ].GetType();
                if( type < ITEM_TYPE_ARMOR || type > ITEM_TYPE_KEY )
                    @items[ i ] = null;                                                              // Skip
            }

            MoveItems( items, npc );
            SaveLoot2Storehouse( npc.WorldX, npc.WorldY, items );
            _CritAnimatePickup( npc );
            npc.Wait( __Breaktime );
        }
        return PLANE_DISCARD;    // Skip global and end plane
    }
    return PLANE_RUN_GLOBAL;     // Run global
}

void _NpcStealing( Critter& npc, Critter& thief, bool success, Item& item, uint count )
{
    if( !success )
    {
        AddAttackPlane( npc, 0, thief, __RunOnCombat );
        npc.SendMessage( MESSAGE_ATTACK_HIM, thief.Id, MESSAGE_TO_ALL_ON_MAP );
    }
}
