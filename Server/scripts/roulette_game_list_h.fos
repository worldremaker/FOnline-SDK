// Author: Tab10id

//
// American roulette
// Using in roulette
//

// В этом файле хранятся настройки игры для различных НПЦ (минимальные/максимальные ставки и тп)
// Для того чтобы заставить нпц играть с теми или иными настойкам, необходимо указать ему соответствующее значение NpcRole
#define INSIDE_BETS               ( 1 )
#define OUTSIDE_BETS              ( 2 )
#define SINGLE_NUMBER_BET         ( 0 )
#define SPLIT_BET                 ( 1 )
#define STREET_BET                ( 2 )
#define CORNER_BET                ( 3 )
#define SIX_LINE_BET              ( 4 )
#define COLUMN_BET                ( 5 )
#define DOZEN_BET                 ( 6 )
#define EO_BET                    ( 7 )
#define RB_BET                    ( 8 )
#define LH_BET                    ( 9 )

#define BET_SIZE_IS_NULL          ( 0 )
#define BET_SIZE_IS_NOT_NULL      ( 1 )

#define NUMBER_ZERO               ( 37 )
#define NUMBER_DOUBLE_ZERO        ( 38 )

#define SINGLE_NUMBER_PAYOUT      ( 36 )
#define SPLIT_PAYOUT              ( 18 )
#define STREET_PAYOUT             ( 12 )
#define CORNER_PAYOUT             ( 9 )
#define SIX_LINE_PAYOUT           ( 6 )
#define COLUMN_DOZEN_PAYOUT       ( 3 )
#define EORBLH_PAYOUT             ( 2 )

#define RED_COLOR                 ( 0 )

#define BET_TYPE                  ( ST_VAR4 )
#define BET_SIZE                  ( ST_VAR5 )
#define BET_COORD1                ( ST_VAR6 )
#define BET_COORD2                ( ST_VAR7 )
#define BET_COORD3                ( ST_VAR8 )
#define CROUPIER_NUM              ( ST_VAR9 )

#define STANDART_BET_ONE          ( 1 )
#define STANDART_BET_TWO          ( 2 )
#define STANDART_BET_THREE        ( 3 )
#define STANDART_BET_FOUR         ( 4 )
#define STANDART_BET_ALL_MONEY    ( 5 )
#define STANDART_BET_MAX          ( 6 )

#define NPC_ROLE_START_VALUE      ( 72600 )

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";

class RouletteTable
{
    uint   MinBet;        // Минимальная ставка
    uint   MaxBet;        // Максимальная ставка
    uint   Bet1;          // Первый вариант ставки в диалоге
    uint   Bet2;          // Второй вариант ставки в диалоге
    uint   Bet3;          // Третий вариант ставки в диалоге
    uint   Bet4;          // Четвертый вариант ставки в диалоге
    uint16 OnCheat1;      // Реакция на обнаружение жульничества типа 1
    uint16 OnCheat2;      // Реакция на обнаружение жульничества типа 2
    uint16 OnCheat3;      // Дополнительное поле
    uint8  CLevel;        // Способность покермана заметить жульничество (от 1 до 10)
    uint   StopGameMoney; // Сумма, проигрывая которую крупье перестает играть с Дудом. Если 0, то ограничений нет.
    uint16 WaitForGame;   // Количество игровых дней, которые необходимо подождать, чтобы крупье снова начал играть с Дудом, после того как он его обыграл на сумму StopGameMoney
    uint16 GameCurrency;  // Валюта игры (фишки, монеты, тп)

    RouletteTable( uint minBet, uint maxBet, uint bet1, uint bet2, uint bet3, uint bet4, uint16 onCheat1, uint16 onCheat2, uint16 onCheat3, uint8 cLevel, uint stopGameMoney, uint16 waitForGame, uint16 gameCurrency )
    {
        this.MinBet = minBet;
        this.MaxBet = maxBet;
        this.Bet1 = bet1;
        this.Bet2 = bet2;
        this.Bet3 = bet3;
        this.Bet4 = bet4;
        this.OnCheat1 = onCheat1;
        this.OnCheat2 = onCheat2;
        this.OnCheat3 = onCheat3;
        this.CLevel = cLevel;
        this.StopGameMoney = stopGameMoney;
        this.WaitForGame = waitForGame;
        this.GameCurrency = gameCurrency;
    }
};
RouletteTable@[] RTables;

class Starter
{
    Starter()
    {
        InitRTables();
    }
};
Starter aStarter;

void InitRTables()
{
    RTables.insertLast( @RouletteTable( 20, 750, 20, 100, 300, 500, 1, 0, 0, 1, 3000, 2, PID_BOTTLE_CAPS ) );
    RTables.insertLast( @RouletteTable( 30, 850, 30, 200, 500, 650, 0, 0, 0, 3, 6000, 3, PID_BOTTLE_CAPS ) );
}

void RunCheatScript( uint16 funcNum, Critter& player, Critter& croupier )
{
    switch( funcNum )
    {
    case 1:
        _OnCheat1_npc1( player, croupier );
        break;
    default:
        _OnCheatDefault( player, croupier );
        break;
    }
}

void _OnCheat1_npc1( Critter& player, Critter& croupier )
{
/*	croupier.SayMsg(SAY_NORM_ON_HEAD,TEXTMSG_DLG,STR_CHEAT_1);
        AddAttackPlane(croupier,0,player);*/
    /*CreateTimeEvent(__FullSecond+2*60,"e_CancelAttack",croupier,false);*/
/*	InGame[croupier.StatBase[CROUPIER_NUM]]=false;
        GameVar@ var = GetUnicumVar(UVAR_roulette_fraud, croupier.Id, player.Id);
        var = __FullSecond+(60 * 60 * 24 * 3);*/
}

void _OnCheatDefault( Critter& player, Critter& croupier )
{
/*	croupier.SayMsg(SAY_NORM_ON_HEAD,TEXTMSG_DLG,STR_CHEAT_DEFAULT);
        InGame[croupier.StatBase[CROUPIER_NUM]]=false;
        GameVar@ var = GetUnicumVar(UVAR_roulette_fraud, croupier.Id, player.Id);
        var = __FullSecond+(60 * 60 * 24 * 1);*/
}
