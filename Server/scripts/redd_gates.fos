// Author: rifleman17
#include "_macros.fos"
#include "entire.fos"

/*
   Охраняемые врата.
   Позволяет сделать дверь, охраняемую нпц-охранниками.

   - Если жив хоть один охранник, дверь невозможно взломать или открыть. При первой попытке открыть дверь, охранники будут предупреждать игрока "отойди". При второй - начинают атаку игрока.
   - Если дверь открыта, а игрок не получил разрешения на вход, охрана будет атаковать игрока.
   - Открытие/закрытие двери нужно реализовывать через диалог с охранниками с использованием функции r_OpenGates
   - Разрешение на проход нужно давать через диалог с охранником с использованием функции r_SetPlayerAccess
   - Охранники разделены на три группы: охранники внешней стороны, наружной и помощники. Внешние будут нападать на того, кто пытается открыть дверь снаружи. Внутренние - изнутри.
   Помощники нападут на того, кто попытается проникнуть внутрь охраняемой двери и наступит на гекс с дверью. Указание условной роли охранника производится с помощью NPC_ROLE. Можно сделать общий NPC_ROLE для всех охранников.
   Нельзя назначать NPC_ROLE=0
   - Условный номер ворот - это специальный параметр для поиска врат через диалоги. Обязан быть указан у двери, играющей роль ворот в параметре Val3.
   - Дверь должна быть окружена Entire-гексами по всем 6ти сторонам. С наружней стороны у этих гексов должен быть номер ENTIRE_GATES_OUT, внутри ENTIRE_GATES_IN. Эти гексы используются для определения относительного положения игрока и врат.
   - Номера ролей охранников двери должны быть указаны у врат в полях Val0..Val3.
   - У двери используется Val5 для запоминания события закрытия двери.

   Пример использования:

   В маппере:

   1) Двери присваивается скрипт "redd_gates@_GatesInit"
   2) Заполняются параметры итема:
        Val0 - GatesData::NpcRoleOuters - номер роли нпц, для охранника внешней стороны
        Val1 - GatesData::NpcRoleInners - номер роли нпц, для охранника внутренней стороны
        Val2 - GatesData::NpcRoleHelpers - номер роли нпц для группы поддержки - только вмешиваются в бой
        Val3 - Условный "номер двери", для поиска врат через диалог
   3) Рядом с вратами ставятся НПЦ, роли которых должны совпадать с ролями, указанными в Val0...Val2.
   4) Дверь окружаем EntireHex'ами  c номерами 74 - для внешней стороны, 75 - для внутренней
   5) Это все. Для управления открытием двери и получением разрешения на проход, нужно использовать дилаоги с охраной.
   В них передавать параметр gateNumber - в котором указывать номер врат (поле Val3 для двери)
 */
#define GUARD_ROLE_OUTER          ( 1 )                                             // Условная роль "охранник внешней стороны врат"
#define GUARD_ROLE_INNER          ( 2 )                                             // Условная роль "охранник внутренней стороны врат"
#define GUARD_ROLE_HELPER         ( 3 )                                             // Условная роль "охранник поддержки" - помогает тем охранникам 1 и 2 ролей, которым может помочь.
#define ENTIRE_GATES_OUT          ( 74 )                                            // Номер entire гекса перед вратами, который считается "внешним"
#define ENTIRE_GATES_IN           ( 75 )                                            // Номер entire гекса перед вратами, который считается "внутренним"
#define PLAYER_NEAR_OUT           ( 0 )                                             // Игрок рядом с вратами, вплотную с внешней стороны
#define PLAYER_NEAR_IN            ( 1 )                                             // Игрок рядом с вратами, вплотную с внутренней стороны
#define PLAYER_NEAR_ON            ( 2 )                                             // Игрок находится прямо на воротах
#define PLAYER_FAR                ( 3 )                                             // Игрок находится от ворот
#define POS_UNKNOWN               ( 4 )                                             // Неизвестная позиция
#define PASS_TYPE_OUT             ( 1 )                                             // Разрешение на выход
#define PASS_TYPE_IN              ( 2 )                                             // Разрешение на вход
#define PASS_TYPE_BOTH            ( 3 )                                             // Есть разрешение на вход и на выход
#define TIME_TO_CLOSE             ( REAL_MINUTE( 1 ) )                              // Время закрытия ворот, через 1 реальную минуту
#define ANYDATA_BAD_LIST_KEY      # (gatesId) ( "GATES_" + gatesId + "_BAD_LIST" )  // ключ для хранения массива нарушителей в anydata
#define ANYDATA_GOOD_LIST_KEY     # (gatesId) ( "GATES_" + gatesId + "_GOOD_LIST" ) // ключ для хранения массива игроков с пропуском в anydata
#define STR_DONTTOUCH_THE_DOOR    ( 5400 )                                          // "Не подходи к двери @lex pname@. Второй раз предупреждать не буду."
#define STR_ATTACK_LOCKPIKER      ( 5401 )                                          // "Ты слишком глуп@lex sex@. Эта ошибка будет стоить тебе жизни!"
#define STR_ATTACK_NO_ACCESS      ( 5402 )                                          // "КУДА ТЫ? ТЫ ТРУП"
// #define DL #(s) (Log(s))
#define DL                        # ( s )

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";

// Вспомогательный класс, доступ игрока
class PassAccept
{
    uint PlayerId;         // Id игрока
    uint PassType;         // Тип пропуска
    uint CancelTime;       // Время отмены пропуска (игровая минута)
    uint GatesId;          // Id врат, к которым получен доступ
}

class GatesControl         // Описание и методы охраняемых ворот
{
    uint GatesId;          // Id врат
    uint NpcRoleOuters;    // НПЦ роль охранников снаружи, фактическое значение роли НПЦ, которое будет присваиваться криттерам на карте при расстановке их в маппере.
    uint NpcRoleInners;    // то же, для внутренних
    uint NpcRoleHelpers;   // то же, для помощников
    uint GatesNumber;      // Условный "номер двери", для поиска врат через диалог
    uint[] badList;        // Cписок Id игроков-нарушителей для тех или иных врат
    bool badListLoaded;    // Признак, badList загружен
    PassAccept[] goodList; // Список игроков, получивших разрешение на проход в ворота
    bool goodListLoaded;   // Признак, goodList загружен

    GatesControl()
    {
        this.badListLoaded = false;
        this.goodListLoaded = false;
    }

    Map@ GatesMap()
    {
        Item @gates = GetItem( this.GatesId );
        uint mapId = gates.MapId;
        if( mapId == 0 )
            return null;
        return GetMap( mapId );
    }

    Item @ Gates()
    {
        return GetItem( this.GatesId );
    }

    uint GetGuards( uint8 role, int findType, Critter@[]& guards )   // Поиск всех охранников по заданной УСЛОВНОЙ роли
    {
        int npcRole = 0;
        switch( role )
        {
        case GUARD_ROLE_OUTER:
            npcRole = this.NpcRoleOuters;
            break;
        case GUARD_ROLE_INNER:
            npcRole = this.NpcRoleInners;
            break;
        case GUARD_ROLE_HELPER:
        default:
            npcRole = this.NpcRoleHelpers;
        }
        if( npcRole == 0 )
            return 0;                   // 0 NPC_ROLE не поддерживается, чтобы не зацеплять чужих нпц
        uint guardsNum = 0;
        Map@ map = this.GatesMap();
        if( valid( map ) )
        {
            guardsNum = map.GetNpcCount( npcRole, findType );
            DL( "guards num:" + guardsNum );
            if( guardsNum > 0 )
            {
                for( uint i = 0; i < guardsNum; i++ )
                {
                    Critter @ guard = map.GetNpc( npcRole, findType, i );
                    if( valid( guard ) )
                    {
                        guards.insertLast( @guard );
                    }
                }
            }
        }
        return guards.length();
    }

    Critter @ GetClosestGuard( uint8 role, int findType, Critter & player ) // Получение ближайшего охранника к игроку
    {
        Critter @ closestGuard;
        uint distance = 666;                                                // контрольное значение, будем искать меньшее расстояние
        uint curD =  distance;
        Critter @[] guards;
        if( GetGuards( role, findType, guards ) > 0 )
        {
            for( uint i = 0, l = guards.length(); i < l; i++ )
            {
                curD = GetCrittersDistantion( player, guards[ i ] );
                if( curD < distance )
                {
                    distance = curD;
                    @ closestGuard = guards[ i ];
                }
            }
        }
        return closestGuard;
    }

    int GetPlayerGatesDisposition( Critter& player )    // Получение взаимного расположения игрока и врат
    {
        Item @ gates = this.Gates();
        if( !valid( gates ) )
            return POS_UNKNOWN;
        if( player.HexX == gates.HexX && gates.HexY == player.HexY )
            return PLAYER_NEAR_ON;                                                          // если координаты игрока и двери совпадают, игрок стоит в дверном проеме
        Map @ map = this.GatesMap();
        if( !valid( map ) )
            return POS_UNKNOWN;
        Entire[] entires;
        if( ParseEntires( map, entires, ENTIRE_GATES_IN ) > 0 )
        {
            for( uint i = 0, l = entires.length(); i < l; i++ )
            {
                if( player.HexX == entires[ i ].HexX && entires[ i ].HexY == player.HexY )     // если игрок стоит ногами на гексе ENTIRE_GATES_OUT, он снаружи, вплотную к двери
                {
                    return PLAYER_NEAR_IN;
                }
            }
        }
        if( ParseEntires( map, entires, ENTIRE_GATES_OUT ) > 0 )
        {
            for( uint i = 0, l = entires.length(); i < l; i++ )
            {
                if( player.HexX == entires[ i ].HexX && entires[ i ].HexY == player.HexY )     // если игрок стоит ногами на гексе ENTIRE_GATES_IN, он внутри, вплотную к двери
                {
                    return PLAYER_NEAR_OUT;
                }
            }
        }
        return PLAYER_FAR;                   // иначе где-то далеко от врат
    }

    bool CheckPlayerIsBad( Critter& player ) // Проверка, является ли игрок нарушителем
    {
        if( !this.badListLoaded )
        {
            this.GetBadList();
        }
        for( uint i = 0, l = this.badList.length(); i < l; i++ )
        {
            if( player.Id == this.badList[ i ] )
            {
                return true;
            }
        }
        return false;
    }

    void SetPlayerIsBad( Critter& player )     // Заносит игрока в список нарушителей
    {
        if( CheckPlayerIsBad( player ) )
            return;                            // Занесен в списки ранее
        this.badList.insertLast( player.Id );
        SaveBadList();
    }

    void SetPlayerIsNotBad( Critter& player )     // Удаляет код игрока из списка нарушителей
    {
        if( !CheckPlayerIsBad( player ) )
            return;
        for( uint i = 0, l = this.badList.length(); i < l; i++ )
        {
            if( player.Id == this.badList[ i ] )
            {
                this.badList.removeAt( i );
                break;
            }
        }
        SaveBadList();
    }

    void SaveBadList()     // Сохраняет список нарушителей в AnyData
    {
        if( IsAnyData( ANYDATA_BAD_LIST_KEY( this.GatesId ) ) )
        {
            EraseAnyData( ANYDATA_BAD_LIST_KEY( this.GatesId ) );
        }
        SetAnyData( ANYDATA_BAD_LIST_KEY( this.GatesId ), this.badList );
    }

    uint GetBadList()     // Загружает список плохишей
    {
        this.badList.resize( 0 );
        if( this.GatesId < 1 )
            return 0;
        if( !IsAnyData( ANYDATA_BAD_LIST_KEY( this.GatesId ) ) )
            return 0;
        GetAnyData( ANYDATA_BAD_LIST_KEY( this.GatesId ), this.badList );
        this.badListLoaded = ( this.badList.length() > 0 );
        return this.badList.length();
    }

    void AttackPlayer( Critter& player, uint8 role )    // Инструкции охранникам
    {
        Critter @[] guards;
        if( this.GetGuards( role, FIND_LIFE | FIND_ONLY_NPC, guards ) > 0 )
        {
            for( uint i = 0, l = guards.length(); i < l; i++ )
            {
                AddAttackPlane( guards[ i ], 0, player );
            }
        }
    }

    bool CheckPlayerIsGood( Critter& player, uint passType )    // Проверка, что у игрока есть разрешение на проход
    {
        if( !this.goodListLoaded )
            this.GetGoodList();
        DL( "checking goodlist. length:" + this.goodList.length() );
        for( uint i = 0, l = this.goodList.length(); i < l; i++ )
        {
            DL( "Good list!" + this.goodList[ i ].PlayerId + " type:" + goodList[ i ].PassType );
            if( this.goodList[ i ].PlayerId == player.Id && this.goodList[ i ].PassType == passType )
            {
                return true;
            }
        }
        return false;
    }

    void SetPlayerIsGood( Critter& player, uint passType, uint minuteExpire ) // Добавление игроку разрешения на проход ворот. minuteExpire - время, когда разрешение истечет
    {
        if( CheckPlayerIsGood( player, passType ) )
            return;                                                           // Разрешение получено ранее
        PassAccept @ pass = PassAccept();
        pass.PlayerId = player.Id;
        pass.PassType = passType;
        pass.CancelTime = minuteExpire;
        pass.GatesId = this.GatesId;
        if( pass.CancelTime * 60 > __FullSecond )
        {
            this.goodList.insertLast( pass );
            SaveGoodList();
        }
    }

    void GetGoodList()     // Получение списка игроков с пропусками
    {
        if( !IsAnyData( ANYDATA_GOOD_LIST_KEY( this.GatesId ) ) )
            return;
        uint[] data;
        if( !GetAnyData( ANYDATA_GOOD_LIST_KEY( this.GatesId ), data ) )
            return;
        if( data.length() == 0 )
            return;
        uint goodPlayers = data[ 0 ];
        uint idx = 1;
        for( uint i = 0; i < goodPlayers; i++ )
        {
            if( data.length() <= idx + 3 )
                break;
            PassAccept @ pass = PassAccept();
            pass.PlayerId = data[ idx ];
            pass.PassType = data[ idx + 1 ];
            pass.CancelTime = data[ idx + 2 ];
            pass.GatesId = data[ idx + 3 ];
            idx += 4;
            if( pass.CancelTime * 60 > __FullSecond )       // Время пропуска еще не прошло
            {
                this.goodList.insertLast( pass );
            }
        }
        this.goodListLoaded = true;
        this.SaveGoodList();
    }

    void SaveGoodList()     // Сохранение списка игроков с пропусками
    {
        if( !this.goodListLoaded )
            this.GetGoodList();
        uint goodPlayers = this.goodList.length();
        if( goodPlayers == 0 )
        {
            if( IsAnyData( ANYDATA_GOOD_LIST_KEY( this.GatesId ) ) )
                EraseAnyData( ANYDATA_GOOD_LIST_KEY( this.GatesId ) );
            return;
        }
        uint[] data = { goodPlayers };
        for( uint i = 0; i < goodPlayers; i++ )
        {
            PassAccept @ pass = this.goodList[ i ];
            if( !valid( pass ) || pass.CancelTime < __FullSecond )
            {
                if( data.length() > 0 )
                    data.removeLast();
                continue;
            }
            data.insertLast( pass.PlayerId );
            data.insertLast( pass.PassType );
            data.insertLast( pass.CancelTime );
            data.insertLast( pass.GatesId );
        }
        if( IsAnyData( ANYDATA_GOOD_LIST_KEY( this.GatesId ) ) )
            EraseAnyData( ANYDATA_GOOD_LIST_KEY( this.GatesId ) );
        SetAnyData( ANYDATA_GOOD_LIST_KEY( this.GatesId ), data );
    }
}

/* Получение экземпляра класса GatesControl*/

GatesControl @ GatesControlFromItem( Item & item ) // Из самой двери
{
    GatesControl @ gc = GatesControl();
    gc.GatesId = item.Id;
    gc.NpcRoleOuters = item.Val0;
    gc.NpcRoleInners = item.Val1;
    gc.NpcRoleHelpers = item.Val2;
    gc.GatesNumber = item.Val3;
    return gc;
}

GatesControl @ FindGatesControl( Map & map, int number ) // Попытка найти врата по условному номеру
{
    Item @[] gates;
    if( map.GetItemsByType( ITEM_TYPE_DOOR, gates ) == 0 )
        return null;
    for( uint i = 0, l = gates.length(); i < l; i++ )
    {
        if( gates[ i ].Val3 == number )
            return GatesControlFromItem( gates[ i ] );
    }
    return null;
}

/* События врат */

void _GatesInit( Item& gates, bool firstTime )
{
    gates.SetEvent( ITEM_EVENT_SKILL, "_GatesSkill" );
    gates.SetEvent( ITEM_EVENT_WALK, "_GatesWalk" );
}

bool _GatesSkill( Item& gates, Critter& player, int skill ) // Попытка открыть или взломать дверь. Запрещено открывать дверь, этим занимается охрана
{
    GatesControl @ gc  = GatesControlFromItem( gates );
    if( !valid( gc ) || !player.IsPlayer() )
    {

        if( gates.Val5 == 0 )
            gates.Val5 = CreateTimeEvent( __FullSecond + TIME_TO_CLOSE, "e_CloseGates", gates.Id, true );

        return false;
    }
    uint pos = gc.GetPlayerGatesDisposition( player );
    if( pos == POS_UNKNOWN || pos == PLAYER_FAR )
        return true;
    uint8 guardRole = GUARD_ROLE_OUTER;
    if( pos == PLAYER_NEAR_IN )
        guardRole = GUARD_ROLE_INNER;
    // Если будет найден живой охранник, рядом с дверью, он отреагирует на попытку открытия двери.
    Critter @ guard = gc.GetClosestGuard( guardRole, FIND_LIFE | FIND_ONLY_NPC, player );
    if( !valid( guard ) )
    {
        if( gates.Val5 == 0 )
            gates.Val5 = CreateTimeEvent( __FullSecond + TIME_TO_CLOSE, "e_CloseGates", gates.Id, true );
        return false;                                                                                                      // Не найдено живых охранников с нужной стороны ворот
    }
    string lex = "$pname" + GetPlayerName( player.Id ) + "$sex" + ( player.Stat[ ST_GENDER ] == GENDER_MALE ? "" : "а" ); // лексемы. имя игрока и родовое окончание
    if( gc.CheckPlayerIsBad( player ) )
    {
        gc.AttackPlayer( player, guardRole );
        guard.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, STR_ATTACK_LOCKPIKER, lex );
        gc.SetPlayerIsNotBad( player );
    }
    else
    {
        guard.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, STR_DONTTOUCH_THE_DOOR, lex );
        gc.SetPlayerIsBad( player );
    }
    return true;
}

void _GatesWalk( Item& gates, Critter& player, bool entered, uint8 dir ) // Проход игрока через ворота
{
    if( !player.IsPlayer() )
        return;
    GatesControl @ gc  = GatesControlFromItem( gates );
    if( !valid( gc ) )
        return;
    // TODO: Сделать проверки различные для входа и выхода
    if( !gc.CheckPlayerIsGood( player, PASS_TYPE_OUT ) && !gc.CheckPlayerIsGood( player, PASS_TYPE_IN ) )
    {
        Critter @ guard = gc.GetClosestGuard( GUARD_ROLE_HELPER, FIND_LIFE | FIND_ONLY_NPC, player );
        if( valid( guard ) )
        {
            guard.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_ATTACK_NO_ACCESS );
        }
        gc.AttackPlayer( player, GUARD_ROLE_HELPER );
    }
}


/* Функции для диалогов */

bool d_CheckPlayerIsGood( Critter& player, Critter @ npc, int gateNumber, int passType )
{
    Map @ map = player.GetMap();
    if( !valid( map ) )
        return false;
    GatesControl @ gc = FindGatesControl( map, gateNumber );
    DL( "gc here" );
    if( valid( gc ) )
    {
        DL( "gc valid" );
        return gc.CheckPlayerIsGood( player, passType );
    }
    return false;
}

void r_SetPlayerAccess( Critter& player, Critter @ npc, int gateNumber, int passType, int time ) // добавление игроку доступа на проход на time игровых минут типа passType через врата с условным номером gateNumber
{
    Map @ map = player.GetMap();
    if( !valid( map ) )
        return;
    GatesControl @ gc = FindGatesControl( map, gateNumber );
    if( valid( gc ) )
    {
        gc.SetPlayerIsGood( player, passType, __FullSecond + time * 60 );
    }
}

void r_OpenGates( Critter& player, Critter @ npc, int gateNumber, int time ) // Открытие врат с условным номером gateNumber на time игровых минут
{
    Map @ map = player.GetMap();
    if( !valid( map ) )
        return;
    GatesControl @ gc = FindGatesControl( map, gateNumber );
    if( valid( gc ) )
    {
        Item @ gates = gc.Gates();
        if( !valid( gates ) )
            return;
        if( gates.Val5 != 0 )
            return;                       // Врата уже открылись
        gates.Val5 = CreateTimeEvent( __FullSecond + time * 60, "e_CloseGates", gc.GatesId, true );
        if( gates.Val5 != 0 )
        {
            gates.LockerOpen();
        }
    }
}

uint e_CloseGates( uint[] @ values )
{
    // Если в проеме стоит игрок, он будет смещен на энтайр хекс выхода
    Item @ gates = GetItem( values[ 0 ] );
    if( valid( gates ) )
    {
        gates.Val5 = 0;
        Map @ map = GetMap( gates.MapId );
        if( !valid( map ) )
            return 0;
        uint16 hX = gates.HexX;
        uint16 hY = gates.HexY;
        Critter @ cr = map.GetCritter( hX, hY );
        if( valid( cr ) )
        {
            if( GetNearEntire( map, ENTIRE_GATES_OUT, hX, hY ) )
            {
                cr.TransitToMap( map.Id, hX, hY, GetDirection( hX, hY, gates.HexX, gates.HexY ) );
            }
        }
        gates.LockerClose();
    }
    return 0;
}
