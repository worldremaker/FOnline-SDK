// Author: Tab10id

//
// American roulette
// Using in roulette
//
#define DID                            ( DIALOG_all_roulette )

#define STR_INVALID_COORD              ( DLGSTR( DID, 7 ) )
#define STR_BET_OPERATION_SUCCESS      ( DLGSTR( DID, 10 ) )
#define STR_COORD_OPERATION_SUCCESS    ( DLGSTR( DID, 9 ) )
#define STR_INVALID_MONEY              ( DLGSTR( DID, 8 ) )
#define STR_NUMBER                     ( 5 )
#define STR_ZERO                       ( 1 )
#define STR_DOUBLE_ZERO                ( 2 )
#define STR_COLOR_RED                  ( 3 )
#define STR_COLOR_BLACK                ( 4 )
#define STR_WINMONEY                   ( 6 )
#define STR_CURENT_BET_SIZE            ( DLGSTR( DID, 11 ) )
#define STR_BETS_COORDS_INTRO          ( DLGSTR( DID, 12 ) )
#define STR_BETS_COORDS                ( DLGSTR( DID, 13 ) )
#define STR_SET_BET_TYPE               ( DLGSTR( DID, 14 ) )

class CBet
{
    uint8 BetType;     // Тип ставки (необходим для расчета выигрыша)
    uint  BetSize;     // Размер ставки
    uint8[] BetCoords; // Выигрышные числа данной ставки
    CBet()
    {
        BetType = 0;
        BetSize = 0;
        BetCoords.resize( 0 );
    }
    CBet( int betType, int bet, uint8[] coords )
    {
        BetType = betType;
        BetSize = bet;
        BetCoords = coords;
    }
}

/*void _SaveAD(Critter& croupier, bool deleted)
   {
        if(not deleted)
        {
                if(InGame[croupier.StatBase[CROUPIER_NUM]])
                {
                        SaveData(croupier);
                        if(not SetAnyData("Roulette_"+croupier.Id,GameAnyData[croupier.StatBase[CROUPIER_NUM]])) Log("AnyData not created");
                }
        }
   }

   void SaveData(Critter& croupier)
   {
        uint k=0;
        for(uin8 i=0; i<Bets.length(); i++)
        {
                GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++]=Bets[croupier.StatBase[CROUPIER_NUM][i]];
        }
        GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++]=GameStage[croupier.StatBase[CROUPIER_NUM]];
        GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++]=FraudMode[croupier.StatBase[CROUPIER_NUM]];
        GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++]=CardInSleeve[croupier.StatBase[CROUPIER_NUM]];
        GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++]=Fraud2Succ[croupier.StatBase[CROUPIER_NUM]];
        GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++]=GameNum[croupier.StatBase[CROUPIER_NUM]];
        GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++]=ModChFr[croupier.StatBase[CROUPIER_NUM]];
   }

   void GetAData(Critter& croupier)
   {
        uint k=0;
        Bets[croupier.StatBase[CROUPIER_NUM]]=GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++];
        GameStage[croupier.StatBase[CROUPIER_NUM]]=GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++];
        FraudMode[croupier.StatBase[CROUPIER_NUM]]=GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++];
        Fraud2Succ[croupier.StatBase[CROUPIER_NUM]]=GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++];
        GameNum[croupier.StatBase[CROUPIER_NUM]]=GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++];
        ModChFr[croupier.StatBase[CROUPIER_NUM]]=GameAnyData[croupier.StatBase[CROUPIER_NUM]][k++];
        StartGameMoney[croupier.StatBase[CROUPIER_NUM]]=GameAnyData[croupier.StatBase[CROUPIER_NUM]][k];
   }
 */

void LoadSettings( uint npcRole, Critter& croupier ) // Загрузка настроек для конкретного нпц
{
    uint SettNum = npcRole - NPC_ROLE_START_VALUE;   // Получаем номер настройки нпц, для этого отнимаем у роли нпц значение NPC_ROLE_START_VALUE
    if( SettNum >= RTables.length() )                // Если номер настроеки игрока больше количества настроек (настройки указаны в файле roulette_game_list_h.fos)
    {
        SettNum = 0;                                 // Устанавливаем нпц стандартные настройки
    }
//	SettNum=0;
    if( RTables.length() > 0 )                       // Если в файле roulette_game_list_h.fos есть хотя бы одна группа значений
    {
        MinBet[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].MinBet;
        MaxBet[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].MaxBet;
        Bet1[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].Bet1;
        Bet2[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].Bet2;
        Bet3[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].Bet3;
        Bet4[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].Bet4;
        OnCheat1[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].OnCheat1;
        OnCheat2[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].OnCheat2;
        OnCheat3[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].OnCheat3;
        CLevel[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].CLevel;
        StopGameMoney[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].StopGameMoney;
        WaitForGame[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].WaitForGame;
        GameCurrency[ croupier.StatBase[ CROUPIER_NUM ] ] = RTables[ SettNum ].GameCurrency;
    }
    else                                                    // В противном случае
    {
        Log( "\n\n<Roulette> Error: Settings not found!" ); // выдаем в лог сообщение об ошибке
    }
}

uint GetNumber() // Получаем случайное число
{
    uint i;
    i = Random( 0, 37 );
    return i;
}

string GetNumberStr( uint8 number ) // Получаем строковое обозначение числа
{
    string res = "";
    number++;
    if( number > 36 )
    {
        if( number == NUMBER_ZERO )                                    // Если число - зеро
        {
            res += "@msg dlg " + DLGSTR( DID, STR_ZERO ) + "@";        // Вытаскиваем из диалога номер для формирования лексемы означающей зеро
        }
        else                                                           // Если число - двойное зеро
        {
            res += "@msg dlg " + DLGSTR( DID, STR_DOUBLE_ZERO ) + "@"; // Вытаскиваем из диалога номер для формирования лексемы означающей двойное зеро
        }
    }
    else
    {
        res += "@msg dlg " + DLGSTR( DID, STR_NUMBER ) + "@" + number + GetColor( number ); // Если шарик попал на обычное число выводим это число и его цвет
    }
    res += "\n@msg dlg " + DLGSTR( DID, STR_WINMONEY ) + "@";                               // Сохраняем результат
    return res;
}

string GetColor( int i ) // Определение цвета числа
{
    string res = "";
    switch( i )
    {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
    case 12:
    case 14:
    case 16:
    case 18:
    case 19:
    case 21:
    case 23:
    case 25:
    case 27:
    case 30:
    case 32:
    case 34:
    case 36:
        res += " @msg dlg " + DLGSTR( DID, STR_COLOR_RED ) + "@";   // Для числе 1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36 вытаскиваем сообщение о том что число красное
        break;
    default:                                                        // Для остальных чисел
        res += " @msg dlg " + DLGSTR( DID, STR_COLOR_BLACK ) + "@"; // Формируем лексему обозначающую черный цвет
        break;
    }
    return res;
}

void SaveBetCoords( Critter& croupier, uint coord )
{
/*	if(croupier.StatBase[BET_COORD1]==0)
        {
                croupier.StatBase[BET_COORD1]=coord;
        }
        else
        {
                if(croupier.StatBase[BET_COORD2]==0)
                {
                        croupier.StatBase[BET_COORD2]=coord;
                }
                else
                {
                        croupier.StatBase[BET_COORD3]=coord;
                }
        }*/
}

void EndGame( Critter& croupier ) // Завершение игры, обнуляем все служебные переменные
{
    Bets[ croupier.StatBase[ CROUPIER_NUM ] ].resize( 0 );
    CurBetType[ croupier.StatBase[ CROUPIER_NUM ] ] = 0;
    DialogAnswerPageIndex[ croupier.StatBase[ CROUPIER_NUM ] ] = 0;
    DialogAnswerNum[ croupier.StatBase[ CROUPIER_NUM ] ] = 0;
    croupier.StatBase[ BET_COORD1 ] = 0;
    croupier.StatBase[ BET_COORD2 ] = 0;
    croupier.StatBase[ BET_COORD3 ] = 0;
    AllBetSize[ croupier.StatBase[ CROUPIER_NUM ] ] = 0;
}

uint CheckWinCash( Critter& croupier, uint8 num )                                                                                                        // Проходим по всем ставкам игрока для высчитывания его выигрыша
{
    uint cash = 0;                                                                                                                                       // Сумма выигрыша
    for( uint i = 0; i < Bets[ croupier.StatBase[ CROUPIER_NUM ] ].length(); i++ )                                                                       // Проход по всем ставкам
    {
        for( uint m = 0; m < Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ i ].BetCoords.length(); m++ )                                                    // Проход по всем выигрышным числам в указанной ставке
        {
            if( Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ i ].BetCoords[ m ] == ( num + 1 ) )                                                           // Если число выиграло
            {
                cash += Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ i ].BetSize * GetMultipier( Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ i ].BetType ); // Увеличиваем сумму выигрыша
                break;
            }
        }
    }
    return cash;                    // Возвращаем сумму выигрыша
}

uint8 GetMultipier( uint8 betType ) // Получаем множитель выигрыша
{
    uint8 multipl;
    switch( betType )
    {
    case SINGLE_NUMBER_BET:
        multipl = SINGLE_NUMBER_PAYOUT;
        break;
    case SPLIT_BET:
        multipl = SPLIT_PAYOUT;
        break;
    case STREET_BET:
        multipl = STREET_PAYOUT;
        break;
    case CORNER_BET:
        multipl = CORNER_PAYOUT;
        break;
    case SIX_LINE_BET:
        multipl = SIX_LINE_PAYOUT;
        break;
    case COLUMN_BET:
    case DOZEN_BET:
        multipl = COLUMN_DOZEN_PAYOUT;
        break;
    case EO_BET:
    case RB_BET:
    case LH_BET:
        multipl = EORBLH_PAYOUT;
        break;
    }
    return multipl;
}

uint8 GetCornerCoord( uint8 index, uint8 coordNum ) // Получаем 2 координаты ставки на квадрат
{
    uint8 res = ( ( index * 3 ) - 1 ) / 2;
    if( coordNum == 1 )
    {
        return res;
    }
    else
    {
        return res + 4;
    }
}

void SetCoords( Critter& croupier, uint8 betType, uint8[] coords ) // Высчитываем выигрышные числа по координатам или номеравм ставок
{
    uint len = Bets[ croupier.StatBase[ CROUPIER_NUM ] ].length(); // Получаем количество ставок
    len--;                                                         // Номер последней в массиве ставки
    switch( betType )                                              // Высчитываем выигрышные числа в зависимости от координат и типа ставки
    {
    case SINGLE_NUMBER_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 1 );
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 0 ] = coords[ 0 ];
        break;
    case SPLIT_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 2 );
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 0 ] = coords[ 0 ];
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 1 ] = coords[ 1 ];
        break;
    case STREET_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 3 );
        SetStreetCoords( croupier, coords[ 0 ], len );
        break;
    case CORNER_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 4 );
        SetCornerCoords( croupier, coords[ 0 ], coords[ 1 ], len );
        break;
    case SIX_LINE_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 6 );
        SetSixCoords( croupier, coords[ 0 ], len );
        break;
    case COLUMN_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 12 );
        SetColumnCoords( croupier, coords[ 0 ], len );
        break;
    case DOZEN_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 12 );
        SetDozenCoords( croupier, coords[ 0 ], len );
        break;
    case EO_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 18 );
        SetEOCoords( croupier, coords[ 0 ], len );
        break;
    case RB_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 18 );
        SetRBCoords( croupier, coords[ 0 ], len );
        break;
    case LH_BET:
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords.resize( 18 );
        SetLHCoords( croupier, coords[ 0 ], len );
        break;
    }
}

void SetStreetCoords( Critter@ croupier, uint8 coord, uint8 len ) // Высчитываем выигрышные числа ставки на стрит
{
    Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 0 ] = coord * 3;
    Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 1 ] = coord * 3 - 1;
    Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 2 ] = coord * 3 - 2;
}

void SetCornerCoords( Critter@ croupier, uint8 coord1, uint8 coord2, uint8 len ) // Высчитывем выигрышные числа ставки на квадрат
{
    uint8 x1 = 0, x2 = 0;
    x1 = GetXByNum( coord1 );
    x2 = GetXByNum( coord2 );
    Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 0 ] = coord1;
    Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 3 ] = coord2;
    if( x2 > x1 )
    {
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 1 ] = coord1 + 1;
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 2 ] = coord2 - 1;
    }
    if( x2 < x1 )
    {
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 1 ] = coord1 - 1;
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ 2 ] = coord2 + 1;
    }
}

void SetSixCoords( Critter@ croupier, uint8 coord, uint8 len ) // Высчитываем выигрышные числа ставки на 6
{
    coord--;
    for( int8 i = 0; i < 6; i++ )
    {
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ i ] = 3 * coord + i + 1;
    }
}

void SetColumnCoords( Critter@ croupier, uint8 coord, uint8 len ) // Высчитываем выигрышные числа ставки на колонку
{
    for( uint8 i = 0; i < 12; i++ )
    {
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ i ] = i * 3 + coord;
    }
}

void SetDozenCoords( Critter@ croupier, uint8 coord, uint8 len ) // Высчитываем выигрышные числа ставки на дюжину
{
    for( uint8 i = 0; i < 12; i++ )
    {
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ i ] = coord * 12 - i;
    }
}

void SetEOCoords( Critter@ croupier, uint8 coord, uint8 len ) // Высчитываем выигрышные числа ставки на чет/нечет
{
    if( coord == 0 )
    {
        coord = 2;
    }
    for( uint8 i = 0; i < 18; i++ )
    {
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ i ] = i * 2 + coord;
    }
}

void SetRBCoords( Critter@ croupier, uint8 coord, uint8 len ) // Высчитываем выигрышные числа ставки на красное/черное
{
    uint8[] red = { 1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36 };
    uint8[] black = { 2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35 };
    for( uint8 i = 0; i < 18; i++ )
    {
        if( coord == RED_COLOR )
        {
            Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ i ] = red[ i ];
        }
        else
        {
            Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ i ] = black[ i ];
        }
    }
}

void SetLHCoords( Critter@ croupier, uint8 coord, uint8 len ) // Высчитываем выигрышные числа ставки на большое/малое
{
    for( uint8 i = 0; i < 18; i++ )
    {
        Bets[ croupier.StatBase[ CROUPIER_NUM ] ][ len ].BetCoords[ i ] = coord * 18 + i + 1;
    }
}

uint8 GetXByNum( uint8 num ) // Получаем номер линии по числу
{
    return num / 3;
}

uint GetMaxBetForBetType( Critter& croupier, uint betType ) // Высчитываем максимальный размер ставки для данного типа ставки
{
    uint mBet;
    switch( betType )
    {
    case SINGLE_NUMBER_BET:
        mBet = MaxBet[ croupier.StatBase[ CROUPIER_NUM ] ] / 18;
        break;
    case SPLIT_BET:
        mBet = MaxBet[ croupier.StatBase[ CROUPIER_NUM ] ] / 9;
        break;
    case STREET_BET:
        mBet = MaxBet[ croupier.StatBase[ CROUPIER_NUM ] ] / 6;
        break;
    case CORNER_BET:
        mBet = MaxBet[ croupier.StatBase[ CROUPIER_NUM ] ] * 2 / 9;
        break;
    case SIX_LINE_BET:
        mBet = MaxBet[ croupier.StatBase[ CROUPIER_NUM ] ] / 3;
        break;
    case COLUMN_BET:
    case DOZEN_BET:
        mBet = MaxBet[ croupier.StatBase[ CROUPIER_NUM ] ] * 2 / 3;
        break;
    case EO_BET:
    case RB_BET:
    case LH_BET:
        mBet = MaxBet[ croupier.StatBase[ CROUPIER_NUM ] ];
        break;
    }
    return mBet;
}
