// Самовосстанавлиающийся итем
// аргументы:
// RespTime время респауна в игровых минутах (Val4)
// Mode - режим респауна. (Val5)
//        0 - в том же месте,
//        1 - в инвентаре НПЦ на той же карте,
//		  2 - в контейнере на той же карте
//		  3+ - если режим>2, то итем располагается гденибудь неподалеку от гекса с таким номером
// респауну подвержены только итемы типов: ITEM_TYPE_ARMOR, ITEM_TYPE_DRUG, ITEM_TYPE_WEAPON, ITEM_TYPE_MISC, ITEM_TYPE_KEY
// Eсть дополнительная возможность указать номер переменной (поле Val3), чье значение будет проверяться при попытке поднять итем
// если значение переменной = 1, предмет будет поднят и после этого переменная будет установлена в 0

#include "_macros.fos"

#define STR_CANT_PICKUP    ( 3600 )                                                                         // номер сообщения "вы не можете поднять еще один такой предмет"
#define MODE_XY            ( 0 )                                                                            // режим " в тех же координатах "
#define MODE_NPC           ( 1 )                                                                            // режим " в инвентаре нпц "
#define MODE_CONTAINER     ( 2 )                                                                            // режим " в контейнере "

void SetItemRespawn( Item& item, uint mode, uint respTime )
{
    item.Val5 = mode;
    item.Val4 = respTime;
    item.SetEvent( ITEM_EVENT_SKILL, "e_ItemOnSkill" );
    item.SetScript( "_RespItemInit" );
    item.Update();
}

void SetItemNoPick( Item& item, uint varNum )
{
    item.Val3 = varNum;
    item.SetEvent( ITEM_EVENT_SKILL, "e_ItemOnSkill" );
    item.SetScript( "_RespItemInit" );
    item.Update();
}

bool CheckItemValidToRespawn( Item @ item )
{
    if( !valid( item ) )
        return false;

    uint8 protoType = item.GetType();
    return protoType == ITEM_TYPE_ARMOR || protoType == ITEM_TYPE_DRUG || protoType == ITEM_TYPE_WEAPON || protoType == ITEM_TYPE_MISC || protoType == ITEM_TYPE_KEY;
}

void _NonRespItemInit( Item& item, bool firstTome )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_ItemOnSkill" );
}
bool _NonRespOnSkill( Item& item, Critter& cr, int skill )
{
    // проверка, может ли игрок поднять предмет
    if( item.Val3 != 0 )
    {
        GameVar @canPick = GetLocalVar( item.Val3, cr.Id );
        if( valid( canPick ) )
        {
            if( canPick.GetValue() == 0 )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_PICKUP );
                return true;
            }
            else
            {
                canPick = 0;
            }
        }
    }
    return false;
}
bool e_ItemOnSkill( Item& item, Critter& cr, int skill )
{
    // Log("sk"+skill);
    if( skill < 0 )
    {
        // проверка, может ли игрок поднять предмет
        if( item.Val3 != 0 )
        {
            GameVar @canPick = GetLocalVar( item.Val3, cr.Id );
            if( valid( canPick ) )
            {
                if( canPick.GetValue() == 0 )
                {
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_PICKUP );
                    return true;
                }
                else
                {
                    canPick = 0;
                }
            }
        }

        if( item.Val4 > 0 && valid( cr.GetMap() ) )
        {

            uint[] values =
            {
                cr.GetMap().Id,                      // карта респауна
                item.GetProtoId(),                   // код Пида итема
                item.GetCount(),                     // количество
                item.GetScriptId(),                  // скрипт
                item.HexX,                           // координаты
                item.HexY,                           // координаты
                item.Val3,                           // номер переменной в которой хранится признак может ли игрок поднять этот итем
                item.Val5,                           // режим респауна
                item.Val4,                           // время следующего респауна
                item.Info
            };

            CreateTimeEvent( __FullSecond + item.Val4, "e_RespawnItem", values, true );
            item.Val4 = 0;
        }

        // item.SetEvent(ITEM_EVENT_SKILL, "");
        item.SetScript( "_NonRespItemInit" );
    }
    return false;
}


void RespawnItem( uint mapId, uint16 itemPid, uint itemCount, uint scriptId, uint16 hX, uint16 hY, uint varNum, uint modeResp, uint timeResp, uint itemInfo )
{
    uint[] values = { mapId, itemPid, itemCount, scriptId, hX, hY, varNum, modeResp, timeResp, itemInfo };
    e_RespawnItem( values );
}

uint e_RespawnItem( uint[] @ values )
{
    if( values.length() == 10 )
    {
        uint   mapId = values[ 0 ];
        uint16 proto = values[ 1 ];
        uint   count = values[ 2 ];
        string script = ( values[ 3 ] == 0 ? "" : ( ::GetScriptName( values[ 3 ] ) ) );
        uint16 hx = values[ 4 ];
        uint16 hy = values[ 5 ];
        uint   varNum = values[ 6 ];
        uint   mode = values[ 7 ];
        uint   respTime = values[ 8 ];
        uint   info = values[ 9 ];
        Item @ item;

        Map @ map = GetMap( mapId );
        if( !valid( map ) )
            return 0;

        uint tryNum = 0;

        while( tryNum < 10 )
        {
            switch( mode )
            {
            case MODE_XY:
                @item = RespawnItemCoords( map, hx, hy, proto, count );
                break;
            case MODE_NPC:
                @item = RespawnItemAnyCritter( map, proto, count );
                break;
            case MODE_CONTAINER:
                @item = RespawnItemContainer( map, proto, count );
                break;
            default:
                @item = RespawnItemNearEntire( map, mode, proto, count );
                break;
            }
            tryNum++;
            if( valid( item ) )
                break;
        }
        if( valid( item ) )
        {

            if( values[ 3 ] > 0 )
                item.SetScript( script );
            item.Info = info;
            SetItemNoPick( item, varNum );
            SetItemRespawn( item, mode, respTime );
        }
    }

    return 0;
}

// isUniq - признак, что итем только один может быть на данном гексе (уникальный для данной точки системы координат)
Item@ RespawnItemNearEntire( Map& map, uint8 entire, uint16 protoId, uint count )
{
    uint eCount = map.CountEntire( entire );
    if( eCount == 0 )
        return null;

    uint   numTry = 0;
    uint16 hx = 0;
    uint16 hy = 0;
    Item@[] items;
    bool   foundItem = false;
    while( numTry < 10 )
    {
        foundItem = false;
        if( map.GetEntireCoords( entire, Random( 0, eCount - 1 ), hx, hy ) )
        {
            @items;
            if( map.GetItems( hx, hy, items ) == 0 )
            {
                // на гексе нет ни одного итема
                return RespawnItemCoords( map, hx, hy, protoId, count );
            }
            for( uint i = 0; i < items.length(); i++ )
            {
                if( items[ i ].GetProtoId() == protoId )
                {
                    foundItem = true;
                    break;
                }
            }
            if( !foundItem )
            {
                // не найден итем с данным кодом - можно добавлять
                return RespawnItemCoords( map, hx, hy, protoId, count );
            }
        }
        numTry++;
    }

    return null;
}

Item@ RespawnItemContainer( Map& map, uint protoId, uint count )
{
    Item@[] containers;
    map.GetItemsByType( ITEM_TYPE_CONTAINER, containers );

    Item@ container = containers[ Random( 0, containers.length() - 1 ) ];
    if( !valid( container ) )
        return null;
    return container.AddItem( protoId, count, 0 );

}

Item@ RespawnItemAnyCritter( Map& map,  uint16 protoId, uint count )
{
    Critter @[] critters;
    if( map.GetCritters( 0, FIND_ALL | FIND_ONLY_NPC, critters ) > 0 )
    {
        return critters[ Random( 0, critters.length() - 1 ) ].AddItem( protoId, count );
    }
    return null;
}

Item@ RespawnItemCoords( Map& map, uint16 hexX, uint16 hexY, uint16 protoId, uint count )
{
    if( hexX == 0 || hexY == 0 )
        return null;
    return map.AddItem( hexX, hexY, protoId, count );
}

void _RespItemInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_ItemOnSkill" );
}

void _RespawnItemInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_ItemOnSkill" );
}
