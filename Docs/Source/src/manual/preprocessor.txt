/** \~russian @page page_preprocessor Препроцессор

Прежде чем подвергать компиляции исходный код скрипта, скрипт передается на обработку встроенному препроцессору. Препроцессор на входе получает иходный код, написанный программистом, а на выходе выдает переработанный код, полученный с учетом указанных в скрипте директив.\n

<b>Директивы препроцессора:</b>\n

@code
#include
#define
#ifdef
#ifndef
#endif
@endcode

Директива "#include" включает в состав исходного файла содержимое указанного файла. Таким образом, после обработки препроцессором, все строки:
@code
#include "filename"
@endcode
будут заменены содержимым указанного файла.

Директива "#define" в основном используется для создания констант и макросов:

<b>Пример константы:</b>
@code
#define MONEY_PID (41)
@endcode
После такого объявления, в коде скрипта можно использовать строку MONEY_PID вместо прямого указания номера 41, в тех местах, где необходимо указать пид, используемый в качестве денег. После обработки препроцессором, все строки "MONEY_PID" будут заменены на "(41)"

<b>Пример макроса:</b>
@code
#define _CritMoveItem           #(cr,item,toSlot) cr.MoveItem(item.Id,item.GetCount(),toSlot)
@endcode
После такого объявления, встреченные в исходном коде строки:
@code
_CritMoveItem(player,weapon,SLOT_ARMOR);
@endcode
будут заменены на:
@code
player.MoveItem(weapon.Id,weapon.GetCount(),(3))
@endcode
При этом, строка SLOT_ARMOR будет заменена на (3), так как в файле _defines.fos объявлена директива "#define SLOT_ARMOR                  (3) // Armor slot"\n
\n
"#ifdef" - открытие блока "если определено"\n
"#ifndef" - открытие блока "если не определено"\n
"#endif" - закрытие блока\n
Директивы #ifdef, #ifndef и #endif существуют для еще большего удобства скриптера.

<b>Пример исползования:</b>
@code
#define __DEBUG__
#ifdef __DEBUG__
Log(.......);
#endif
....
....
#ifdef __DEBUG__
SayId(.......);
#endif
....
....
#ifndef __DEBUG__
StartAttack(.......);
#endif
@endcode
В данном примере в исходном коде после обработки препроцессором встретятся строки "Log(.......);" и "SayId(.......);", однако, если убрать или закомментировать строку "#define __DEBUG__", то в коде будет только строка "StartAttack(.......);"\n
\n
Помимо обработки директив, препроцессор убирает из исходного кода все комментарии, так как они не важны для компилятора.\n
Стоит так же отметить, что при сообщении компилятором об ошибках в коде, он выдает номера строк и символов в коде после обработки препроцессором.\n
Обработанные препроцессором скрипты появляются при запуске сервера и находятся в папке скриптов с расширениями "fosp", если необходимо посмотреть полученный код при ручном компилировании, необходимо передать компилятору имя файла, куда будет помещен полученный код, с помощью параметра "-p".

<b>Типичная функция после обработки препроцессором</b>:
@code
uint GetKeyId(Critter&cr,uint lockerId)
{
	if(lockerId==0||(0x80000000|(cr.Id))==lockerId||(0x40000000|(cr.Id))==lockerId)return 0;
	Item@[]keys;
	for(uint i=0,j=cr.GetItemsByType((7),keys);i<j;i++)if(keys[i].LockerId==lockerId)return keys[i].Id;
	return 0;
}
@endcode
<b>Исходный вид функции</b>:
@code
uint GetKeyId(Critter& cr, uint lockerId) // Export
{
	if(lockerId==0 || _CritFingersDoorId(cr.Id)==lockerId || _CritEyesDoorId(cr.Id)==lockerId) return 0;
	Item@[] keys;
	for(uint i=0,j=cr.GetItemsByType(ITEM_KEY,keys);i<j;i++) if(keys[i].LockerId==lockerId) return keys[i].Id;
	return 0;
}
@endcode
 */